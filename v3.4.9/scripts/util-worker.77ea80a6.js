var e={4960:e=>{e.exports=import("./vyxal/vyxal.js")}},t={};function s(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,s),o.exports}const r="vyxal",a=Promise.all([Promise.resolve().then(s.bind(s,4960)),fetch(`${r}/ShortDictionary.txt`,{cache:"force-cache"}).then((e=>e.text())),fetch(`${r}/LongDictionary.txt`,{cache:"force-cache"}).then((e=>e.text()))]).then((([{Vyxal:e},t,s])=>(e.setShortDict(t),e.setLongDict(s),e)));async function o(e){const t=await a;switch(e.type){case"sbcsify":return{data:t.getSBCSified(e.code),rqid:e.rqid};case"compress":return{data:t.compress(e.text),rqid:e.rqid};case"decompress":return{data:t.decompress(e.text),rqid:e.rqid}}}const c=(n=self,"SharedWorkerGlobalScope"==Object.getPrototypeOf(n).constructor.name);var n;console.log(`Utility worker loaded (shared: ${c})`),c?self.addEventListener("connect",(e=>{console.log("Connection opened");const t=e.ports[0];t.addEventListener("message",(async e=>{t.postMessage(await o(e.data))})),t.start(),t.postMessage("ready")})):self.addEventListener("message",(async e=>{self.postMessage(await o(e.data))}));
//# sourceMappingURL=../maps/util-worker.77ea80a6.js.map