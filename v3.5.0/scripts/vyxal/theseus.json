{"elements":[{"name":"2 to the Power of N / Eval","symbol":"E","keywords":["2**n","2pow","eval","2**"],"overloads":["**2 to the Power of N** (`num`): 2 ** #1","**Eval** (`str`): Evaluate #1"],"vectorises":true},{"name":"Is Even / Split Newlines","symbol":"e","keywords":["even?","is-even","split-newlines","/newline"],"overloads":["**Is Even** (`num`): Is #1 even","**Split Newlines** (`str`): Split #1 by newlines"],"vectorises":true},{"name":"Init","symbol":"ᐐ","keywords":["init"],"overloads":["**Init** (`any`): All but the last element of #1"],"vectorises":false},{"name":"Digits, Uppercase, Lowercase","symbol":"kR","keywords":["digits-uppercase-lowercase"],"overloads":["**Digits, Uppercase, Lowercase**: Push \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\" to the stack"],"vectorises":false},{"name":"Printable ASCII","symbol":"kP","keywords":["printable-ascii"],"overloads":["**Printable ASCII**: Push \"!\" to \"~\" to the stack"],"vectorises":false},{"name":"Round","symbol":"◌","keywords":["round"],"overloads":["**Round** (`num`): Round #1 to the nearest integer, half-up"],"vectorises":true},{"name":"Flatten and Join on Nothing","symbol":"⎃","keywords":["flatten-and-join-on-nothing"],"overloads":["**Flatten and Join on Nothing** (`lst`): Flatten #1 and join on nothing"],"vectorises":false},{"name":"Cartesian Product","symbol":"X","keywords":["cartesian-product"],"overloads":["**Cartesian Product** (`lst,lst`): Cartesian product of #1 and #2"],"vectorises":false},{"name":"Keep Truthy","symbol":"ꜝ","keywords":["keep-truthy"],"overloads":["**Keep Truthy** (`lst`): Keep only the truthy elements of #1"],"vectorises":false},{"name":"Geometric Mean","symbol":"∆G","keywords":["geometric-mean"],"overloads":["**Geometric Mean** (`lst`): Geometric mean of #1 (product(#1) ^ (1 / len(#1)))"],"vectorises":false},{"name":"NCR / N Choose R / Characters Same? / Fixpoint Collect","symbol":"ℂ","keywords":["ncr","choose","characters-same?","fixpoint-collect"],"overloads":["**NCR / N Choose R** (`num,num`): nCr of #1 and #2 (n choose r)","**Characters Same?** (`str,str`): Are all characters in #1 the same as #2?","**Fixpoint Collect** (`fun,any`): Repeatedly apply #1 on #2 until a fixed point is reached, collecting intermediate results","**Fixpoint Collect** (`any,fun`): Repeatedly apply #2 on #1 until a fixed point is reached, collecting intermediate results"],"vectorises":true},{"name":"Space","symbol":"␣","keywords":["space"],"overloads":["**Space**: Push a space to the stack"],"vectorises":false},{"name":"Absolute Value / Keep Letters / First Positive Integer Where Function is True","symbol":"⦷","keywords":["abs","absolute-value","keep-letters","first>0"],"overloads":["**Absolute Value** (`num`): Absolute value of #1","**Keep Letters** (`str`): Keep only the letters of #1","**First Positive Integer Where Function is True** (`fun`): First positive integer where #1 is true (>= 1)"],"vectorises":true},{"name":"Chunk to Length / Partition to Lengths / First N Integers Where Function is True","symbol":"Ϣ","keywords":["chunk-to-length","partition-to-length","first-n-true"],"overloads":["**Chunk to Length** (`any,num`): Chunk #1 into parts of length #2","**Chunk to Length** (`num,any`): Chunk #2 into parts of length #1","**Partition to Lengths** (`itr,lst[num]`): Partition #1 into parts of lengths #2","**First N Integers Where Function is True** (`num,fun`): First #1 integers where function #2 is true","**First N Integers Where Function is True** (`fun,num`): First #2 integers where function #1 is true"],"vectorises":false},{"name":"Drop / APL Style Drop / Fixed Point Headless","symbol":"ᐵ","keywords":["drop","fixed-point-headless"],"overloads":["**Drop** (`any,num`): All but the first #2 elements of #1","**Drop** (`num,any`): All but the first #1 elements of #2","**APL Style Drop** (`lst,lst[num]`): APL style drop","**Fixed Point Headless** (`fun,any`): Repeatedly apply #1 to #2 until it doesn't change. Do not include the initial value","**Fixed Point Headless** (`any,fun`): Repeatedly apply #1 to #2 until it doesn't change. Do not include the initial value"],"vectorises":false},{"name":"Continue","symbol":"#x","keywords":["continue"],"overloads":["**Continue**: Continue to the next iteration of the current loop"],"vectorises":false},{"name":"Head Peek","symbol":"ɦ","keywords":["head-peek"],"overloads":["**Head Peek** (`lst`): First element of #1 without popping"],"vectorises":false},{"name":"Uppercase Letters","symbol":"kA","keywords":["uppercase-letters"],"overloads":["**Uppercase Letters**: Push \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" to the stack"],"vectorises":false},{"name":"Break","symbol":"#X","keywords":["break"],"overloads":["**Break**: Break out of the current loop"],"vectorises":false},{"name":"Behead","symbol":"ᐕ","keywords":["behead"],"overloads":["**Behead** (`any`): All but the first element of #1"],"vectorises":false},{"name":"Split","symbol":"s","keywords":["split"],"overloads":["**Split** (`any,any`): Split #1 by #2"],"vectorises":false},{"name":"Recurse","symbol":"x","keywords":["recurse"],"overloads":["**Recurse**: Recursively call the current function (or the top-level program if not in a function)"],"vectorises":false},{"name":"Reverse Lowercase","symbol":"kz","keywords":["reverse-lowercase"],"overloads":["**Reverse Lowercase**: Push \"zyxwvutsrqponmlkjihgfedcba\" to the stack"],"vectorises":false},{"name":"Punctuation","symbol":"kp","keywords":["punctuation"],"overloads":["**Punctuation**: Push all punctuation characters to the stack"],"vectorises":false},{"name":"Rotate Right / Rotate Right","symbol":"↻","keywords":["rot-right"],"overloads":["**Rotate Right** (`lst\\|str`): Rotate #1 right","**Rotate Right** (`lst\\|str,num`): Rotate #1 right #2 times. Left if #2 is negative"],"vectorises":false},{"name":"10000","symbol":"k2","keywords":["10000"],"overloads":["**10000**: Push 10000 to the stack"],"vectorises":false},{"name":"Hyperbolic Tangent","symbol":"∆T","keywords":["tanh","hyperbolic-tangent"],"overloads":["**Hyperbolic Tangent** (`num`): Hyperbolic tangent of #1"],"vectorises":true},{"name":"Lowercase Letters","symbol":"ka","keywords":["lowercase-letters"],"overloads":["**Lowercase Letters**: Push \"abcdefghijklmnopqrstuvwxyz\" to the stack"],"vectorises":false},{"name":"Subset?","symbol":"⊆","keywords":["subset?"],"overloads":["**Subset?** (`lst,lst`): Is the shallower list a subset of the deeper list? Checks windows corresponding to the length of the shallower list"],"vectorises":false},{"name":"Second Input","symbol":"¹","keywords":["second-input","input-1"],"overloads":["**Second Input**: Push the second input to the stack"],"vectorises":false},{"name":"Dump","symbol":"⍨","keywords":["dump"],"overloads":["**Dump** (`any`): Push all items of #1 to the stack"],"vectorises":false},{"name":"Exponentiation","symbol":"*","keywords":["exponentiate","pow","**","power"],"overloads":["**Exponentiation** (`num,num`): #1 ** #2"],"vectorises":true},{"name":"Zipped Maximum / Vectorised Maximum / Dyadic Maximum / Generate Sequence","symbol":"Ġ","keywords":["zip-max","max-dyad","max-ab","gen"],"overloads":["**Zipped Maximum** (`lst,lst`): Maximum of corresponding elements of #1 and #2","**Vectorised Maximum** (`lst,scl`): Maximum of #2 and #1","**Vectorised Maximum** (`scl,lst`): Maximum of #1 and #2","**Dyadic Maximum** (`scl,scl`): Maximum of #1 and #2","**Generate Sequence** (`nls,fun`): Call #2 on previous results of #2, starting with #1.","**Generate Sequence** (`fun,nls`): Call #1 on previous results of #1, starting with #2."],"vectorises":true},{"name":"10 to Base / 10 to Base / 10 to Base / 10 to Base / All Regex Matches","symbol":"⊢","keywords":["10-to-base","all-regex-matches"],"overloads":["**10 to Base** (`num,num`): Convert #1 to base #2","**10 to Base** (`num,str\\|lst`): Convert #1 to base len(#2) using the items of #2","**10 to Base** (`lst,num`): Convert each item in #1 to base #2","**10 to Base** (`lst,lst`): Convert each item in #1 to the base of the corresponding item in #2","**All Regex Matches** (`str,str`): All matches of #2 in #1"],"vectorises":false},{"name":"Modulo / String Format","symbol":"%","keywords":["mod","modulo","%","remainder"],"overloads":["**Modulo** (`num,num`): #1 % #2 (remainder of #1 divided by #2)","**String Format** (`str,any`): Format #1 with #2","**String Format** (`any,str`): Format #2 with #1"],"vectorises":true},{"name":"Lengths of Consecutives","symbol":"†","keywords":["lengths-of-consecutives"],"overloads":["**Lengths of Consecutives** (`lst`): Lengths of consecutive runs of equal elements in #1"],"vectorises":false},{"name":"Sine","symbol":"∆s","keywords":["sin","sine"],"overloads":["**Sine** (`num`): Sine of #1"],"vectorises":true},{"name":"Reverse Uppercase and Lowercase","symbol":"kl","keywords":["reverse-uppercase-lowercase"],"overloads":["**Reverse Uppercase and Lowercase**: Push \"ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba\" to the stack"],"vectorises":false},{"name":"Multi-Dimensional Index","symbol":"Þi","keywords":["md-index"],"overloads":["**Multi-Dimensional Index** (`lst,lst[num]`): Index #1 at the multi-dimensional index #2 - #1[#2[0]][#2[1]]...[#2[n]]"],"vectorises":false},{"name":"Context Primary","symbol":"n","keywords":["ctx-primary","ctx","ctx-n","context-n","context-primary"],"overloads":["**Context Primary**: Push the primary context variable to the stack"],"vectorises":false},{"name":"Mirror","symbol":"≓","keywords":["mirror"],"overloads":["**Mirror** (`any`): Mirror #1 (#1 + reverse(#1)), as the original type"],"vectorises":false},{"name":"64","symbol":"④","keywords":["64"],"overloads":["**64**: Push 64 to the stack"],"vectorises":false},{"name":"Arctangent 2","symbol":"∆Ṭ","keywords":["atan2","arctan2","arctangent2"],"overloads":["**Arctangent 2** (`num,num`): atan2(#1, #2)"],"vectorises":true},{"name":"Range 1 Inclusive / Is Character Alphabetical","symbol":"ɾ","keywords":["1->n++","is-alpha?"],"overloads":["**Range 1 Inclusive** (`num`): Range from 1 to #1, inclusive","**Is Character Alphabetical** (`str`): Check if #1 is alphabetical (i.e. is a letter)"],"vectorises":true},{"name":"Line Chars","symbol":"kD","keywords":["line-chars"],"overloads":["**Line Chars**: Push \"|/-_\" to the stack - useful for drawing lines"],"vectorises":false},{"name":"Halve / Two String Halves","symbol":"½","keywords":["half","halve"],"overloads":["**Halve** (`num`): #1 / 2","**Two String Halves** (`str`): Split #1 in half"],"vectorises":true},{"name":"Multiset XOR","symbol":"Þ⊍","keywords":["multiset-xor","mset-xor"],"overloads":["**Multiset XOR** (`lst,lst`): Multiset XOR of #1 and #2"],"vectorises":false},{"name":"Zipped Minimum / Vectorised Minimum / Dyadic Minimum / Generate Sequence","symbol":"ġ","keywords":["zip-min","min-dyad","min-ab","2gen"],"overloads":["**Zipped Minimum** (`lst,lst`): Minimum of corresponding elements of #1 and #2","**Vectorised Minimum** (`lst,scl`): Minimum of #2 and #1","**Vectorised Minimum** (`scl,lst`): Minimum of #1 and #2","**Dyadic Minimum** (`scl,scl`): Minimum of #1 and #2","**Generate Sequence** (`nls,fun`): Call #2 as a dyad infinitely with items of #1 as starting values"],"vectorises":true},{"name":"Negate / Negate / First Non-Negative Integer Where Predicate is True","symbol":"N","keywords":["negate","swapcase","first>-1"],"overloads":["**Negate** (`num`): -#1","**Negate** (`str`): Swap the case of each letter #1","**First Non-Negative Integer Where Predicate is True** (`fun`): First non-negative integer where #1 is true"],"vectorises":true},{"name":"Reciprocal / Without Whitespace","symbol":"⅟","keywords":["reciprocal","inverse","1/","without-whitespace","no-space","spaceless"],"overloads":["**Reciprocal** (`num`): 1 / #1","**Without Whitespace** (`str`): Remove all whitespace from #1"],"vectorises":true},{"name":"Join on Empty String / Is alphanumeric? / First Positive Integer Where Function is Truthy / Is Insignificant?","symbol":"“","keywords":["join-on-empty-string","*empty","is-alphanumeric?","insignificant?","first-positive-integer","first-n>0"],"overloads":["**Join on Empty String** (`lst`): Join #1 on the empty string","**Is alphanumeric?** (`str`): Push 1 if #1 is alphanumeric, 0 otherwise","**First Positive Integer Where Function is Truthy** (`fun`): Push the first positive integer where #1 is truthy","**Is Insignificant?** (`num`): abs(#1) <= 1"],"vectorises":false},{"name":"Over","symbol":"⤻","keywords":["over"],"overloads":["**Over**: Duplicate the item below the top of the stack -> #2 #1 #2"],"vectorises":false},{"name":"Roll","symbol":"↸","keywords":["roll"],"overloads":["**Roll** (`any,any,any`): #1 #2 #3 -> #3 #1 #2"],"vectorises":false},{"name":"Stringify","symbol":"¤","keywords":["stringify","to-str","str"],"overloads":["**Stringify** (`any`): Stringify #1"],"vectorises":false},{"name":"Cube / String Triples","symbol":"³","keywords":["cube","string-triples"],"overloads":["**Cube** (`num`): #1 ** 3","**String Triples** (`str`): Split #1 into triples of characters"],"vectorises":true},{"name":"Lowercase and Uppercase","symbol":"kL","keywords":["lowercase-uppercase"],"overloads":["**Lowercase and Uppercase**: Push \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" to the stack"],"vectorises":false},{"name":"Insert / Insert / Insert","symbol":"⎀","keywords":["insert"],"overloads":["**Insert** (`any,num,any`): Insert #3 into #1 at index #2","**Insert** (`any,lst[num],scl`): Insert #3 into #1 at indices #2","**Insert** (`any,lst[num],lst`): Insert items of #3 into #1 at indices #2"],"vectorises":false},{"name":"Join On / Intersperse / Make Complex Number","symbol":"j","keywords":["join-on"],"overloads":["**Join On** (`lst,scl`): Join #1 on #2","**Join On** (`scl,lst`): Join #2 on #1","**Intersperse** (`lst,lst`): Intersperse elements of #2 within #1 (e.g. [1, [2,3], 4] [5, 6] -> [1, 5, 6, [2, 3], 5, 6, 4])","**Make Complex Number** (`num,num`): Create a complex number from #1 and #2 - #1 + #2i"],"vectorises":false},{"name":"Reshape","symbol":"ÞR","keywords":["reshape"],"overloads":["**Reshape** (`lst,lst[num]`): Reshape #1 to the shape #2"],"vectorises":false},{"name":"Transliterate / Call While","symbol":"y","keywords":["transliterate","call-while"],"overloads":["**Transliterate** (`nsl,nsl,nsl`): Replace all occurrences of #2 in #1 with #3","**Call While** (`fun,fun,any`): While #1(#3) is true, #3 = #2(#3). Return the result. Type switchable."],"vectorises":false},{"name":"Transpose / Triple / Does String Contain Only Alphabetic Characters","symbol":"T","keywords":["transpose","triple","alpha-only?"],"overloads":["**Transpose** (`lst`): Transpose #1. Will not terminate on an infinite list of finite lists. Use ÞT if you need that.","**Triple** (`num`): #1 * 3","**Does String Contain Only Alphabetic Characters** (`str`): Check if #1 contains only alphabetic characters"],"vectorises":false},{"name":"-1","symbol":"⑧","keywords":["-1"],"overloads":["**-1**: Push -1 to the stack"],"vectorises":false},{"name":"Digits, Lowercase, Uppercase","symbol":"kr","keywords":["digits-lowercase-uppercase"],"overloads":["**Digits, Lowercase, Uppercase**: Push \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" to the stack"],"vectorises":false},{"name":"Length Peek","symbol":"Ł","keywords":["length-peek"],"overloads":["**Length Peek** (`any`): Push the length of #1 without popping"],"vectorises":false},{"name":"Retrieve Item at Index from Outer Stack / Retrieve Item at Index from Outer Stack N-Layers Up","symbol":"↳","keywords":["retrieve-from-outer"],"overloads":["**Retrieve Item at Index from Outer Stack** (`num`): Retrieve the item at index #1 from the outer stack, current stack if at top level","**Retrieve Item at Index from Outer Stack N-Layers Up** (`lst[num, num]`): Retrieve the item at index #2 from the stack #1 levels up"],"vectorises":false},{"name":"Hello, World!","symbol":"kH","keywords":["Hello-World"],"overloads":["**Hello, World!**: Push \"Hello, World!\" to the stack"],"vectorises":false},{"name":"Zero Lift","symbol":"Þ⁰","keywords":["zero-lift"],"overloads":["**Zero Lift** (`lst`): Multiply each element of #1 by its 0-based index"],"vectorises":false},{"name":"Equals","symbol":"=","keywords":["equals","==","eq"],"overloads":["**Equals** (`scl,scl`): #1 == #2"],"vectorises":true},{"name":"Hello World!","symbol":"kh","keywords":["helloworld"],"overloads":["**Hello World!**: Push \"Hello World\" to the stack, no punctuation"],"vectorises":false},{"name":"List Repeat / List Repeat / Vectorised Repeat","symbol":"Y","keywords":["list-repeat"],"overloads":["**List Repeat** (`num,num`): A list of #1 repeated #2 times. E.g. 3 4 -> [3, 3, 3, 3]","**List Repeat** (`itr,num`): A list of #2 instances of string #1","**List Repeat** (`num,itr`): A list of #1 instances of string #2","**Vectorised Repeat** (`itr,lst[nsl]`): Repeat each element of #2 (#1|#1.length) times"],"vectorises":false},{"name":"Tail","symbol":"t","keywords":["tail","last"],"overloads":["**Tail** (`any`): Last element of #1"],"vectorises":false},{"name":"Join / Join / Merge / Number Pair / String Concatenation","symbol":"J","keywords":["join","concat"],"overloads":["**Join** (`lst,scl`): Add #2 to the end of #1","**Join** (`scl,lst`): Prepend #1 to #2","**Join / Merge** (`lst,lst`): Add all elements of #2 to #1","**Number Pair** (`num,num`): Create a list of #1 and #2","**String Concatenation** (`str\\|num,str\\|num`): string(#1) + string(#2) (if either #1 or #2 is a string)"],"vectorises":false},{"name":"Base to 10 / Base to 10 / Base to 10 / First Number Greater Than Where Function is True","symbol":"⊣","keywords":["base-to-10","first>n"],"overloads":["**Base to 10** (`scl,num`): Convert #1 from base #2 to base 10, assuming a base that is a prefix of [0-9A-Z] for strings","**Base to 10** (`lst[num\\|str],num`): Convert #1 from base #2 to base 10, using the items of #1 as digits","**Base to 10** (`lst,num`): Convert each item in #1 from base #2 to base 10, assuming a base that is a prefix of [0-9A-Z] for strings","**First Number Greater Than Where Function is True** (`fun,num`): The first number greater than #2 where #1 returns true","**First Number Greater Than Where Function is True** (`num,fun`): The first number greater than #1 where #2 returns true"],"vectorises":false},{"name":"Harmonic Mean","symbol":"∆H","keywords":["harmonic-mean"],"overloads":["**Harmonic Mean** (`lst`): Harmonic mean of #1 (len(#1) / sum(1 / #1))"],"vectorises":false},{"name":"Uninterleave","symbol":"U","keywords":["uninterleave"],"overloads":["**Uninterleave** (`lst`): Uninterleave #1"],"vectorises":false},{"name":"Divides? / Append Spaces / Regex Span","symbol":"≛","keywords":["divides?","append-spaces","regex-span"],"overloads":["**Divides?** (`num,num`): #2 % #1 == 0","**Append Spaces** (`str,num`): Append #2 spaces to #1","**Append Spaces** (`num,str`): Append #1 spaces to #2","**Regex Span** (`str,str`): Span of regex match of pattern #2 in #1"],"vectorises":false},{"name":"Multiset Intersection","symbol":"Þ∩","keywords":["multiset-intersection","mset-isect"],"overloads":["**Multiset Intersection** (`lst,lst`): Multiset intersection of #1 and #2"],"vectorises":false},{"name":"List of Digits / List of Characters / Flatten","symbol":"f","keywords":["flatten"],"overloads":["**List of Digits** (`num`): Push a list of the digits of #1 to the stack","**List of Characters** (`str`): Push a list of the characters of #1 to the stack","**Flatten** (`lst`): Flatten #1"],"vectorises":false},{"name":"Less Than / Decrement Until False","symbol":"<","keywords":["less-than","<","lt","---until-false"],"overloads":["**Less Than** (`scl,scl`): #1 < #2","**Decrement Until False** (`fun,num`): Decrement #2 until #1 is false","**Decrement Until False** (`num,fun`): Decrement #1 until #2 is false"],"vectorises":true},{"name":"Unique / Unique By Function","symbol":"u","keywords":["unique"],"overloads":["**Unique** (`lst`): Unique elements of #1","**Unique By Function** (`lst,fun`): Unique elements of #1 by applying #2"],"vectorises":false},{"name":"E Constant","symbol":"ke","keywords":["e-constant"],"overloads":["**E Constant**: Push 2.718281828459045 to the stack"],"vectorises":false},{"name":"All Equal Item","symbol":"≊","keywords":["all-equal-item"],"overloads":["**All Equal Item** (`lst,any`): Are all elements of #1 equal to #2?"],"vectorises":false},{"name":"Random Choice / Random Integer","symbol":"⚅","keywords":["random-choice","random-element","randint","random"],"overloads":["**Random Choice** (`itr`): Random element of #1","**Random Integer** (`num`): Random integer from 0 to #1"],"vectorises":false},{"name":"Append","symbol":"&","keywords":["append"],"overloads":["**Append** (`any,any`): Append #2 to #1"],"vectorises":false},{"name":"Filter / Find","symbol":"F","keywords":["filter","find","index-of"],"overloads":["**Filter** (`fun,any`): Filter #1 by function #2","**Filter** (`any,fun`): Filter #2 by function #1","**Find** (`nls,nls`): Find the index of #1 in #2. Switches #1 and #2 so that the haystack is the deeper list"],"vectorises":false},{"name":"Hex Digits","symbol":"k6","keywords":["hex-digits"],"overloads":["**Hex Digits**: Push \"0123456789abcdef\" to the stack"],"vectorises":false},{"name":"Get Register","symbol":"¥","keywords":["get-register"],"overloads":["**Get Register**: Push the register to the stack"],"vectorises":false},{"name":"Factorial / Titlecase","symbol":"!","keywords":["factorial","!","titlecase","fact","title","fac"],"overloads":["**Factorial** (`num`): Factorial of #1","**Titlecase** (`str`): Titlecase #1"],"vectorises":true},{"name":"Union","symbol":"∪","keywords":["union","set-union"],"overloads":["**Union** (`lst,lst`): Union of #1 and #2"],"vectorises":false},{"name":"Inclusive Range / Sort By / Regex Split Keep Delimiters","symbol":"↯","keywords":["inclusive-range","sort-by","regex-split-keep-delimiters"],"overloads":["**Inclusive Range** (`num,num`): Inclusive range from #1 to #2","**Sort By** (`nsl,fun`): Sort list #1 (range if num) by function #2","**Sort By** (`fun,nsl`): Sort list #2 (range if num) by function #1","**Regex Split Keep Delimiters** (`str,str`): Split #1 by regex #2, keeping the delimiters"],"vectorises":true},{"name":"Peek Print","symbol":"⎙","keywords":["peek-print"],"overloads":["**Peek Print** (`any`): Print #1 without popping"],"vectorises":false},{"name":"Permutations / Map Over Permutations","symbol":"⧖","keywords":["permutations","map-over-permutations"],"overloads":["**Permutations** (`any`): All permutations of #1","**Map Over Permutations** (`any,fun`): Map #2 over all permutations of #1"],"vectorises":false},{"name":"All","symbol":"A","keywords":["all","all?","vowel?","is-vowel","is-vowel?"],"overloads":["**All** (`any`): Are all elements of #1 are truthy"],"vectorises":false},{"name":"Parity / Last String Half","symbol":"⍢","keywords":["parity","bit","last-half"],"overloads":["**Parity** (`num`): Parity of #1 (1 if odd, 0 if even) --> #1 % 2","**Last String Half** (`str`): Last half of #1"],"vectorises":true},{"name":"Any / Is Uppercase / Any","symbol":"a","keywords":["any","any?","uppercase?"],"overloads":["**Any** (`num`): Are any digits of #1 truthy","**Is Uppercase** (`str`): Check if #1 is uppercase. With string.len > 1, vectorises over each character","**Any** (`lst`): Are any elements of #1 truthy"],"vectorises":false},{"name":"Subtract 2 / Flip Bracket Palindrome","symbol":"⨪","keywords":["-2","subtract-2","----","dec-dec","flip-bracket-palindrome"],"overloads":["**Subtract 2** (`num`): #1 - 2","**Flip Bracket Palindrome** (`str`): Palindromise #1 by appending the reverse with brackets and slashes flipped"],"vectorises":true},{"name":"Dot Product / Bijective Base Conversion / First Index Where Predicate True","symbol":"•","keywords":["dot-product","bijective-base","first-predicate-index"],"overloads":["**Dot Product** (`lst,lst`): Dot product of #1 and #2","**Bijective Base Conversion** (`num,num`):  Convert #1 to bijective base #2","**First Index Where Predicate True** (`nsl,fun`): Index of the first value in #1 where function #2 is true","**First Index Where Predicate True** (`fun,nsl`): Index of the first value in #2 where function #1 is true"],"vectorises":false},{"name":"Hyperbolic Cosine","symbol":"∆C","keywords":["cosh","hyperbolic-cosine"],"overloads":["**Hyperbolic Cosine** (`num`): Hyperbolic cosine of #1"],"vectorises":true},{"name":"Hyperbolic Sine","symbol":"∆S","keywords":["sinh","hyperbolic-sine"],"overloads":["**Hyperbolic Sine** (`num`): Hyperbolic sine of #1"],"vectorises":true},{"name":"Is Prime / Quine Cheese","symbol":"℗","keywords":["is-prime","prime?","quine-cheese"],"overloads":["**Is Prime** (`num`): Is #1 a prime number?","**Quine Cheese** (`str`): Quotify #1 and prepend it to #1. (Useful for quines like `\"⌭\"⌭`)"],"vectorises":true},{"name":"Deltas","symbol":"δ","keywords":["deltas","differences"],"overloads":["**Deltas** (`lst`): Deltas/forward differences of #1 - [a - b, b - c, c - d, ...]"],"vectorises":false},{"name":"Rotate Stack Left","symbol":"↜","keywords":["rotate-stack-left"],"overloads":["**Rotate Stack Left**: Rotate the stack left"],"vectorises":false},{"name":"Max Peek","symbol":"Ɠ","keywords":["max-peek"],"overloads":["**Max Peek** (`lst`): Maximum of #1 without popping"],"vectorises":false},{"name":"Not Equal","symbol":"≠","keywords":["not-equal","neq","!=","=n't","eqn't","equaln't"],"overloads":["**Not Equal** (`scl,scl`): str(#1) != str(#2)"],"vectorises":true},{"name":"Context Secondary","symbol":"m","keywords":["ctx-secondary","ctx2","ctx-m","context-m","context-secondary"],"overloads":["**Context Secondary**: Push the secondary context variable to the stack"],"vectorises":false},{"name":"Cartesian Power / Regex Index / Self-Cartesian Power","symbol":"⊠","keywords":["cartesian-power","regex-index"],"overloads":["**Cartesian Power** (`any,num`): Cartesian power of #1 to the power of #2","**Cartesian Power** (`num,any`): Cartesian power of #2 to the power of #1","**Regex Index** (`str,str`): Return first index of pattern match #2 in target string #1, -1 if not found","**Self-Cartesian Power** (`itr,any`): Push #1, and then push the cartesian product of #2 with itself"],"vectorises":false},{"name":"Map / Mold / Multiplicity / Regex Match","symbol":"M","keywords":["map","mold","multiplicity","regex-match"],"overloads":["**Map** (`fun,any`): Map function #1 over #2","**Map** (`any,fun`): Map function #2 over #1","**Mold** (`lst,lst`): Reshape #1 to the shape of #2","**Multiplicity** (`num,num`): How many times #1 divides #2","**Regex Match** (`str,str`): Return the first match of #2 in #1"],"vectorises":true},{"name":"Sublists","symbol":"◲","keywords":["sublists"],"overloads":["**Sublists** (`any`): All sublists of #1"],"vectorises":false},{"name":"Surround","symbol":"ø◲","keywords":["surround"],"overloads":["**Surround** (`any,any`): #1 prepended and appended to #2"],"vectorises":false},{"name":"Every Nth AddElement / Matrix Multiply / Regex Full Match?","symbol":"ℳ","keywords":["modular","matrix-multiply","regex-full-match?"],"overloads":["**Every Nth AddElement** (`itr,num`): Every #2th element of #1","**Every Nth AddElement** (`num,itr`): Every #1th element of #2","**Matrix Multiply** (`lst,lst`): Matrix multiply #1 and #2","**Regex Full Match?** (`str,str`): Does pattern #2 fully match #1"],"vectorises":false},{"name":"Octal Digits","symbol":"ko","keywords":["octal-digits"],"overloads":["**Octal Digits**: Push \"01234567\" to the stack"],"vectorises":false},{"name":"Ceiling / Split on Spaces","symbol":"⌈","keywords":["ceil","ceiling","split-on-spaces"],"overloads":["**Ceiling** (`num`): Ceiling of #1","**Split on Spaces** (`str`): Split #1 by spaces"],"vectorises":true},{"name":"Arccosine","symbol":"∆ℭ","keywords":["arccos","arccosine"],"overloads":["**Arccosine** (`num`): Arccosine of #1"],"vectorises":true},{"name":"Length of Stack","symbol":"`","keywords":["len-stack"],"overloads":["**Length of Stack**: Push the length of the stack to the stack"],"vectorises":false},{"name":"Reverse Uppercase","symbol":"kZ","keywords":["reverse-uppercase"],"overloads":["**Reverse Uppercase**: Push \"ZYXWVUTSRQPONMLKJIHGFEDCBA\" to the stack"],"vectorises":false},{"name":"Group by Consecutive / Group Consecutive by Function","symbol":"※","keywords":["group-by-consecutive"],"overloads":["**Group by Consecutive** (`lst`): Group consecutive equal elements of #1","**Group Consecutive by Function** (`lst,fun`): Group elements of #1 by function #2"],"vectorises":false},{"name":"Cosine","symbol":"∆c","keywords":["cos","cosine"],"overloads":["**Cosine** (`num`): Cosine of #1"],"vectorises":true},{"name":"100","symbol":"⑤","keywords":["100"],"overloads":["**100**: Push 100 to the stack"],"vectorises":false},{"name":"Tangent","symbol":"∆t","keywords":["tan","tangent"],"overloads":["**Tangent** (`num`): Tangent of #1"],"vectorises":true},{"name":"Flatten by Depth / Flatten by Depth","symbol":"⎘","keywords":["flatten-by-depth","flatten-depth"],"overloads":["**Flatten by Depth** (`lst,num`): Flatten #1 by #2 levels","**Flatten by Depth** (`lst`): Flatten #1 by 1 level"],"vectorises":false},{"name":"Integers Partitions / List Partitions","symbol":"⌹","keywords":["list-partitions","integer-partitions"],"overloads":["**Integers Partitions** (`num`): All possible ways to sum positive integers to #1","**List Partitions** (`itr`): All possible ways to partition #1 into sublists"],"vectorises":false},{"name":"All Prime Exponents","symbol":"∆æ","keywords":["all-prime-exponents","all-prime-exps"],"overloads":["**All Prime Exponents** (`num`): For all primes less than or equal to #1, push the power of that prime in the factorisation of #1"],"vectorises":true},{"name":"Nth AddElement / Vectorised Index / String Enclose / Object Member Retrieval / Collect Unique Values (+ Initial Value)","symbol":"i","keywords":["index","at","item-at","nth-item","collect-unique","enclose","<**"],"overloads":["**Nth AddElement** (`itr,num`): Get the #2th element of #1","**Nth AddElement** (`num,itr`): Get the #1th element of #2","**Vectorised Index** (`itr,lst[num]`): [#1[_] for _ in #2]","**String Enclose** (`str,str`): enclose #2 in #1 (#1[0:len(#1)//2] + #2 + #1[len(#1)//2:])","**Object Member Retrieval** (`obj,str`): #1.#2","**Object Member Retrieval** (`str,obj`): #2.#1","**Collect Unique Values (+ Initial Value)** (`any,fun`): Apply #2 on #1 and collect unique values. Does include the initial value."],"vectorises":false},{"name":"Least Common Multiple / Least Common Multiple of List / Least Common Multiple","symbol":"∆L","keywords":["least-common-multiple"],"overloads":["**Least Common Multiple** (`num,num`): Least common multiple of #1 and #2","**Least Common Multiple of List** (`lst`): Least common multiple of all elements of #1","**Least Common Multiple** (`lst,num`): Least common multiple of #1.append(#2)"],"vectorises":true},{"name":"Argument","symbol":"∆<","keywords":["arg","phase","angle"],"overloads":["**Argument** (`num`): The angle (argument) between the positive real axis and the line joining the origin to #1 in the complex plane."],"vectorises":true},{"name":"List Assign / Augmented List Assignment / Vectorised Augmented List Assignment / Zipped Assignment / Regex String Replacement / Regex Substitution / Object Member Assignment","symbol":"≜","keywords":["assign","**>"],"overloads":["**List Assign** (`any,num,nsl`): #1[#2] = #3","**Augmented List Assignment** (`any,num,fun`): #1[#2] = #3(#1[#2])","**Vectorised Augmented List Assignment** (`lst,lst[num],fun`): #1[_] = #3(#1[_]) for _ in #2","**Zipped Assignment** (`lst,lst,lst`): #1[ind] = val for ind, val in zip(#2, #3)","**Regex String Replacement** (`str,str,str`): Replace all occurrences of #2 in #1 with #3","**Regex Substitution** (`str,str,fun`): Replace all occurrences of #2 in #1 with the result of #3","**Object Member Assignment** (`obj,str,any`): #1.#2 = #3"],"vectorises":false},{"name":"Interleave / Reject","symbol":"I","keywords":["interleave","reject"],"overloads":["**Interleave** (`any,any`): Interleave #1 and #2","**Reject** (`any,fun`): Remove elements of #1 that satisfy function #2","**Reject** (`fun,any`): Remove elements of #2 that satisfy function #1"],"vectorises":false},{"name":"Pi Constant","symbol":"ki","keywords":["pi-constant"],"overloads":["**Pi Constant**: Push 3.141592653589793 to the stack"],"vectorises":false},{"name":"Arctangent","symbol":"∆ʈ","keywords":["arctan","arctangent"],"overloads":["**Arctangent** (`num`): Arctangent of #1"],"vectorises":true},{"name":"Grid Neighbours Diagonals Wrap / Grid Neighbours Diagonals Wrap With Starting Direction","symbol":"Þ¤","keywords":["grid-neighbours-diagonals-wrap","grid-neighbors-diagonals-wrap","adjacent-cells-diagonals-wrap","adj-cells-diagonals-wrap","surrounding-cells-diagonals-wrap","eight-cells-wrap"],"overloads":["**Grid Neighbours Diagonals Wrap** (`lst`): Grid neighbours of #1 - up, down, left, right, and diagonals - wrapping around","**Grid Neighbours Diagonals Wrap With Starting Direction** (`lst,num`): Grid neighbours of cells in #1 - right, down, left, up, and diagonals - wrapping around and start from direction #2 => 0: right, 1: down, 2: left, 3: up. Negative #2 does not include middle, positive #2 does"],"vectorises":false},{"name":"Empty string","symbol":"⑨","keywords":["empty-string"],"overloads":["**Empty string**: Push \"\" to the stack"],"vectorises":false},{"name":"Principal Root of Unity","symbol":"∆⧢","keywords":["root-of-unity"],"overloads":["**Principal Root of Unity** (`num`): Principal #1-th root of unity (e^(2i * pi / #1))"],"vectorises":true},{"name":"Letter to Number / Number to Letter","symbol":"øA","keywords":["letter-to-number","number-to-letter","letter-number-swap","number-letter-swap","a1-swap"],"overloads":["**Letter to Number** (`str`): the index of #1 in the alphabet (one-indexed)","**Number to Letter** (`num`): the letter at index #1 in the alphabet (one-indexed)"],"vectorises":true},{"name":"Absolute Difference / Levenstein Distance / Reduce Overlapping Pairs","symbol":"@","keywords":["absolute-difference","abs-diff","levenstein","to-overpairs"],"overloads":["**Absolute Difference** (`num,num`): Absolute difference between #1 and #2","**Levenstein Distance** (`str,str`): Levenstein distance between #1 and #2","**Reduce Overlapping Pairs** (`lst,fun`): Reduce overlapping pairs in {#1|#2} by function {#2|#1}"],"vectorises":true},{"name":"Mask","symbol":"▲","keywords":["mask"],"overloads":["**Mask** (`any,any`): Keep elements of #1 where the corresponding element of #2 is truthy"],"vectorises":false},{"name":"Truthy?","symbol":"⍰","keywords":["truthy?"],"overloads":["**Truthy?** (`scl`): Is #1 truthy? (Not 0, empty, or false)"],"vectorises":true},{"name":"1 Slice","symbol":"⌽","keywords":["1-slice","tail-take","1-take"],"overloads":["**1 Slice** (`itr,num`): First #2 elements of #1[1:]","**1 Slice** (`num,itr`): First #1 elements of #2[1:]"],"vectorises":false},{"name":"Subtraction / Prepend/Append Hyphens / Regex Remove","symbol":"-","keywords":["subtract","-","minus","subtraction","regex-remove"],"overloads":["**Subtraction** (`num,num`): #1 - #2","**Prepend/Append Hyphens** (`str,num`): #1 + #2 * '-'","**Prepend/Append Hyphens** (`num,str`): '-' * #1 + #2","**Regex Remove** (`str,str`): Remove matches of #2 from #1"],"vectorises":true},{"name":"Fizzbuzz Constant","symbol":"kF","keywords":["fizzbuzz-constant","maybe-if-I-make-the-literate-mode-keyword-long-enough-people-will-stop-complaining-that-there-is-a-fizzbuzz-constant-because-they-will-be-too-busy-reading-the-keyword-to-write-an-angry-comment-or-to-go-to-TNB-or-whatever-chatroom-they-would-go-to-and-write-a-message-saying-how-they-disapprove-of-my-idea-to-have-a-fizzbuzz-constant","of-course-that-probably-would-not-stop-anyone-because-the-kind-of-people-who-would-disagree-with-a-fizzbuzz-constant-are-the-kind-to-not-be-fooled-by-really-and-extremely-long-literate-mode-keywords-because-lets-face-it-who-is-going-to-use-these-mega-long-meta-and-self-aware-literate-mode-keywords-outside-of-maybe-fizzbuzz-but-even-then-people-will-say-but-thats-still-a-fizzbuzz-constant-just-because-it-has-a-long-name-doesnt-mean-it-is-not-one-even-though-such-comments-and-sayings-miss-the-point-of-being-enticed-by-the-craftsmanship-of-this-keyword-and-the-other-one-that-I-wrote-a-bit-earlier-and-by-a-bit-earlier-I-mean-literally-one-line-above-because-it-is-in-the-same-Seq-as-the-other-keyword","they-might-even-say-well-if-you-dont-want-people-complaining-about-your-fizzbuzz-constant-then-dont-include-one-in-the-first-place-but-to-them-I-say-two-things-firstly-that-even-though-it-may-be-super-optimised-for-one-family-of-challenges-the-technical-brilliance-so-to-speak-of-the-fizzbuzz-being-as-short-as-it-is-shouldnt-be-undermined-just-because-theres-two-characters-you-find-so-anti-code-golf-and-second-of-all-why-are-you-even-commenting-on-a-joke-in-a-very-obscure-place-like-come-on-this-isnt-even-in-an-answer-well-I-hope-it-isnt-but-like-this-is-the-vyxal-documentation-stop-complaining-and-continuing-doing-whatever-it-is-youre-doing"],"overloads":["**Fizzbuzz Constant**: Push \"FizzBuzz\" to the stack"],"vectorises":false},{"name":"All Primes","symbol":"kæ","keywords":["all-primes","primes"],"overloads":["**All Primes**: Push a list of every prime number to the stack"],"vectorises":false},{"name":"Integers","symbol":"kṬ","keywords":["ZZ","integers"],"overloads":["**Integers**: Push a list of every integer to the stack"],"vectorises":false},{"name":"Trim","symbol":"⎶","keywords":["trim"],"overloads":["**Trim** (`any,any`): Trim #1 of leading and trailing #2"],"vectorises":false},{"name":"Print","symbol":",","keywords":["println","stdout","output","out"],"overloads":["**Print** (`any`): Print #1 to stdout, followed by a newline"],"vectorises":false},{"name":"Asterisk","symbol":"★","keywords":["asterisk"],"overloads":["**Asterisk**: Push an asterisk to the stack"],"vectorises":false},{"name":"Join on Spaces / Is negative?","symbol":"„","keywords":["join-on-spaces","*space","<0","is-negative?"],"overloads":["**Join on Spaces** (`lst`): Join #1 on spaces","**Is negative?** (`num`): Push 1 if #1 < 0, 0 otherwise"],"vectorises":false},{"name":"Pair","symbol":";","keywords":["pair","cons"],"overloads":["**Pair** (`any,any`): Push a list [#1, #2] to the stack: #1 #2 -> [#1, #2]"],"vectorises":false},{"name":"Overlapping Pairs / Reduce Overlapping Pairs","symbol":"v","keywords":["overlapping-pairs","reduce-pairs-by"],"overloads":["**Overlapping Pairs** (`lst`): Get overlapping pairs of #1","**Reduce Overlapping Pairs** (`lst,fun`): Reduce overlapping pairs in #1 by function #2"],"vectorises":false},{"name":"Range 0 Inclusive / Uppercase","symbol":"ʁ","keywords":["0->n++","uppercase","range-0->n++","n+range-0"],"overloads":["**Range 0 Inclusive** (`num`): Range from 0 to #1, inclusive","**Uppercase** (`str`): Uppercase #1"],"vectorises":true},{"name":"Monadic Maximum","symbol":"G","keywords":["max-of","maximum-of"],"overloads":["**Monadic Maximum** (`lst`): Maximum of #1"],"vectorises":false},{"name":"Powerset / Vectorise","symbol":"⏚","keywords":["powerset","vectorise"],"overloads":["**Powerset** (`nsl`): Powerset of #1","**Vectorise** (`fun`): Apply #1 as if it were a pervasive element"],"vectorises":false},{"name":"Cycle / List-Repeat Infinitely","symbol":"Þ↻","keywords":["cycle"],"overloads":["**Cycle** (`lst`): Cycle #1 - Append all items of #1 to itself infinite times","**List-Repeat Infinitely** (`num\\|str`): Repeat #1 infinitely - [#1, #1, #1, ...]"],"vectorises":false},{"name":"Intersection","symbol":"∩","keywords":["intersection","set-intersection"],"overloads":["**Intersection** (`lst,lst`): Intersection of #1 and #2"],"vectorises":false},{"name":"Multiset Difference","symbol":"Þ⦰","keywords":["multiset-difference","mset-diff"],"overloads":["**Multiset Difference** (`lst,lst`): Multiset difference of #1 and #2"],"vectorises":false},{"name":"Vectorise Reverse / 1 - X","symbol":"V","keywords":["vectorse-reverse","1-x"],"overloads":["**Vectorise Reverse** (`lst`): Reverse each item in #1","**1 - X** (`num`): 1 - #1"],"vectorises":false},{"name":"Heads","symbol":"ḧ","keywords":["heads","head-each"],"overloads":["**Heads** (`lst`): First element of each element in #1"],"vectorises":false},{"name":"Right Shift / Append Spaces to Given Length / Append Spaces to Length of Second String","symbol":"»","keywords":["right-shift",">>"],"overloads":["**Right Shift** (`num,num`): #1 >> #2","**Append Spaces to Given Length** (`str,num`): Append spaces to string #1 until it is #2 characters long","**Append Spaces to Given Length** (`num,str`): Append spaces to string #2 until it is #1 characters long","**Append Spaces to Length of Second String** (`str,str`): Append spaces to string #1 until it is the length of #2"],"vectorises":true},{"name":"Quotify","symbol":"q","keywords":["quotify"],"overloads":["**Quotify** (`any`): Cast #1 to a string and wrap in quotes"],"vectorises":false},{"name":"10","symbol":"①","keywords":["10"],"overloads":["**10**: Push 10 to the stack"],"vectorises":false},{"name":"Floor / String to Number","symbol":"⌊","keywords":["floor","str-to-num"],"overloads":["**Floor** (`num`): Floor of #1","**String to Number** (`str`): Convert #1 to a number, ignoring non-digit characters. Returns 0 if no digits are found"],"vectorises":true},{"name":"Remove At / Regex Groups","symbol":"Q","keywords":["remove-at","regex-groups"],"overloads":["**Remove At** (`nsl,num`): Remove the element at index #2 from #1","**Regex Groups** (`str,str`): Return the groups of the first match of #2 in #1"],"vectorises":false},{"name":"Bifurcate / Call Function Without Popping","symbol":"æ","keywords":["bifuricate","bifur","bif","furry","uwu","dup-rev","dup-reverse","owo","peek-function","peek-call","@@"],"overloads":["**Bifurcate** (`any`): Duplicate #1 and reverse the duplicate","**Call Function Without Popping** (`fun`): Call #1 without popping its arguments"],"vectorises":false},{"name":"Length","symbol":"L","keywords":["length","len"],"overloads":["**Length** (`any`): Length of #1"],"vectorises":false},{"name":"Binary Digits / From Binary / From Binary","symbol":"b","keywords":["from-binary"],"overloads":["**Binary Digits** (`num`): Convert #1's list of digits from binary to base 10","**From Binary** (`str`): Convert #1 from binary to a number","**From Binary** (`lst`): Convert #1 from binary to a number"],"vectorises":false},{"name":"Polar Parts","symbol":"∆⎀","keywords":["polar-parts"],"overloads":["**Polar Parts** (`num`): Push the magnitude and argument of #1"],"vectorises":true},{"name":"Rotate Stack Right","symbol":"↝","keywords":["rotate-stack-right"],"overloads":["**Rotate Stack Right**: Rotate the stack right"],"vectorises":false},{"name":"Monadic Minimum","symbol":"g","keywords":["min-of","minimum-of"],"overloads":["**Monadic Minimum** (`lst`): Minimum of #1"],"vectorises":false},{"name":"To Binary / String to Binary","symbol":"B","keywords":["to-binary"],"overloads":["**To Binary** (`num`): Convert #1 to binary","**String to Binary** (`str`): Convert each character in #1 to a binary representation of its unicode value"],"vectorises":true},{"name":"Logarithm / Scan Fixpoint / Same Length / String Length Equals","symbol":"l","keywords":["log","logarithm","scan-fixpoint","scan-fix","same-length?","same-length","length-equals?","length-equals","len-eq?"],"overloads":["**Logarithm** (`num,num`): Log base #2 of #1","**Scan Fixpoint** (`fun,any`): Repeatedly apply #1 to #2 until it doesn't change. Do include the initial value.","**Scan Fixpoint** (`any,fun`): Repeatedly apply #1 to #2 until it doesn't change. Do include the initial value.","**Same Length** (`str,str`): Are #1 and #2 the same length","**String Length Equals** (`str,num`): Is the length of #1 equal to #2","**String Length Equals** (`num,str`): Is the length of #2 equal to #1"],"vectorises":true},{"name":"Prime Exponents","symbol":"∆q","keywords":["prime-exponents"],"overloads":["**Prime Exponents** (`num`): push a list of the power of each prime in the prime factors of #1"],"vectorises":true},{"name":"Vectorised Sums","symbol":"Ͼ","keywords":["vectorised-sums","v/+"],"overloads":["**Vectorised Sums** (`lst`): Sum of each item in #1. Functionally equivalent to `¨Σ`"],"vectorises":true},{"name":"Imaginary Part","symbol":"∆I","keywords":["imaginary-part"],"overloads":["**Imaginary Part** (`num`): Imaginary part of #1"],"vectorises":true},{"name":"Combinations without Replacement / Combinations of Range without Replacement","symbol":"℈","keywords":["combinations-without-replacement"],"overloads":["**Combinations without Replacement** (`itr,num`): All combinations of #1 of length #2 without replacement","**Combinations without Replacement** (`num,itr`): All combinations of #2 of length #1 without replacement","**Combinations of Range without Replacement** (`num,num`): All combinations of range(#1) of length #2 without replacement"],"vectorises":false},{"name":"All Same","symbol":"≈","keywords":["all-same"],"overloads":["**All Same** (`any`): Are all elements of #1 the same?"],"vectorises":false},{"name":"Zero Pad / Zero Pad","symbol":"Þ0","keywords":["zero-pad"],"overloads":["**Zero Pad** (`itr,num`): #1 zero-padded to length #2","**Zero Pad** (`num,itr`): #2 zero-padded to length #1","**Zero Pad** (`itr,itr`): #1 zero-padded to length of #2"],"vectorises":false},{"name":"Min Peek","symbol":"ɠ","keywords":["min-peek"],"overloads":["**Min Peek** (`lst`): Minimum of #1 without popping"],"vectorises":false},{"name":"Range to Length","symbol":"ƶ","keywords":["range-to-length"],"overloads":["**Range to Length** (`lst`): Range from 0 to len(#1) - 1"],"vectorises":false},{"name":"Integer Divide","symbol":"∻","keywords":["integer-divide","int-div","//"],"overloads":["**Integer Divide** (`num,num`): #1 // #2"],"vectorises":true},{"name":"Prefixes","symbol":"P","keywords":["prefixes"],"overloads":["**Prefixes** (`lst`): Get all prefixes of #1. Treats numbers as a list of digits"],"vectorises":false},{"name":"Truthy Indexes","symbol":"Ṭ","keywords":["truthy-indexes"],"overloads":["**Truthy Indexes** (`lst`): Indexes of truthy elements in #1"],"vectorises":false},{"name":"Quit","symbol":"#Q","keywords":["quit"],"overloads":["**Quit**: Quit the program"],"vectorises":false},{"name":"Less Than or Equal","symbol":"≤","keywords":["less-than-or-equal","lte","<="],"overloads":["**Less Than or Equal** (`scl,scl`): #1 <= #2"],"vectorises":true},{"name":"Tail Peek","symbol":"ʈ","keywords":["tail-peek"],"overloads":["**Tail Peek** (`lst`): Last element of #1 without popping"],"vectorises":false},{"name":"Prepend","symbol":"p","keywords":["prepend"],"overloads":["**Prepend** (`any,any`): Prepend #2 to #1"],"vectorises":false},{"name":"Radians to Degrees","symbol":"∆d","keywords":["rad2deg","rad-to-deg"],"overloads":["**Radians to Degrees** (`num`): Convert #1 from radians to degrees"],"vectorises":true},{"name":"Partition After Truthy / Group By","symbol":"☷","keywords":["partition-after-truthy","group-by"],"overloads":["**Partition After Truthy** (`lst,lst`):  Partition #1 after truthy indices of #2.","**Group By** (`lst,fun`): Group elements of #1 by function #2"],"vectorises":false},{"name":"128","symbol":"⑥","keywords":["128"],"overloads":["**128**: Push 128 to the stack"],"vectorises":false},{"name":"Natural Numbers","symbol":"kN","keywords":["NN","natural-numbers"],"overloads":["**Natural Numbers**: Push a list of every natural number to the stack"],"vectorises":false},{"name":"Real Part","symbol":"∆R","keywords":["real-part"],"overloads":["**Real Part** (`num`): Real part of #1"],"vectorises":true},{"name":"Set Difference","symbol":"⦰","keywords":["set-difference","set-diff"],"overloads":["**Set Difference** (`lst,lst`): Set difference of #1 and #2"],"vectorises":false},{"name":"Input","symbol":"?","keywords":["stdin","input","in"],"overloads":["**Input**: Get the next input item, evaluated."],"vectorises":false},{"name":"Range 0 / Lowercase","symbol":"ʀ","keywords":["0->n","lowercase","range-0->n","nrange-0"],"overloads":["**Range 0** (`num`): Range from 0 to #1, exclusive","**Lowercase** (`str`): Lowercase #1"],"vectorises":true},{"name":"Pop","symbol":"_","keywords":["pop","discard"],"overloads":["**Pop**: Pop the top of the stack"],"vectorises":false},{"name":"GCD / GCD of List / GCD of List with Initial Value","symbol":"κ","keywords":["gcd"],"overloads":["**GCD** (`num,num`): GCD of #1 and #2","**GCD of List** (`lst`): GCD of all elements of #1","**GCD of List with Initial Value** (`lst,num`): GCD of all elements of #1.append(#2)"],"vectorises":true},{"name":"Count / Count","symbol":"C","keywords":["count"],"overloads":["**Count** (`lst,scl`): Count occurrences of #2 in #1","**Count** (`scl,lst`): Count occurrences of #1 in #2","**Count** (`lst,lst`): Count occurrences of the list with shallower depth in the list with deeper depth"],"vectorises":false},{"name":"Edges / Real and Imaginary","symbol":"✇","keywords":["edges","ends","real-imaginary"],"overloads":["**Edges** (`itr`): First and last element of #1","**Real and Imaginary** (`num`): Real and imaginary parts of #1"],"vectorises":false},{"name":"Arcsine","symbol":"∆⟆","keywords":["arcsin","arcsine"],"overloads":["**Arcsine** (`num`): Arcsine of #1"],"vectorises":true},{"name":"Set XOR","symbol":"⊍","keywords":["set-xor"],"overloads":["**Set XOR** (`lst,lst`): Set XOR of #1 and #2"],"vectorises":false},{"name":"Transpose Safe","symbol":"ÞT","keywords":["transpose-safe"],"overloads":["**Transpose Safe** (`lst`): Transpose #1, does not hang on an infinite list of finite lists"],"vectorises":false},{"name":"16","symbol":"②","keywords":["16"],"overloads":["**16**: Push 16 to the stack"],"vectorises":false},{"name":"Reverse","symbol":"⇄","keywords":["reverse"],"overloads":["**Reverse** (`any`): Reverse #1"],"vectorises":false},{"name":"Head on Top, Rest on Bottom","symbol":"ᑂ","keywords":["headless-top"],"overloads":["**Head on Top, Rest on Bottom** (`any`): Push #1[1:] and #1[0]"],"vectorises":false},{"name":"Signum","symbol":"±","keywords":["signum"],"overloads":["**Signum** (`num`): Sign of #1"],"vectorises":true},{"name":"Newline","symbol":"¶","keywords":["newline"],"overloads":["**Newline**: Push a newline to the stack"],"vectorises":false},{"name":"Grade Up","symbol":"⇧","keywords":["grade-up"],"overloads":["**Grade Up** (`lst`): Indices that would sort #1"],"vectorises":false},{"name":"Digits","symbol":"kb","keywords":["digits"],"overloads":["**Digits**: Push \"0123456789\" to the stack"],"vectorises":false},{"name":"10 to the Power of / Execute / Call Function","symbol":"ᴥ","keywords":["exec","10**","call","@"],"overloads":["**10 to the Power of** (`num`): 10 ** #1","**Execute** (`str`): Execute #1 as Vyxal code","**Call Function** (`fun`): Call function #1"],"vectorises":true},{"name":"One Lift","symbol":"Þ¹","keywords":["one-lift"],"overloads":["**One Lift** (`lst`): Multiply each element of #1 by its 1-based index"],"vectorises":false},{"name":"To Hex / From Hex","symbol":"H","keywords":["to-hex","from-hex"],"overloads":["**To Hex** (`num`): Convert #1 to hexadecimal","**From Hex** (`str`): Convert #1 from hexadecimal to a number. Inverse of 'to-hex'"],"vectorises":true},{"name":"1000","symbol":"k1","keywords":["1000"],"overloads":["**1000**: Push 1000 to the stack"],"vectorises":false},{"name":"Addition / String and Number Concatenation / String Concatenation","symbol":"+","keywords":["add","+","plus","addition"],"overloads":["**Addition** (`num,num`): #1 + #2","**String and Number Concatenation** (`str,num`): #1 + str(#2)","**String and Number Concatenation** (`num,str`): str(#1) + #2","**String Concatenation** (`str,str`): #1 + #2"],"vectorises":true},{"name":"Grade Down","symbol":"⇩","keywords":["grade-down"],"overloads":["**Grade Down** (`lst`): Indices that would sort #1 in reverse"],"vectorises":false},{"name":"Contains / Contains / Contains","symbol":"c","keywords":["contains","contains?","is-in"],"overloads":["**Contains** (`scl,scl`): Is #2 in #1","**Contains** (`lst,scl`): Is #2 in #1","**Contains** (`scl,lst`): Is #1 in #2","**Contains** (`lst,lst`): Is the list with shallower depth in the list with deeper depth"],"vectorises":false},{"name":"Wrap","symbol":"W","keywords":["wrap"],"overloads":["**Wrap**: Wrap the entire stack into a list"],"vectorises":false},{"name":"Cartesian Product Unsafe","symbol":"ÞX","keywords":["cartesian-product-unsafe","cartesian-unsafe","cart-prod-unsafe","cart-unsafe"],"overloads":["**Cartesian Product Unsafe** (`lst,lst`): Cartesian product of #1 and #2 in the standard order, but without accounting for infinite lists"],"vectorises":false},{"name":"Head","symbol":"h","keywords":["head","first"],"overloads":["**Head** (`any`): First element of #1"],"vectorises":false},{"name":"Input Count","symbol":"#¿","keywords":["input-count"],"overloads":["**Input Count**: Push the number of inputs to the stack"],"vectorises":false},{"name":"Join on Newlines / Push Context Variable N if 1","symbol":"”","keywords":["join-on-newlines","*newline","one?->n"],"overloads":["**Join on Newlines** (`lst`): Join #1 on newlines","**Push Context Variable N if 1** (`num`): Push the context variable N if #1 is 1"],"vectorises":false},{"name":"Cumulative Sums","symbol":"σ","keywords":["cumulative-sums","cumsums","cumsum","cum-sum","-_-"],"overloads":["**Cumulative Sums** (`lst`): Cumulative sums of #1"],"vectorises":false},{"name":"Vectorised Lengths","symbol":"Ŀ","keywords":["vlen","lengths"],"overloads":["**Vectorised Lengths** (`lst`): Length of each element in #1"],"vectorises":false},{"name":"Degrees to Radians","symbol":"∆r","keywords":["deg2rad","deg-to-rad"],"overloads":["**Degrees to Radians** (`num`): Convert #1 from degrees to radians"],"vectorises":true},{"name":"Replace / Zip-With","symbol":"r","keywords":["replace"],"overloads":["**Replace** (`nsl,nsl,nsl`): Replace all occurrences of #2 in #1 with #3","**Zip-With** (`lst,lst,fun`): Zip #1 and #2 and apply #3 to each pair","**Zip-With** (`lst,fun,lst`): Zip #1 and #2 and apply #3 to each pair","**Zip-With** (`fun,lst,lst`): Zip #1 and #2 and apply #3 to each pair"],"vectorises":false},{"name":"Rotate Left / Rotate Left / Iterate While Unique","symbol":"↺","keywords":["rot-left","iterate-while-unique"],"overloads":["**Rotate Left** (`lst\\|str`): Rotate #1 left","**Rotate Left** (`lst\\|str,num`): Rotate #1 left #2 times. Right if #2 is negative","**Iterate While Unique** (`any,fun`): Repeatedly apply #2 to #1 until a result is repeated. Return all results"],"vectorises":false},{"name":"Left Shift / Prepend Spaces to Given Length / Prepend Spaces to Length of Second String","symbol":"«","keywords":["left-shift","<<"],"overloads":["**Left Shift** (`num,num`): #1 << #2","**Prepend Spaces to Given Length** (`str,num`): Prepend spaces to string #1 until it is #2 characters long","**Prepend Spaces to Given Length** (`num,str`): Prepend spaces to string #2 until it is #1 characters long","**Prepend Spaces to Length of Second String** (`str,str`): Prepend spaces to string #1 until it is the length of #2"],"vectorises":true},{"name":"100000","symbol":"k3","keywords":["100000"],"overloads":["**100000**: Push 100000 to the stack"],"vectorises":false},{"name":"Add 2 / String Length Equals 1","symbol":"⨥","keywords":["+2","add-2","++++","inc-inc","strlen==1"],"overloads":["**Add 2** (`num`): #1 + 2","**String Length Equals 1** (`str`): Is the length of #1 equal to 1"],"vectorises":true},{"name":"Uppercase and Lowercase","symbol":"kB","keywords":["uppercase-lowercase"],"overloads":["**Uppercase and Lowercase**: Push \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\" to the stack"],"vectorises":false},{"name":"1000000","symbol":"k4","keywords":["1000000"],"overloads":["**1000000**: Push 1000000 to the stack"],"vectorises":false},{"name":"0 Slice / APL Style Take / Take While True","symbol":"⊖","keywords":["0-slice","take","0-take"],"overloads":["**0 Slice** (`itr,num`): First #2 elements of #1","**0 Slice** (`num,itr`): First #1 elements of #2","**APL Style Take** (`lst,lst[num]`): APL style take","**Take While True** (`lst,fun`): Take elements from #1 while #2 is true","**Take While True** (`fun,lst`): Take elements from #2 while #1 is true"],"vectorises":false},{"name":"Complex Parts","symbol":"∆⌹","keywords":["complex-parts"],"overloads":["**Complex Parts** (`num`): Push the real and imaginary parts of #1"],"vectorises":true},{"name":"Divmod","symbol":"‰","keywords":["divmod"],"overloads":["**Divmod** (`num,num`): Divmod of #1 and #2 ([#1 // #2, #1 % #2])"],"vectorises":true},{"name":"Greater Than or Equal","symbol":"≥","keywords":["greater-than-or-equal","gte",">="],"overloads":["**Greater Than or Equal** (`scl,scl`): #1 >= #2"],"vectorises":true},{"name":"Factors / Is Numeric","symbol":"K","keywords":["factors","is-numeric?","is-numeric"],"overloads":["**Factors** (`num`): Get the factors of #1","**Is Numeric** (`str`): Check if #1 is numeric"],"vectorises":true},{"name":"First Input","symbol":"⁰","keywords":["first-input","input-0"],"overloads":["**First Input**: Push the first input to the stack"],"vectorises":false},{"name":"Range / Reduce / Regex Match?","symbol":"R","keywords":["range","reduce","regex-match?"],"overloads":["**Range** (`num,num`): Range from #1 to #2, exclusive","**Reduce** (`lst,fun`): Reduce #1 by function #2","**Regex Match?** (`str,str`): Check if #2 matches #1"],"vectorises":false},{"name":"Golden Ratio","symbol":"kg","keywords":["golden-ratio","phi-constant"],"overloads":["**Golden Ratio**: Push 1.618033988749895 to the stack"],"vectorises":false},{"name":"Wrap in List","symbol":"w","keywords":["wrap-in-list"],"overloads":["**Wrap in List** (`any`): Wrap #1 in a list"],"vectorises":false},{"name":"Duplicate","symbol":":","keywords":["dup","duplicate"],"overloads":["**Duplicate** (`any`): Push #1 twice to the stack: #1 -> #1 #1"],"vectorises":false},{"name":"Matrix Inverse","symbol":"Þ⅟","keywords":["matrix-inverse","m**-1"],"overloads":["**Matrix Inverse** (`lst[lst]`): Inverse of #1"],"vectorises":false},{"name":"Swap","symbol":"$","keywords":["swap"],"overloads":["**Swap** (`any,any`): Swap #1 and #2 on the stack: #1 #2 -> #2 #1"],"vectorises":false},{"name":"256","symbol":"⑦","keywords":["256"],"overloads":["**256**: Push 256 to the stack"],"vectorises":false},{"name":"Inputs","symbol":"#?","keywords":["inputs","all-inputs","all-stdin"],"overloads":["**Inputs**: Get all the global inputs as a list"],"vectorises":false},{"name":"Equals","symbol":"≡","keywords":["exact-equals","eq+","==="],"overloads":["**Equals** (`any,any`): Does #1 exactly equal #2"],"vectorises":false},{"name":"Grid Neighbours Diagonals / Grid Neighbours Diagonals With Starting Direction","symbol":"Þ◌","keywords":["grid-neighbours-diagonals","grid-neighbors-diagonals","adjacent-cells-diagonals","adj-cells-diagonals","surrounding-cells-diagonals","eight-cells"],"overloads":["**Grid Neighbours Diagonals** (`lst`): Grid neighbours of #1 - up, down, left, right, and diagonals","**Grid Neighbours Diagonals With Starting Direction** (`lst,num`): Grid neighbours of cells in #1 - right, down, left, up, and diagonals - start from direction #2 => 0: right, 1: down, 2: left, 3: up"],"vectorises":false},{"name":"Character to Unicode / Unicode to Character","symbol":"O","keywords":["ord","chr"],"overloads":["**Character to Unicode** (`str`): Unicode value of each letter in #1","**Unicode to Character** (`num`): Character of each unicode value in #1"],"vectorises":true},{"name":"Range to Length 1","symbol":"Ƶ","keywords":["range-to-length-1"],"overloads":["**Range to Length 1** (`lst`): Range from 1 to len(#1)"],"vectorises":false},{"name":"Reverse Stack","symbol":"^","keywords":["reverse-stack"],"overloads":["**Reverse Stack**: Reverse the stack"],"vectorises":false},{"name":"Product / Number to Binary as String / First Integer Where Predicate is True","symbol":"Π","keywords":["product","product-of","*/","first-int"],"overloads":["**Product** (`lst`): Product of #1","**Number to Binary as String** (`num`): Convert #1 to binary as a string","**First Integer Where Predicate is True** (`fun`): First integer where #1 is true (positive or negative)"],"vectorises":false},{"name":"Around","symbol":"⤺","keywords":["around"],"overloads":["**Around**: Duplicate the top of the stack around the item below the top of the stack -> #1 #2 #1"],"vectorises":false},{"name":"Compress","symbol":"#C","keywords":["compress"],"overloads":["**Compress** (`str`): Compress #1 using the Vyxal compression algorithm"],"vectorises":true},{"name":"Multi-Dimensional Assign","symbol":"Þ⎀","keywords":["md-assign"],"overloads":["**Multi-Dimensional Assign** (`lst,lst[num],any`): Assign #3 to the multi-dimensional index #2 in #1 - #1[#2[0]][#2[1]]...[#2[n]] = #3"],"vectorises":false},{"name":"Uppercase Hex Digits","symbol":"k^","keywords":["uppercase-hex-digits"],"overloads":["**Uppercase Hex Digits**: Push \"0123456789ABCDEF\" to the stack"],"vectorises":false},{"name":"Grid Neighbours / Grid Neighbours With Starting Direction","symbol":"Þo","keywords":["grid-neighbours","grid-neighbors","adjacent-cells","adj-cells","surrounding-cells"],"overloads":["**Grid Neighbours** (`lst`): Grid neighbours of #1 - up, down, left, right","**Grid Neighbours With Starting Direction** (`lst,num`): Grid neighbours of cells in #1 - right, down, left, up - start from direction #2 => 0: right, 1: down, 2: left, 3: up"],"vectorises":false},{"name":"32","symbol":"③","keywords":["32"],"overloads":["**32**: Push 32 to the stack"],"vectorises":false},{"name":"Square Root","symbol":"√","keywords":["square-root","sqrt"],"overloads":["**Square Root** (`num`): Square root of #1"],"vectorises":true},{"name":"Set Register","symbol":"£","keywords":["set-register"],"overloads":["**Set Register** (`any`): Set the register to #1"],"vectorises":false},{"name":"Triplicate","symbol":"D","keywords":["triplicate"],"overloads":["**Triplicate** (`any`): Push #1 thrice to the stack: #1 -> #1 #1 #1"],"vectorises":false},{"name":"Greater Than / Increment Until False","symbol":">","keywords":["greater-than",">","gt","++-until-false"],"overloads":["**Greater Than** (`scl,scl`): #1 > #2","**Increment Until False** (`fun,num`): Increment #2 until #1 is false","**Increment Until False** (`num,fun`): Increment #1 until #2 is false"],"vectorises":true},{"name":"Square / String Pairs","symbol":"²","keywords":["square","string-pairs"],"overloads":["**Square** (`num`): #1 ** 2","**String Pairs** (`str`): Split #1 into pairs of characters"],"vectorises":true},{"name":"Combinations with Replacement / Combinations of Range with Replacement","symbol":"ℭ","keywords":["combinations-with-replacement"],"overloads":["**Combinations with Replacement** (`itr,num`): All combinations of #1 of length #2 with replacement","**Combinations with Replacement** (`num,itr`): All combinations of #2 of length #1 with replacement","**Combinations of Range with Replacement** (`num,num`): All combinations of range(#1) of length #2 with replacement"],"vectorises":false},{"name":"Sort","symbol":"S","keywords":["sort"],"overloads":["**Sort** (`itr`): Sort #1"],"vectorises":false},{"name":"Base 252 Compress String / Base 252 Compress Number","symbol":"#c","keywords":["b252compress"],"overloads":["**Base 252 Compress String** (`str`): Compress #1 using simple base 252 compression. Requires all characters to be lowercase letters, or spaces.","**Base 252 Compress Number** (`num`): Convert #1 to base 252, using the codepage as the digits"],"vectorises":true},{"name":"Print","symbol":"✒","keywords":["print"],"overloads":["**Print** (`any`): Print #1 without a trailing newline"],"vectorises":false},{"name":"Arithmetic Mean","symbol":"∆A","keywords":["arithmetic-mean"],"overloads":["**Arithmetic Mean** (`lst`): Arithmetic mean of #1 (sum(#1) / len(#1))"],"vectorises":false},{"name":"Double / Double","symbol":"d","keywords":["double"],"overloads":["**Double** (`num`): #1 * 2","**Double** (`str`): Append a copy of #1 to itself"],"vectorises":false},{"name":"Zip","symbol":"Z","keywords":["zip"],"overloads":["**Zip** (`lst,lst`): Zip #1 and #2"],"vectorises":false},{"name":"Windows / Overlapping Slices / Reduce Overlapping Slices / Reduce Set-Sized Overlapping Slices / Reduce Set-Sized Overlapping Slices","symbol":"o","keywords":["overlapping-sliding-window","windows","reduce-overlaps-by"],"overloads":["**Windows** (`lst,lst[num]`): Get overlapping windows of #1 with a window of size #2","**Overlapping Slices** (`any,num`): Get overlapping pairs of iterable(#1) with a window of size #2","**Overlapping Slices** (`num,any`): Get overlapping pairs of iterable(#2) with a window of size #1","**Reduce Overlapping Slices** (`lst,fun`): Reduce overlapping slices of length #2.arity in #1 by function #2","**Reduce Overlapping Slices** (`fun,lst`): Reduce overlapping slices of length #2.arity in #1 by function #2","**Reduce Set-Sized Overlapping Slices** (`lst,num,fun`): Reduce overlapping slices of length #2 in #1 by function #3","**Reduce Set-Sized Overlapping Slices** (`lst,fun,num`): Reduce overlapping slices of length #3 in #1 by function #2"],"vectorises":false},{"name":"Grid Neighbours Wrap / Grid Neighbours Wrap With Starting Direction","symbol":"ÞO","keywords":["grid-neighbours-wrap","grid-neighbors-wrap","adjacent-cells-wrap","adj-cells-wrap","surrounding-cells-wrap"],"overloads":["**Grid Neighbours Wrap** (`lst`): Grid neighbours of #1 - up, down, left, right - wrapping around","**Grid Neighbours Wrap With Starting Direction** (`lst,num`): Grid neighbours of cells in #1 - right, down, left, up - wrapping around and start from direction #2 => 0: right, 1: down, 2: left, 3: up. Negative #2 does not include middle, positive #2 does"],"vectorises":false},{"name":"Zip With Filler","symbol":"z","keywords":["zip-with-filler"],"overloads":["**Zip With Filler** (`lst,any`): Transpose #1, filling empty spaces with #2"],"vectorises":false}],"modifiers":[{"name":"Next AddElement as Lambda","symbol":"⑴","description":"Wrap #1 in a lambda and push it","keywords":["*:"],"overloads":["<tr><td>**Next AddElement as Lambda**</td><td>`any`</td><td>Wrap #1 in a lambda and push it</td><td>`⑴+ = λ+}`</td></tr>"]},{"name":"Parallel Apply Wrap","symbol":"∦","description":"Apply #1 and #2 on separate stacks and push both results wrapped in a list. Equivalent to `∥#1#2;`","keywords":["parallel-apply-wrap:","paraw:"],"overloads":["<tr><td>**Parallel Apply Wrap**</td><td>`mon,mon`</td><td>Apply #1 and #2 on separate stacks and push both results wrapped in a list. Equivalent to `∥#1#2;`</td><td>`3 4 ∦d½ -> [8, 2]`</td></tr>"]},{"name":"Both","symbol":"⎂","description":"Apply #1 to both the top of stack (or however many arguments), and under stack (or however many arguments under the arity). Effectively ... #1(top - arity, top - arity * 2) #1(top -> top - arity)","keywords":["both:"],"overloads":["<tr><td>**Both**</td><td>`any`</td><td>Apply #1 to both the top of stack (or however many arguments), and under stack (or however many arguments under the arity). Effectively ... #1(top - arity, top - arity * 2) #1(top -> top - arity)</td><td>`3 4 ⎂d -> 6 8 \\|\\| 1 2 3 4 ⎂+ -> 3 7`</td></tr>"]},{"name":"Dip","symbol":"⎇","description":"Save the top stack item, apply #1, then push the saved item","keywords":["dip:"],"overloads":["<tr><td>**Dip**</td><td>`mon`</td><td>Save the top stack item, apply #1, then push the saved item</td><td>`3 4 5 2 ⎇+ -> 3 9 2`</td></tr>"]},{"name":"Outer Product","symbol":"▦","description":"Outer product of #1 and #2","keywords":["outer-product:"],"overloads":["<tr><td>**Outer Product**</td><td>`dyd`</td><td>Outer product of #1 and #2</td><td>`#[1\\|2\\|3#] #[4\\|5\\|6#] ▦; -> [[[1,4],[1,5],[1,6]],[[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]]`</td></tr>"]},{"name":"Next Three Elements as Lambda","symbol":"⑶","description":"Wrap #1, #2, and #3 in a lambda and push it","keywords":["***:"],"overloads":["<tr><td>**Next Three Elements as Lambda**</td><td>`any,any,any`</td><td>Wrap #1, #2, and #3 in a lambda and push it</td><td>`⑶+*~ = λ+*~}`</td></tr>"]},{"name":"Each","symbol":"¨","description":"Map #1 over the top of the stack","keywords":["each:"],"overloads":["<tr><td>**Each**</td><td>`any`</td><td>Map #1 over the top of the stack</td><td>`#[#[1\\|2\\|3#]\\|#[4\\|2\\|3#]\\|#[1\\|5\\|3#]#] ¨G -> [3, 4, 5]`</td></tr>"]},{"name":"Filter / Peek","symbol":"~","description":"Filter the top of the stack with #1 / Apply #1 without popping","keywords":["filter:","without-popping:","peek:"],"overloads":["<tr><td>**Filter**</td><td>`mon`</td><td>Filter the top of the stack with #1</td><td>`#[1\\|2\\|3\\|4\\|5#] ~2≛ -> [2, 4]`</td></tr>","<tr><td>**Peek**</td><td>`dyd+`</td><td>Apply #1 without popping</td><td>`3 4 5 ~+ -> 3 4 9`</td></tr>"]},{"name":"Group By / Window Reduce","symbol":"⁜","description":"Group items of the top of the stack by results of #1 / Reduce each overlapping window of size #1.arity with #1","keywords":["group-by:","window-reduce:"],"overloads":["<tr><td>**Group By**</td><td>`mon`</td><td>Group items of the top of the stack by results of #1</td><td>`#[1\\|3\\|4\\|5\\|2\\|4#] ⁜e -> [[1,3],[4],[5],[2,4]]`</td></tr>","<tr><td>**Window Reduce**</td><td>`dyd+`</td><td>Reduce each overlapping window of size #1.arity with #1</td><td>`#[1\\|2\\|3\\|4\\|5\\|6#] ⁜λ3\\|+} -> [6, 9, 12, 15]`</td></tr>"]},{"name":"If Else","symbol":"ᖶ","description":"If the top of the stack is truthy, apply #1, else apply #2","keywords":["if-else:"],"overloads":["<tr><td>**If Else**</td><td>`any,any`</td><td>If the top of the stack is truthy, apply #1, else apply #2</td><td>`3 1 ᖶd½ -> 6`</td></tr>"]},{"name":"Inner Product","symbol":"ᛞ","description":"Inner product of #1 and #2","keywords":["inner-product:"],"overloads":["<tr><td>**Inner Product**</td><td>`dyd,dyd`</td><td>Inner product of #1 and #2</td><td>`#[1\\|2\\|3#] #[4\\|5\\|6#] ᛞ×+ -> 32`</td></tr>"]},{"name":"Next Two Elements as Lambda","symbol":"⑵","description":"Wrap #1 and #2 in a lambda and push it","keywords":["**:"],"overloads":["<tr><td>**Next Two Elements as Lambda**</td><td>`any,any`</td><td>Wrap #1 and #2 in a lambda and push it</td><td>`⑵+* = λ+*}`</td></tr>"]},{"name":"Left Fork","symbol":"⟒","description":"Apply #1 but keep the under stack, and then apply #2. Effectively #2(#1(top, under), under)","keywords":["left-fork:"],"overloads":["<tr><td>**Left Fork**</td><td>`dyd+,dyd+`</td><td>Apply #1 but keep the under stack, and then apply #2. Effectively #2(#1(top, under), under)</td><td>`3 4 ⟒+× -> 28`</td></tr>"]},{"name":"If","symbol":"¿","description":"If the top of the stack is truthy, apply #1","keywords":["if:"],"overloads":["<tr><td>**If**</td><td>`any`</td><td>If the top of the stack is truthy, apply #1</td><td>`3 1 ¿d -> 6`</td></tr>"]},{"name":"Correspond / Dyadic Correspond","symbol":"∺","description":"Apply #1 to <under> and #2 to <top> / Apply #2 to #2.arity top items, and #1 to #1.arity items under that","keywords":["correspond:"],"overloads":["<tr><td>**Correspond**</td><td>`mon,mon`</td><td>Apply #1 to <under> and #2 to <top></td><td>`3 4 ∺d½ -> 6 2`</td></tr>","<tr><td>**Dyadic Correspond**</td><td>`dyd+,dyd+`</td><td>Apply #2 to #2.arity top items, and #1 to #1.arity items under that</td><td>`3 4 5 6 ∺+- -> 7 1_`</td></tr>"]},{"name":"At Simple Levels","symbol":"⩔","description":"Apply #1 at the simple levels of the top of the stack","keywords":["at-simple-levels:","@simple:"],"overloads":["<tr><td>**At Simple Levels**</td><td>`mon`</td><td>Apply #1 at the simple levels of the top of the stack</td><td>`#[#[#[1\\|2\\|3#]\\|#[#[4\\|5\\|#[6\\|7\\|8#]#]#]#]#] ⩔L -> [[3, [[1, 1, 3]]]]`</td></tr>"]},{"name":"Next Four Elements as Lambda","symbol":"⑷","description":"Wrap #1, #2, #3, and #4 in a lambda and push it","keywords":["****:"],"overloads":["<tr><td>**Next Four Elements as Lambda**</td><td>`any,any,any,any`</td><td>Wrap #1, #2, #3, and #4 in a lambda and push it</td><td>`⑷+*~d = λ+*~d}`</td></tr>"]},{"name":"Zip With","symbol":"Ẅ","description":"Pop two lists and zip them, reducing each pair with #1","keywords":["zip-with:"],"overloads":["<tr><td>**Zip With**</td><td>`dyd`</td><td>Pop two lists and zip them, reducing each pair with #1</td><td>`#[1\\|2\\|3#] #[4\\|5\\|6#] ¨; -> [[1, 4], [2, 5], [3, 6]]`</td></tr>"]},{"name":"Parallel Apply","symbol":"∥","description":"Apply #1 and #2 on separate stacks and push both results","keywords":["parallel-apply:","para:"],"overloads":["<tr><td>**Parallel Apply**</td><td>`mon,mon`</td><td>Apply #1 and #2 on separate stacks and push both results</td><td>`3 4 ∥d½ -> 8 2`</td></tr>"]}],"syntax":[{"name":"Numeric Literal","symbol":"8","description":"The number 8","usage":"8"},{"name":"Retrieve Original Element","symbol":"#:~","description":"Call the original, vyxal defined, meaning of an element. Useful for when you want to define a new element with the same name as a built-in one","usage":"#:~<name>"},{"name":"Open Map Lambda","symbol":"ƛ","description":"Open a lambda that automatically maps its function to the top of the stack","usage":"ƛ<code>}"},{"name":"String Digraphs","symbol":"ø","description":"Used for string-related digraphs","usage":"ø<character>"},{"name":"Structure Branch","symbol":"|","description":"Delimit the next section in a structure.","usage":"<structure open> <code> | <code> ..."},{"name":"Base-252 Compressed String","symbol":"„","description":"Decompress and push a string, converted from a bijective base 252 number using the codepage","usage":"\"<compressed string>„"},{"name":"One Character String","symbol":"'","description":"Push the next character as a string","usage":"'<character>"},{"name":"Ternary Statement","symbol":"[","description":"Open a ternary statement. Pop condition, if truthy, run <ontrue>, else run <onfalse>","usage":"<condition> [<ontrue>|<onfalse>}"},{"name":"Numeric Literal","symbol":"0","description":"The number 0","usage":"0"},{"name":"Numeric Literal","symbol":"2","description":"The number 2","usage":"2"},{"name":"Defined Element Call","symbol":"#:@","description":"Call a defined element","usage":"#:@<name>"},{"name":"Generator Structure","symbol":"⎄","description":"Open a generator structure. Allows for generator expressions","usage":"⎄<code>|<initial vector>}"},{"name":"Numeric Literal","symbol":"3","description":"The number 3","usage":"3"},{"name":"Numeric Literal","symbol":"4","description":"The number 4","usage":"4"},{"name":"Close a Structure and Get the First Item","symbol":"⎋","description":"Match and close the nearest open structure, then push the first item of the result to the stack","usage":"<structure open> <code> ⎋ <code not in structure>"},{"name":"Close A Structure","symbol":"}","description":"Match and close the nearest open structure.","usage":"<structure open> <code> } <code not in structure>"},{"name":"Augmented Assignment","symbol":"#>","description":"Apply a function to a variable value and store the result in the same variable.","usage":"<function> #> <variable>"},{"name":"Decimal Separator","symbol":".","description":"Used to separate the integer and fractional parts of a number","usage":"<integer>.<fractional>"},{"name":"Close All Structures","symbol":"]","description":"Match and close all open structures.","usage":"<structure openers>] <code not in structure>"},{"name":"Base-252 Compressed Number","symbol":"“","description":"Decompress and push a number, converted from a bijective base 252 number using the codepage","usage":"\"<compressed number>“"},{"name":"Numeric Literal","symbol":"9","description":"The number 9","usage":"9"},{"name":"Two Character String","symbol":"Ꮬ","description":"Push the next two characters as a string","usage":"Ꮬ<character><character>"},{"name":"Open Filter Lambda","symbol":"Ω","description":"Open a lambda that automatically filters the top of the stack by its function","usage":"Ω<code>}"},{"name":"Open Reduce/Accumulate Lambda","symbol":"₳","description":"Open a lambda that automatically reduces/accumulates the top of the stack by its function","usage":"₳<code>}"},{"name":"Close List","symbol":"#]","description":"Close a list. Pushes the list to the stack when closed.","usage":"#[item|item|item#]"},{"name":"Retrieve Variable","symbol":"#$","description":"Push the value of a variable.","usage":"#$<variable>"},{"name":"Numeric Literal","symbol":"5","description":"The number 5","usage":"5"},{"name":"Context Paramter Index","symbol":"#¤","description":"Index into the list of context parameters.","usage":"¤<number>"},{"name":"Close Two Structures","symbol":")","description":"Match and close two open structures.","usage":"<structure open><structure open> <code> ) <code not in structure>"},{"name":"Assign Variable","symbol":"#=","description":"Assign a variable to a value.","usage":"#=<variable>"},{"name":"Open/Close String","symbol":"\"","description":"Open/close a string. If the string is closed, push it to the stack. Closes all string types","usage":"\"string contents\""},{"name":"Numeric Literal","symbol":"6","description":"The number 6","usage":"6"},{"name":"Numeric Literal","symbol":"1","description":"The number 1","usage":"1"},{"name":"Open Sort Lambda","symbol":"µ","description":"Open a lambda that automatically sorts the top of the stack by its function","usage":"µ<code>}"},{"name":"Record Definition","symbol":"#::R","description":"Define a record with members","usage":"#:R<name>|#$restricted #=private #!public}"},{"name":"Extension Method","symbol":"#::+","description":"Define an overload on a custom element based on types. Requires at least one type to be specified.","usage":"#::+<name>|<arg1>|<type1>|<arg2>|<type2>...|<impl>}"},{"name":"Open List","symbol":"#[","description":"Open a list. Pushes the list to the stack when closed.","usage":"#[item|item|item#]"},{"name":"Element/Modifier Definition","symbol":"#::","description":"Define a custom element/modifier that can be used in programs","usage":"#::<mode><name>|<arg>|<arg>...|<code>}"},{"name":"Miscellaneous Digraphs","symbol":"#","description":"Used for miscellaneous digraphs","usage":"#<character>"},{"name":"If/Elif/Else Statement","symbol":"#{","description":"Open an if statement. Allows for if/elif/else statements","usage":"#{<if condition>|<code>|<else if condition>|<code>|<else code>}"},{"name":"While Loop","symbol":"{","description":"Open a while loop. While the top of the stack is truthy, execute code.","usage":"{<condition>|<code>}"},{"name":"Dictionary Compressed String","symbol":"”","description":"Decompress and push a string using SSS compression, shamelessly stolen from Jelly","usage":"\"<compressed string>”"},{"name":"For Loop","symbol":"(","description":"Open a for loop. For each item in the top of the stack, execute code, storing loop variable.","usage":"<iterable> (<variable>|<code>}"},{"name":"Numeric Literal","symbol":"7","description":"The number 7","usage":"7"},{"name":"Variable Unpacking","symbol":"#:[","description":"Unpack the top of the stack into a list of variables.","usage":"#:[<var>|<var>|<var>]"},{"name":"Two Byte Number","symbol":"Ꮠ","description":"Push the next two bytes as a number, converted from bijective base 255 using the codepage","usage":"Ꮠ<character><character>"},{"name":"Mathematical Digraphs","symbol":"∆","description":"Used for math-related digraphs","usage":"∆<character>"},{"name":"Constant Digraphs","symbol":"k","description":"Used for constant-related digraphs","usage":"k<character>"},{"name":"Open Lambda","symbol":"λ","description":"Open a lambda.","usage":"λ<parameters>|<code>}"},{"name":"Defined Modifier Call","symbol":"#:`","description":"Call a defined modifier","usage":"#:`<name>"},{"name":"Close a Structure and Flatten","symbol":"⍟","description":"Match and close the nearest open structure, then flatten the result","usage":"<structure open> <code> ⍟ <code not in structure>"},{"name":"Comment","symbol":"##","description":"Comment out the rest of the line","usage":"##<comment>"},{"name":"Open Map Over Permutations Lambda","symbol":"⎊","description":"Open a lambda that automatically maps over the permutations of the top of the stack","usage":"⎊<code>}"},{"name":"List Digraphs","symbol":"Þ","description":"Used for list-related digraphs","usage":"Þ<character>"}],"flags":[{"name":"Range behavior","type":"choice","default":"","choices":{"":"Default behavior","M":"Start range at 0","m":"End range at n-1","Ṁ":"Both"}},{"name":"Default arity","type":"choice","default":"","choices":{"":"1","2":"2","3":"3"}},{"name":"End print mode","type":"choice","default":"","choices":{"":"Default behavior","j":"Join top with newlines","s":"Sum/concatenate top","d":"Deep sum of top","S":"Join top with spaces","O":"No implicit output","o":"Force implicit output","L":"Length of top","§":"Pretty-print top","G":"Maximum of top","g":"Minimum of top","¬":"Logical negation of top"}},{"name":"Full traceback","type":"boolean","flag":"X"},{"name":"Preset stack to 100","type":"boolean","flag":"H"},{"name":"Literate mode","type":"boolean","flag":"l"},{"name":"Don't evaluate inputs","type":"boolean","flag":"Ṡ"},{"name":"Rangify","type":"boolean","flag":"R"},{"name":"Limit list output","type":"boolean","flag":"…"},{"name":"Wrap stack","type":"boolean","flag":"W"}],"codepage":"λƛΛʎµξ⍾⎋⍟⎊\n⎄⟆⩔Ẅ⊐⎇ᖶ¿∥∦∺⁜⑴⑵⑶⑷⎂⟒ᛞ▦¨ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}⨥⨪ΣΠσ⇧⇩∪∩⊍⦰«»ƓɠĠġ◲⌈⌊⊖⌽£¥↜↝↺↻≜⎀⊢⊣ɦʈᐐᐵᐕ½ƶƵ⁰¹²³⅟※⇄⧖‰≛ℭ℈⦷Ϣ≤≥≠≡•±†⎙✒≓Ͼᴥℳ℗↸⍢ℂ⌹⏚↯⊠⚅æ␣¶★ᑂ∻√⍰◌δ☷✇⎃⎶⊆⍨⎘ꜝ≈≊κ↳ʀʁɾ▲Ṭ⤻⤺Ŀ♳♴♵Łḧ¤ᏜᏐ⧢①②③④⑤⑥⑦⑧⑨Þ∆ø„”“","version":"3.5.1"}