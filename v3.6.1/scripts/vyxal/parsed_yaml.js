var codepage = "λƛʎµξ⍾⎋⍟⎊⎄\n⩔Ẅ⊐⎇¿∥∦∺⁜⑴⑵⑶⑷⎂⟒ᛞ▦¨⊞×÷ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~◲⨥⨪∑Π⇧⇩∪∩⊍⦰«»ƓɠĠġ⌈⌊⊖⌽£¥↜↝↺↻≜⎀⊢⊣ɦʈᐐᐵᐕ½ƶƵ⁰¹²³⅟※⇄⧖‰≛ℭ℈⦷Ϣ≤≥≠≡•±†⎙γ≓Ͼᴥℳ℗↸⍢ℂ⌹⏚↯⊠⚅æ␣¶★ᑂ∻√⍰◌δ☷σ⎶⊆⍨⎘ꜝ≈≊κ‹›ʀʁɾ▲ṬṪ⤻⤺Ŀ¬∧∨ŁḧᏜᏐ¤⧢①②③④⑤⑥⑦⑧Þ∆ø„”“";
var codepage_descriptions ={"69":[{"overloads":"**2 to the Power of N** (`num`): 2 ** #1\n**Eval** (`str`): Evaluate #1","name":"2 to the Power of N / Eval","description":"2**n 2pow eval 2**","token":"E"}],"138":[{"overloads":"**Left Shift** (`num,num`): #1 << #2\n**Prepend Spaces to Given Length** (`str,num`): Prepend spaces to string #1 until it is #2 characters long\n**Prepend Spaces to Given Length** (`num,str`): Prepend spaces to string #2 until it is #1 characters long\n**Prepend Spaces to Length of Second String** (`str,str`): Prepend spaces to string #1 until it is the length of #2","name":"Left Shift / Prepend Spaces to Given Length / Prepend Spaces to Length of Second String","description":"left-shift <<","token":"«"}],"101":[{"overloads":"**Is Even** (`num`): Is #1 even\n**Split Newlines** (`str`): Split #1 by newlines","name":"Is Even / Split Newlines","description":"even? is-even split-newlines /newline","token":"e"},{"overloads":"**E Constant**: Push 2.718281828459045 to the stack","name":"E Constant","description":"&E-CONSTANT","token":"ke"}],"249":[{"overloads":"**-1**: Push -1 to the stack","name":"-1","description":"-1","token":"⑧"},{"overloads":"**65536**: Push 65536 to the stack","name":"65536","description":"65536","token":"k⑧"}],"234":[{"overloads":"**Logical And** (`nsl,nsl`): Python-style and - if #2 is false, return #2, else return #1\n**Short Circuit And** (`fun,fun`): Short circuit and - if #2() is false, return #2(), else return #1()","name":"Logical And / Short Circuit And","description":"and && logical-and","token":"∧"},{"overloads":"**Bitwise And** (`num,num`): #1 & #2","name":"Bitwise And","description":"bitwise-and","token":"∆∧"}],"0":[{"overloads":"λ<parameters>|<code>}","name":"Open Lambda","description":"lam lambda {\nOpen a lambda.","token":"λ"}],"88":[{"overloads":"**Cartesian Product** (`lst,lst`): Cartesian product of #1 and #2","name":"Cartesian Product","description":"cartesian-product","token":"X"},{"overloads":"**Break**: Break out of the current loop","name":"Break","description":"break","token":"#X"},{"overloads":"**Cartesian Product Unsafe** (`lst,lst`): Cartesian product of #1 and #2 in the standard order, but without accounting for infinite lists","name":"Cartesian Product Unsafe","description":"cartesian-product-unsafe cartesian-unsafe cart-prod-unsafe cart-unsafe","token":"ÞX"}],"170":[{"overloads":"**Reciprocal** (`num`): 1 / #1\n**Without Whitespace** (`str`): Remove all whitespace from #1","name":"Reciprocal / Without Whitespace","description":"reciprocal inverse 1/ without-whitespace no-space spaceless","token":"⅟"},{"overloads":"**Matrix Inverse** (`lst[lst]`): Inverse of #1","name":"Matrix Inverse","description":"matrix-inverse m**-1","token":"Þ⅟"}],"115":[{"overloads":"**Split** (`any,any`): Split #1 by #2","name":"Split","description":"split","token":"s"},{"overloads":"**Sine** (`num`): Sine of #1","name":"Sine","description":"sin sine","token":"∆s"}],"217":[{"overloads":"**Flatten by Depth** (`lst,num`): Flatten #1 by #2 levels\n**Flatten by Depth** (`lst`): Flatten #1 by 1 level","name":"Flatten by Depth / Flatten by Depth","description":"flatten-by-depth flatten-depth","token":"⎘"},{"overloads":"**Brainf*ck Commands**: Push \"[]<>-+.,\" to the stack","name":"Brainf*ck Commands","description":"&BRAINF*CK-COMMANDS","token":"k⎘"}],"5":[{"overloads":"⍾<code>}","name":"Eager Map","description":"eager-map-lambda eager-map-lam eager-map<\nOpen a lambda that maps its function to the top of the stack, but evaluates eagerly","token":"⍾"}],"202":[{"overloads":"**All Prime Exponents** (`num`): For all primes less than or equal to #1, push the power of that prime in the factorisation of #1","name":"All Prime Exponents","description":"all-prime-exponents all-prime-exps","token":"∆æ"},{"overloads":"**All Primes**: Push a list of every prime number to the stack","name":"All Primes","description":"&ALL-PRIMES &PRIMES","token":"kæ"},{"overloads":"**Bifurcate** (`any`): Duplicate #1 and reverse the duplicate\n**Call Function Without Popping** (`fun`): Call #1 without popping its arguments","name":"Bifurcate / Call Function Without Popping","description":"bifuricate bifur bif furry uwu dup-rev dup-reverse owo peek-function peek-call @@","token":"æ"}],"120":[{"overloads":"**Continue**: Continue to the next iteration of the current loop","name":"Continue","description":"continue","token":"#x"},{"overloads":"**Recurse**: Recursively call the current function (or the top-level program if not in a function)","name":"Recurse","description":"recurse","token":"x"}],"247":[{"overloads":"**16384**: Push 16384 to the stack","name":"16384","description":"16384","token":"k⑥"},{"overloads":"**128**: Push 128 to the stack","name":"128","description":"128","token":"⑥"}],"56":[{"overloads":"8","name":"Numeric Literal","description":"\nThe number 8","token":"8"}],"142":[{"overloads":"**Zipped Maximum** (`lst,lst`): Maximum of corresponding elements of #1 and #2\n**Vectorised Maximum** (`lst,scl`): Maximum of #2 and #1\n**Vectorised Maximum** (`scl,lst`): Maximum of #1 and #2\n**Dyadic Maximum** (`scl,scl`): Maximum of #1 and #2\n**Generate Sequence** (`nls,fun`): Call #2 on previous results of #2, starting with #1.\n**Generate Sequence** (`fun,nls`): Call #1 on previous results of #1, starting with #2.","name":"Zipped Maximum / Vectorised Maximum / Dyadic Maximum / Generate Sequence","description":"zip-max max-dyad max-ab gen","token":"Ġ"},{"overloads":"**Uppercase Consonants**: Push \"BCDFGHJKLMNPQRSTVWXYZ\" to the stack","name":"Uppercase Consonants","description":"&UPPERCASE-CONSONANTS","token":"kĠ"}],"153":[{"overloads":"**Rotate Right** (`lst\\|str`): Rotate #1 right\n**Rotate Right** (`lst\\|str,num`): Rotate #1 right #2 times. Left if #2 is negative","name":"Rotate Right / Rotate Right","description":"rot-right","token":"↻"},{"overloads":"**Cycle** (`lst`): Cycle #1 - Append all items of #1 to itself infinite times\n**List-Repeat Infinitely** (`num\\|str`): Repeat #1 infinitely - [#1, #1, #1, ...]","name":"Cycle / List-Repeat Infinitely","description":"cycle","token":"Þ↻"}],"174":[{"overloads":"**Divmod** (`num,num`): Divmod of #1 and #2 ([#1 // #2, #1 % #2])\n**Flatmap** (`lst,fun`): Flatmap #2 over #1\n**Flatmap** (`fun,lst`): Flatmap #1 over #2","name":"Divmod / Flatmap","description":"divmod flatmap","token":"‰"}],"185":[{"overloads":"**Signum** (`num`): Sign of #1\n**Case of** (`str`): Case of #1 (1 if positive, 0 if 0, -1 if negative)","name":"Signum / Case of","description":"signum case-of case sign","token":"±"},{"overloads":"**[1, 1]**: Push the list [1, 1] to the stack","name":"[1, 1]","description":"1~1 f11","token":"k±"}],"42":[{"overloads":"**Exponentiation** (`num,num`): #1 ** #2","name":"Exponentiation","description":"exponentiate pow ** power","token":"*"}],"24":[{"name":"Both","description":"Apply #1 to both the top of stack (or however many arguments), and under stack (or however many arguments under the arity). Effectively ... #1(top - arity, top - arity * 2) #1(top -> top - arity)","overloads":"<tr><td>**Both**</td><td>`any`</td><td>Apply #1 to both the top of stack (or however many arguments), and under stack (or however many arguments under the arity). Effectively ... #1(top - arity, top - arity * 2) #1(top -> top - arity)</td><td>`3 4 ⎂d -> 6 8 \\|\\| 1 2 3 4 ⎂+ -> 3 7`</td></tr>","token":"⎂","keywords":"both:"}],"37":[{"overloads":"**Modulo** (`num,num`): #1 % #2 (remainder of #1 divided by #2)\n**String Format** (`str,any`): Format #1 with #2\n**String Format** (`any,str`): Format #2 with #1","name":"Modulo / String Format","description":"mod modulo % remainder","token":"%"}],"25":[{"name":"Left Fork / Left Fork","description":"Apply #1 but keep the under stack, and then apply #2. Effectively #2(#1(top, under), under) / Apply #1 but keep the under stack, and then apply #2. Effectively #2(#1(top, under), under)","overloads":"<tr><td>**Left Fork**</td><td>`dyd+,dyd+`</td><td>Apply #1 but keep the under stack, and then apply #2. Effectively #2(#1(top, under), under)</td><td>`3 4 ⟒+× -> 28`</td></tr>\n<tr><td>**Left Fork**</td><td>`mon,dyd+`</td><td>Apply #1 but keep the under stack, and then apply #2. Effectively #2(#1(top, under), under)</td><td>`\"hEllO\"f ⟒ʀ= -> [1, 0, 1, 1, 0]`</td></tr>","token":"⟒","keywords":"left-fork: hook:"}],"52":[{"overloads":"**1000000**: Push 1000000 to the stack","name":"1000000","description":"1000000","token":"k4"},{"overloads":"4","name":"Numeric Literal","description":"\nThe number 4","token":"4"}],"14":[{"name":"Dip","description":"Save the top stack item, apply #1, then push the saved item","overloads":"<tr><td>**Dip**</td><td>`mon`</td><td>Save the top stack item, apply #1, then push the saved item</td><td>`3 4 5 2 ⎇+ -> 3 9 2`</td></tr>","token":"⎇","keywords":"dip:"}],"184":[{"overloads":"**Dot Product** (`lst,lst`): Dot product of #1 and #2\n**Bijective Base Conversion** (`num,num`):  Convert #1 to bijective base #2\n**First Index Where Predicate True** (`nsl,fun`): Index of the first value in #1 where function #2 is true\n**First Index Where Predicate True** (`fun,nsl`): Index of the first value in #2 where function #1 is true","name":"Dot Product / Bijective Base Conversion / First Index Where Predicate True","description":"dot-product bijective-base first-predicate-index","token":"•"},{"overloads":"**QWERTY Rows**: Push [\"qwertyuiop\", \"asdfghjkl\", \"zxcvbnm\"] to the stack","name":"QWERTY Rows","description":"&QWERTY-ROWS","token":"k•"}],"110":[{"overloads":"**Context Primary**: Push the primary context variable to the stack","name":"Context Primary","description":"ctx-primary ctx ctx-n context-n context-primary","token":"n"}],"125":[{"overloads":"<structure open> <code> } <code not in structure>","name":"Close A Structure","description":"end endfor end-for endwhile end-while endlambda end-lambda\nMatch and close the nearest open structure.","token":"}"}],"196":[{"overloads":"**NCR / N Choose R** (`num,num`): nCr of #1 and #2 (n choose r)\n**Characters Same?** (`str,str`): Are all characters in #1 the same as #2?\n**Fixpoint** (`fun,any`): Repeatedly apply #1 on #2 until a fixed point is reached\n**Fixpoint** (`any,fun`): Repeatedly apply #2 on #1 until a fixed point is reached","name":"NCR / N Choose R / Characters Same? / Fixpoint","description":"ncr choose characters-same? fixpoint","token":"ℂ"},{"overloads":"**Roman Numerals**: Push \"IVXLCDM\" to the stack","name":"Roman Numerals","description":"&ROMAN-NUMERALS","token":"kℂ"}],"157":[{"overloads":"**Base to 10** (`scl,num`): Convert #1 from base #2 to base 10, assuming a base that is a prefix of [0-9A-Z] for strings\n**Base to 10** (`lst[num\\|str],num`): Convert #1 from base #2 to base 10, using the items of #1 as digits\n**Base to 10** (`lst,num`): Convert each item in #1 from base #2 to base 10, assuming a base that is a prefix of [0-9A-Z] for strings\n**First Number Greater Than Where Function is True** (`fun,num`): The first number greater than #2 where #1 returns true\n**First Number Greater Than Where Function is True** (`num,fun`): The first number greater than #1 where #2 returns true","name":"Base to 10 / Base to 10 / Base to 10 / First Number Greater Than Where Function is True","description":"base-to-10 first>n","token":"⊣"}],"189":[{"overloads":"**Mirror** (`any`): Mirror #1 (#1 + reverse(#1)), as the original type","name":"Mirror","description":"mirror","token":"≓"}],"20":[{"name":"Next Element as Lambda","description":"Wrap #1 in a lambda and push it","overloads":"<tr><td>**Next Element as Lambda**</td><td>`any`</td><td>Wrap #1 in a lambda and push it</td><td>`⑴+ = λ+}`</td></tr>","token":"⑴","keywords":"*:"}],"46":[{"overloads":"<integer>.<fractional>","name":"Decimal Separator","description":"\nUsed to separate the integer and fractional parts of a number","token":"."}],"93":[{"overloads":"#[item|item|item#]","name":"Close List","description":"]\nClose a list. Pushes the list to the stack when closed.","token":"#]"},{"overloads":"<structure openers>] <code not in structure>","name":"Close All Structures","description":"close-all end-all\nMatch and close all open structures.","token":"]"}],"152":[{"overloads":"**Rotate Left** (`lst\\|str`): Rotate #1 left\n**Rotate Left** (`lst\\|str,num`): Rotate #1 left #2 times. Right if #2 is negative\n**Iterate While Unique** (`any,fun`): Repeatedly apply #2 to #1 until a result is repeated. Return all results","name":"Rotate Left / Rotate Left / Iterate While Unique","description":"rot-left iterate-while-unique","token":"↺"}],"228":[{"overloads":"**Arctangent 2** (`num,num`): atan2(#1, #2)","name":"Arctangent 2","description":"atan2 arctan2 arctangent2","token":"∆Ṭ"},{"overloads":"**Integers**: Push a list of every integer to the stack","name":"Integers","description":"&ZZ &INTEGERS","token":"kṬ"},{"overloads":"**Truthy Indexes** (`lst`): Indexes of truthy elements in #1","name":"Truthy Indexes","description":"truthy-indexes","token":"Ṭ"}],"57":[{"overloads":"9","name":"Numeric Literal","description":"\nThe number 9","token":"9"}],"78":[{"overloads":"**Negate** (`num`): -#1\n**Negate** (`str`): Swap the case of each letter #1\n**First Non-Negative Integer Where Predicate is True** (`fun`): First non-negative integer where #1 is true","name":"Negate / Negate / First Non-Negative Integer Where Predicate is True","description":"negate swapcase first>-1","token":"N"},{"overloads":"**Natural Numbers**: Push a list of every natural number to the stack","name":"Natural Numbers","description":"&NN &NATURAL-NUMBERS","token":"kN"}],"29":[{"overloads":"**Counts of Items** (`lst`): [#1.count(x) for x in set(#1)]","name":"Counts of Items","description":"counts counts-of","token":"⊞"}],"216":[{"overloads":"**Dump** (`any`): Push all items of #1 to the stack","name":"Dump","description":"dump","token":"⍨"}],"164":[{"overloads":"**Range to Length** (`lst`): Range from 0 to len(#1) - 1","name":"Range to Length","description":"range-to-length","token":"ƶ"}],"179":[{"overloads":"**Chunk to Length** (`any,num`): Chunk #1 into parts of length #2\n**Chunk to Length** (`num,any`): Chunk #2 into parts of length #1\n**Partition to Lengths** (`itr,lst[num]`): Partition #1 into parts of lengths #2\n**First N Integers Where Function is True** (`num,fun`): First #1 integers where function #2 is true\n**First N Integers Where Function is True** (`fun,num`): First #2 integers where function #1 is true","name":"Chunk to Length / Partition to Lengths / First N Integers Where Function is True","description":"chunk-to-length partition-to-length first-n-true","token":"Ϣ"}],"106":[{"overloads":"**Join On** (`lst,scl`): Join #1 on #2\n**Join On** (`scl,lst`): Join #2 on #1\n**Intersperse** (`lst,lst`): Intersperse elements of #2 within #1 (e.g. [1, [2,3], 4] [5, 6] -> [1, 5, 6, [2, 3], 5, 6, 4])\n**Make Complex Number** (`num,num`): Create a complex number from #1 and #2 - #1 + #2i","name":"Join On / Intersperse / Make Complex Number","description":"join-on","token":"j"}],"238":[{"overloads":"Ꮬ<character><character>","name":"Two Character String","description":"\nPush the next two characters as a string","token":"Ꮬ"}],"121":[{"overloads":"**Transliterate** (`nsl,nsl,nsl`): Replace all occurrences of #2 in #1 with #3\n**Call While** (`fun,fun,any`): While #1(#3) is true, #3 = #2(#3). Return the result. Type switchable.","name":"Transliterate / Call While","description":"transliterate call-while","token":"y"},{"overloads":"**Lowercase Vowels and Y**: Push \"aeiouy\" to the stack","name":"Lowercase Vowels and Y","description":"&LOWERCASE-VOWELSY","token":"ky"}],"84":[{"overloads":"**Hyperbolic Tangent** (`num`): Hyperbolic tangent of #1","name":"Hyperbolic Tangent","description":"tanh hyperbolic-tangent","token":"∆T"},{"overloads":"**Transpose** (`lst`): Transpose #1. Will not terminate on an infinite list of finite lists. Use ÞT if you need that.\n**Triple** (`num`): #1 * 3\n**Does String Contain Only Alphabetic Characters** (`str`): Check if #1 contains only alphabetic characters","name":"Transpose / Triple / Does String Contain Only Alphabetic Characters","description":"transpose triple alpha-only?","token":"T"},{"overloads":"**Transpose Safe** (`lst`): Transpose #1, does not hang on an infinite list of finite lists","name":"Transpose Safe","description":"transpose-safe","token":"ÞT"}],"211":[{"overloads":"**Deltas** (`lst`): Deltas/forward differences of #1 - [a - b, b - c, c - d, ...]","name":"Deltas","description":"deltas differences","token":"δ"}],"253":[{"overloads":"**Join on Spaces** (`lst`): Join #1 on spaces\n**Is negative?** (`num`): Push 1 if #1 < 0, 0 otherwise","name":"Join on Spaces / Is negative?","description":"join-on-spaces *space <0 is-negative?","token":"„"},{"overloads":"\"<compressed string>„","name":"Base-252 Compressed String","description":"\nDecompress and push a string, converted from a bijective base 252 number using the codepage","token":"„"}],"147":[{"overloads":"**1 Slice** (`itr,num`): First #2 elements of #1[1:]\n**1 Slice** (`num,itr`): First #1 elements of #2[1:]","name":"1 Slice","description":"1-slice tail-take 1-take","token":"⌽"}],"61":[{"overloads":"**Equals** (`scl,scl`): #1 == #2","name":"Equals","description":"equals == eq","token":"="},{"overloads":"#=<variable>","name":"Assign Variable","description":":=\nAssign a variable to a value.","token":"#="}],"221":[{"overloads":"**GCD** (`num,num`): GCD of #1 and #2\n**GCD of List** (`lst`): GCD of all elements of #1\n**GCD of List with Initial Value** (`lst,num`): GCD of all elements of #1.append(#2)","name":"GCD / GCD of List / GCD of List with Initial Value","description":"gcd","token":"κ"}],"132":[{"overloads":"**Grade Up** (`lst`): Indices that would sort #1","name":"Grade Up","description":"grade-up","token":"⇧"}],"1":[{"overloads":"ƛ<code>}","name":"Open Map Lambda","description":"map-lam map< map-lambda\nOpen a lambda that automatically maps its function to the top of the stack","token":"ƛ"}],"74":[{"overloads":"**Join** (`lst,scl`): Add #2 to the end of #1\n**Join** (`scl,lst`): Prepend #1 to #2\n**Join / Merge** (`lst,lst`): Add all elements of #2 to #1\n**Number Pair** (`num,num`): Create a list of #1 and #2\n**String Concatenation** (`str\\|num,str\\|num`): string(#1) + string(#2) (if either #1 or #2 is a string)","name":"Join / Join / Merge / Number Pair / String Concatenation","description":"join concat","token":"J"}],"206":[{"overloads":"**Head on Top, Rest on Bottom** (`any`): Push #1[1:] and #1[0]","name":"Head on Top, Rest on Bottom","description":"headless-top","token":"ᑂ"}],"89":[{"overloads":"**List Repeat** (`num,num`): A list of #1 repeated #2 times. E.g. 3 4 -> [3, 3, 3, 3]\n**List Repeat** (`itr,num`): A list of #2 instances of string #1\n**List Repeat** (`num,itr`): A list of #1 instances of string #2\n**Vectorised Repeat** (`itr,lst[nsl]`): Repeat each element of #2 (#1|#1.length) times","name":"List Repeat / List Repeat / Vectorised Repeat","description":"list-repeat","token":"Y"},{"overloads":"**Uppercase Vowels and Y**: Push \"AEIOUY\" to the stack","name":"Uppercase Vowels and Y","description":"&UPPERCASE-VOWELSY","token":"kY"}],"133":[{"overloads":"**Grade Down** (`lst`): Indices that would sort #1 in reverse","name":"Grade Down","description":"grade-down","token":"⇩"}],"116":[{"overloads":"**Tail** (`any`): Last element of #1","name":"Tail","description":"tail last","token":"t"},{"overloads":"**Tangent** (`num`): Tangent of #1","name":"Tangent","description":"tan tangent","token":"∆t"}],"243":[{"overloads":"**16**: Push 16 to the stack","name":"16","description":"16","token":"②"},{"overloads":"**270**: Push 270 to the stack","name":"270","description":"270","token":"k②"}],"248":[{"overloads":"**32768**: Push 32768 to the stack","name":"32768","description":"32768","token":"k⑦"},{"overloads":"**256**: Push 256 to the stack","name":"256","description":"256","token":"⑦"}],"220":[{"overloads":"**All Equal Item** (`lst,any`): Are all elements of #1 equal to #2?","name":"All Equal Item","description":"all-equal-item","token":"≊"}],"102":[{"overloads":"**List of Digits** (`num`): Push a list of the digits of #1 to the stack\n**List of Characters** (`str`): Push a list of the characters of #1 to the stack\n**Flatten** (`lst`): Flatten #1","name":"List of Digits / List of Characters / Flatten","description":"flatten","token":"f"}],"233":[{"overloads":"**Bitwise Not** (`num`): ~#1","name":"Bitwise Not","description":"bitwise-not","token":"∆¬"},{"overloads":"**Not** (`any`): if #1 is truthy, return False, else return True","name":"Not","description":"not ~ logical-not","token":"¬"}],"6":[{"overloads":"<structure open> <code> ⎋ <code not in structure>","name":"Close a Structure and Get the First Item","description":"end-and-head end-head\nMatch and close the nearest open structure, then push the first item of the result to the stack","token":"⎋"}],"60":[{"overloads":"**Open Brackets**: Push \"([{<\" to the stack","name":"Open Brackets","description":"&OPEN-FISH-BRACKETS","token":"k<"},{"overloads":"**Less Than** (`scl,scl`): #1 < #2\n**Decrement Until False** (`fun,num`): Decrement #2 until #1 is false\n**Decrement Until False** (`num,fun`): Decrement #1 until #2 is false","name":"Less Than / Decrement Until False","description":"less-than < lt ---until-false","token":"<"},{"overloads":"**Argument** (`num`): The angle (argument) between the positive real axis and the line joining the origin to #1 in the complex plane.","name":"Argument","description":"arg phase angle","token":"∆<"}],"117":[{"overloads":"**Unique** (`lst`): Unique elements of #1\n**Unique By Function** (`lst,fun`): Unique elements of #1 by applying #2","name":"Unique / Unique By Function","description":"unique","token":"u"}],"85":[{"overloads":"**Uninterleave** (`lst`): Uninterleave #1","name":"Uninterleave","description":"uninterleave","token":"U"}],"201":[{"overloads":"**Random Choice** (`itr`): Random element of #1\n**Random Integer** (`num`): Random integer from 0 to #1","name":"Random Choice / Random Integer","description":"random-choice random-element randint random","token":"⚅"}],"160":[{"overloads":"**Init** (`any`): All but the last element of #1","name":"Init","description":"init without-tail tailless","token":"ᐐ"}],"70":[{"overloads":"**Filter** (`fun,any`): Filter #1 by function #2\n**Filter** (`any,fun`): Filter #2 by function #1\n**Find** (`nls,nls`): Find the index of #1 in #2. Switches #1 and #2 so that the haystack is the deeper list","name":"Filter / Find","description":"filter find index-of","token":"F"},{"overloads":"**Fizzbuzz Constant**: Push \"FizzBuzz\" to the stack","name":"Fizzbuzz Constant","description":"&FIZZBUZZ","token":"kF"}],"192":[{"overloads":"**Every Nth AddElement** (`itr,num`): Every #2th element of #1\n**Every Nth AddElement** (`num,itr`): Every #1th element of #2\n**Matrix Multiply** (`lst,lst`): Matrix multiply #1 and #2\n**Regex Full Match?** (`str,str`): Does pattern #2 fully match #1","name":"Every Nth AddElement / Matrix Multiply / Regex Full Match?","description":"modular matrix-multiply regex-full-match?","token":"ℳ"}],"165":[{"overloads":"**Range to Length 1** (`lst`): Range from 1 to len(#1)","name":"Range to Length 1","description":"range-to-length-1","token":"Ƶ"}],"33":[{"overloads":"**Factorial** (`num`): Factorial of #1\n**Titlecase** (`str`): Titlecase #1","name":"Factorial / Titlecase","description":"factorial ! titlecase fact title fac","token":"!"}],"28":[{"name":"Each","description":"Map #1 over the top of the stack","overloads":"<tr><td>**Each**</td><td>`any`</td><td>Map #1 over the top of the stack</td><td>`#[#[1\\|2\\|3#]\\|#[4\\|2\\|3#]\\|#[1\\|5\\|3#]#] ¨G -> [3, 4, 5]`</td></tr>","token":"¨","keywords":"each:"}],"38":[{"overloads":"**Append** (`any,any`): Append #2 to #1","name":"Append","description":"append","token":"&"}],"21":[{"name":"Next Two Elements as Lambda","description":"Wrap #1 and #2 in a lambda and push it","overloads":"<tr><td>**Next Two Elements as Lambda**</td><td>`any,any`</td><td>Wrap #1 and #2 in a lambda and push it</td><td>`⑵+* = λ+*}`</td></tr>","token":"⑵","keywords":"**:"}],"137":[{"overloads":"**Multiset Difference** (`lst,lst`): Multiset difference of #1 and #2","name":"Multiset Difference","description":"multiset-difference mset-diff","token":"Þ⦰"},{"overloads":"**Set Difference** (`lst,lst`): Set difference of #1 and #2","name":"Set Difference","description":"set-difference set-diff","token":"⦰"}],"92":[{"name":"Reject By / Scanl","description":"Reject items of the top of the stack by results of #1 / Scan left with #1","overloads":"<tr><td>**Reject By**</td><td>`mon`</td><td>Reject items of the top of the stack by results of #1</td><td>`#[1\\|3\\|4\\|5\\|2\\|4#] \\e -> [1, 3, 5]`</td></tr>\n<tr><td>**Scanl**</td><td>`dyd+`</td><td>Scan left with #1</td><td>`#[1\\|2\\|3\\|4#] \\+ -> [1, 3, 6, 10]`</td></tr>","token":"\\","keywords":"reject-by: scanl:"}],"229":[{"overloads":"**Untruth** (`lst`): Create a list of 1s at indices in #1, 0s elsewhere","name":"Untruth","description":"untruth","token":"Ṫ"}],"252":[{"overloads":"ø<character>","name":"String Digraphs","description":"\nUsed for string-related digraphs","token":"ø"}],"197":[{"overloads":"**Paired Brackets**: Push [\"()\", \"[]\", \"{}\", \"<>\" to the stack","name":"Paired Brackets","description":"&PAIRED-BRACKETS","token":"k⌹"},{"overloads":"**Integers Partitions** (`num`): All possible ways to sum positive integers to #1\n**List Partitions** (`itr`): All possible ways to partition #1 into sublists","name":"Integers Partitions / List Partitions","description":"list-partitions integer-partitions","token":"⌹"},{"overloads":"**Complex Parts** (`num`): Push the real and imaginary parts of #1","name":"Complex Parts","description":"complex-parts","token":"∆⌹"}],"65":[{"overloads":"**Uppercase Letters**: Push \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" to the stack","name":"Uppercase Letters","description":"&UPPERCASE-LETTERS","token":"kA"},{"overloads":"**All** (`any`): Are all elements of #1 are truthy","name":"All","description":"all all? vowel? is-vowel is-vowel?","token":"A"},{"overloads":"**Letter to Number** (`str`): the index of #1 in the alphabet (one-indexed)\n**Number to Letter** (`num`): the letter at index #1 in the alphabet (one-indexed)","name":"Letter to Number / Number to Letter","description":"letter-to-number number-to-letter letter-number-swap number-letter-swap a1-swap","token":"øA"},{"overloads":"**Arithmetic Mean** (`lst`): Arithmetic mean of #1 (sum(#1) / len(#1))","name":"Arithmetic Mean","description":"arithmetic-mean","token":"∆A"}],"97":[{"overloads":"**Lowercase Letters**: Push \"abcdefghijklmnopqrstuvwxyz\" to the stack","name":"Lowercase Letters","description":"&LOWERCASE-LETTERS","token":"ka"},{"overloads":"**Any** (`num`): Are any digits of #1 truthy\n**Is Uppercase** (`str`): Check if #1 is uppercase. With string.len > 1, vectorises over each character\n**Any** (`lst`): Are any elements of #1 truthy","name":"Any / Is Uppercase / Any","description":"any any? uppercase?","token":"a"}],"224":[{"overloads":"**Range 0** (`num`): Range from 0 to #1, exclusive\n**Lowercase** (`str`): Lowercase #1","name":"Range 0 / Lowercase","description":"0->n lowercase range-0->n nrange-0","token":"ʀ"}],"156":[{"overloads":"**10 to Base** (`num,num`): Convert #1 to base #2\n**10 to Base** (`num,str\\|lst`): Convert #1 to base len(#2) using the items of #2\n**10 to Base** (`lst,num`): Convert each item in #1 to base #2\n**10 to Base** (`lst,lst`): Convert each item in #1 to the base of the corresponding item in #2\n**All Regex Matches** (`str,str`): All matches of #2 in #1","name":"10 to Base / 10 to Base / 10 to Base / 10 to Base / All Regex Matches","description":"10-to-base all-regex-matches","token":"⊢"}],"9":[{"overloads":"⎄<code>|<initial vector>}","name":"Generator Structure","description":"relation< generate< generate-from<\nOpen a generator structure. Allows for generator expressions","token":"⎄"}],"188":[{"overloads":"**Wrap to Length 2** (`any`): Wrap #1 into chunks of length 2","name":"Wrap to Length 2","description":"wrap-len-2","token":"γ"},{"overloads":"**Lowercase and Uppercase Vowels and Y**: Push \"aeiouyAEIOUY\" to the stack","name":"Lowercase and Uppercase Vowels and Y","description":"&LOWER-UPPER-VOWELSY","token":"kγ"}],"53":[{"overloads":"**4294967296**: Push 4294967296 to the stack","name":"4294967296","description":"4294967296","token":"k5"},{"overloads":"5","name":"Numeric Literal","description":"\nThe number 5","token":"5"}],"169":[{"overloads":"**Cube** (`num`): #1 ** 3\n**String Triples** (`str`): Split #1 into triples of characters","name":"Cube / String Triples","description":"cube string-triples","token":"³"},{"overloads":"**1073741824 (2^30)**: Push 1073741824 to the stack","name":"1073741824 (2^30)","description":"1073741824 2**30 2^30","token":"k³"}],"141":[{"overloads":"**Lowercase Consonants Without Y**: Push \"bcdfghjklmnpqrstvwxz\" to the stack","name":"Lowercase Consonants Without Y","description":"&LOWERCASE-CONSONANTS-WITHOUT-Y","token":"kɠ"},{"overloads":"**Min Peek** (`lst`): Minimum of #1 without popping","name":"Min Peek","description":"min-peek","token":"ɠ"}],"109":[{"overloads":"**Context Secondary**: Push the secondary context variable to the stack","name":"Context Secondary","description":"ctx-secondary ctx2 ctx-m context-m context-secondary","token":"m"}],"77":[{"overloads":"**Map** (`fun,any`): Map function #1 over #2\n**Map** (`any,fun`): Map function #2 over #1\n**Mold** (`lst,lst`): Reshape #1 to the shape of #2\n**Multiplicity** (`num,num`): How many times #1 divides #2\n**Regex Match** (`str,str`): Return the first match of #2 in #1","name":"Map / Mold / Multiplicity / Regex Match","description":"map mold multiplicity regex-match","token":"M"}],"193":[{"overloads":"**Is Prime** (`num`): Is #1 a prime number?\n**Quine Cheese** (`str`): Quotify #1 and prepend it to #1. (Useful for quines like `\"℗\"℗`)","name":"Is Prime / Quine Cheese","description":"is-prime prime? quine-cheese","token":"℗"}],"212":[{"overloads":"**Brackets Without <>**: Push \"{}[]()\" to the stack","name":"Brackets Without <>","description":"&BRACKETS-WITHOUT-<>","token":"k☷"},{"overloads":"**Partition After Truthy** (`lst,lst`):  Partition #1 after truthy indices of #2.\n**Group By** (`lst,fun`): Group elements of #1 by function #2","name":"Partition After Truthy / Group By","description":"partition-after-truthy group-by","token":"☷"}],"96":[{"overloads":"**Length of Stack**: Push the length of the stack to the stack","name":"Length of Stack","description":"len-stack","token":"`"},{"overloads":"#:`<name>","name":"Defined Modifier Call","description":"$:\nCall a defined modifier","token":"#:`"}],"124":[{"overloads":"<structure open> <code> | <code> ...","name":"Structure Branch","description":": -> else: else elif else-if body do branch then in using no? => from\nDelimit the next section in a structure.","token":"|"}],"225":[{"overloads":"**Range 0 Inclusive** (`num`): Range from 0 to #1, inclusive\n**Uppercase** (`str`): Uppercase #1","name":"Range 0 Inclusive / Uppercase","description":"0->n++ uppercase range-0->n++ n+range-0","token":"ʁ"}],"173":[{"overloads":"**Permutations** (`any`): All permutations of #1\n**Map Over Permutations** (`any,fun`): Map #2 over all permutations of #1","name":"Permutations / Map Over Permutations","description":"permutations map-over-permutations map-perms","token":"⧖"}],"129":[{"overloads":"**Subtract 2** (`num`): #1 - 2\n**Flip Bracket Palindrome** (`str`): Palindromise #1 by appending the reverse with brackets and slashes flipped","name":"Subtract 2 / Flip Bracket Palindrome","description":"-2 subtract-2 ---- dec-dec flip-bracket-palindrome","token":"⨪"}],"41":[{"overloads":"<structure open><structure open> <code> ) <code not in structure>","name":"Close Two Structures","description":"end-end\nMatch and close two open structures.","token":")"}],"134":[{"overloads":"**Union** (`lst,lst`): Union of #1 and #2","name":"Union","description":"union set-union","token":"∪"},{"overloads":"**Open Brackets**: Push \"([{\" to the stack","name":"Open Brackets","description":"&OPEN-BRACKETS","token":"k∪"}],"73":[{"overloads":"**Interleave** (`any,any`): Interleave #1 and #2\n**Reject** (`any,fun`): Remove elements of #1 that satisfy function #2\n**Reject** (`fun,any`): Remove elements of #2 that satisfy function #1","name":"Interleave / Reject","description":"interleave reject","token":"I"},{"overloads":"**Imaginary Part** (`num`): Imaginary part of #1","name":"Imaginary Part","description":"imaginary-part","token":"∆I"}],"2":[{"overloads":"Ω<code>}","name":"Open Filter Lambda","description":"filter-lam filter< filter-lambda\nOpen a lambda that automatically filters the top of the stack by its function","token":"ʎ"}],"205":[{"overloads":"**Asterisk**: Push an asterisk to the stack","name":"Asterisk","description":"asterisk","token":"★"}],"128":[{"overloads":"**Add 2** (`num`): #1 + 2\n**String Length Equals 1** (`str`): Is the length of #1 equal to 1","name":"Add 2 / String Length Equals 1","description":"+2 add-2 ++++ inc-inc strlen==1","token":"⨥"}],"237":[{"overloads":"**Heads** (`lst`): First element of each element in #1","name":"Heads","description":"heads head-each","token":"ḧ"}],"105":[{"overloads":"**Multi-Dimensional Index** (`lst,lst[num]`): Index #1 at the multi-dimensional index #2 - #1[#2[0]][#2[1]]...[#2[n]]","name":"Multi-Dimensional Index","description":"md-index","token":"Þi"},{"overloads":"**Nth AddElement** (`itr,num`): Get the #2th element of #1\n**Nth AddElement** (`num,itr`): Get the #1th element of #2\n**Vectorised Index** (`itr,lst[num]`): [#1[_] for _ in #2]\n**String Enclose** (`str,str`): enclose #2 in #1 (#1[0:len(#1)//2] + #2 + #1[len(#1)//2:])\n**Object Member Retrieval** (`obj,str`): #1.#2\n**Object Member Retrieval** (`str,obj`): #2.#1\n**Collect Unique Values (+ Initial Value)** (`any,fun`): Apply #2 on #1 and collect unique values. Does include the initial value.","name":"Nth AddElement / Vectorised Index / String Enclose / Object Member Retrieval / Collect Unique Values (+ Initial Value)","description":"index at item-at nth-item collect-unique enclose <**","token":"i"},{"overloads":"**Pi Constant**: Push 3.141592653589793 to the stack","name":"Pi Constant","description":"&PI","token":"ki"}],"244":[{"overloads":"**2048**: Push 2048 to the stack","name":"2048","description":"2048","token":"k③"},{"overloads":"**32**: Push 32 to the stack","name":"32","description":"32","token":"③"}],"166":[{"overloads":"**Zero Lift** (`lst`): Multiply each element of #1 by its 0-based index","name":"Zero Lift","description":"zero-lift","token":"Þ⁰"},{"overloads":"**First Input**: Push the first input to the stack","name":"First Input","description":"first-input input-0","token":"⁰"},{"overloads":"**2147483648**: Push 2147483648 to the stack","name":"2147483648","description":"2147483648","token":"k⁰"}],"34":[{"overloads":"\"string contents\"","name":"Open/Close String","description":"\nOpen/close a string. If the string is closed, push it to the stack. Closes all string types","token":"\""}],"148":[{"overloads":"**Set Register** (`any`): Set the register to #1","name":"Set Register","description":"set-register","token":"£"}],"45":[{"overloads":"**Subtraction** (`num,num`): #1 - #2\n**Prepend/Append Hyphens** (`str,num`): #1 + #2 * '-'\n**Prepend/Append Hyphens** (`num,str`): '-' * #1 + #2\n**Regex Remove** (`str,str`): Remove matches of #2 from #1","name":"Subtraction / Prepend/Append Hyphens / Regex Remove","description":"subtract - minus subtraction regex-remove","token":"-"},{"overloads":"**[1, -1]**: Push the list [1, -1] to the stack","name":"[1, -1]","description":"1~-1","token":"k-"}],"161":[{"overloads":"**Drop** (`any,num`): All but the first #2 elements of #1\n**Drop** (`num,any`): All but the first #1 elements of #2\n**APL Style Drop** (`lst,lst[num]`): APL style drop\n**Fixed Point Headless** (`fun,any`): Repeatedly apply #1 to #2 until it doesn't change. Do not include the initial value\n**Fixed Point Headless** (`any,fun`): Repeatedly apply #1 to #2 until it doesn't change. Do not include the initial value","name":"Drop / APL Style Drop / Fixed Point Headless","description":"drop fixed-point-headless","token":"ᐵ"}],"64":[{"overloads":"**Absolute Difference** (`num,num`): Absolute difference between #1 and #2\n**Levenstein Distance** (`str,str`): Levenstein distance between #1 and #2\n**Reduce Overlapping Pairs** (`lst,fun`): Reduce overlapping pairs in {#1|#2} by function {#2|#1}","name":"Absolute Difference / Levenstein Distance / Reduce Overlapping Pairs","description":"absolute-difference abs-diff levenstein to-overpairs","token":"@"},{"overloads":"#:@<name>","name":"Defined Element Call","description":"$@\nCall a defined element","token":"#:@"}],"180":[{"overloads":"**Less Than or Equal** (`scl,scl`): #1 <= #2","name":"Less Than or Equal","description":"less-than-or-equal lte <=","token":"≤"}],"17":[{"name":"Parallel Apply Wrap","description":"Apply #1 and #2 on separate stacks and push both results wrapped in a list. Equivalent to `∥#1#2;`","overloads":"<tr><td>**Parallel Apply Wrap**</td><td>`mon,mon`</td><td>Apply #1 and #2 on separate stacks and push both results wrapped in a list. Equivalent to `∥#1#2;`</td><td>`3 4 ∦d½ -> [8, 2]`</td></tr>","token":"∦","keywords":"parallel-apply-wrap: paraw:"}],"149":[{"overloads":"**Get Register**: Push the register to the stack","name":"Get Register","description":"get-register","token":"¥"}],"176":[{"overloads":"**Arccosine** (`num`): Arccosine of #1","name":"Arccosine","description":"arccos arccosine","token":"∆ℭ"},{"overloads":"**Combinations with Replacement** (`itr,num`): All combinations of #1 of length #2 with replacement\n**Combinations with Replacement** (`num,itr`): All combinations of #2 of length #1 with replacement\n**Combinations of Range with Replacement** (`num,num`): All combinations of range(#1) of length #2 with replacement","name":"Combinations with Replacement / Combinations of Range with Replacement","description":"combinations-with-replacement","token":"ℭ"}],"191":[{"overloads":"**10 to the Power of** (`num`): 10 ** #1\n**Execute** (`str`): Execute #1 as Vyxal code\n**Call Function** (`fun`): Call function #1","name":"10 to the Power of / Execute / Call Function","description":"exec 10** call @","token":"ᴥ"}],"22":[{"name":"Next Three Elements as Lambda","description":"Wrap #1, #2, and #3 in a lambda and push it","overloads":"<tr><td>**Next Three Elements as Lambda**</td><td>`any,any,any`</td><td>Wrap #1, #2, and #3 in a lambda and push it</td><td>`⑶+*~ = λ+*~}`</td></tr>","token":"⑶","keywords":"***:"}],"44":[{"overloads":"**Print** (`any`): Print #1 to stdout, followed by a newline","name":"Print","description":"println stdout output out","token":","},{"overloads":"**Print** (`any`): Print #1 without a trailing newline","name":"Print","description":"print","token":"#,"}],"204":[{"overloads":"**Newline**: Push a newline to the stack","name":"Newline","description":"newline","token":"¶"}],"27":[{"name":"Outer Product","description":"Outer product of #1 and #2","overloads":"<tr><td>**Outer Product**</td><td>`dyd`</td><td>Outer product of #1 and #2</td><td>`#[1\\|2\\|3#] #[4\\|5\\|6#] ▦; -> [[[1,4],[1,5],[1,6]],[[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]]`</td></tr>","token":"▦","keywords":"outer-product:"}],"59":[{"overloads":"**Pair** (`any,any`): Push a list [#1, #2] to the stack: #1 #2 -> [#1, #2]","name":"Pair","description":"pair cons","token":";"}],"118":[{"overloads":"**Lowercase Vowels**: Push \"aeiou\" to the stack","name":"Lowercase Vowels","description":"&LOWERCASE-VOWELS","token":"kv"},{"overloads":"**Overlapping Pairs** (`lst`): Get overlapping pairs of #1\n**Reduce Overlapping Pairs** (`lst,fun`): Reduce overlapping pairs in #1 by function #2","name":"Overlapping Pairs / Reduce Overlapping Pairs","description":"overlapping-pairs reduce-pairs-by","token":"v"}],"71":[{"overloads":"**Geometric Mean** (`lst`): Geometric mean of #1 (product(#1) ^ (1 / len(#1)))","name":"Geometric Mean","description":"geometric-mean","token":"∆G"},{"overloads":"**Monadic Maximum** (`lst`): Maximum of #1","name":"Monadic Maximum","description":"max-of maximum-of","token":"G"}],"12":[{"name":"Zip With","description":"Pop two lists and zip them, reducing each pair with #1","overloads":"<tr><td>**Zip With**</td><td>`dyd`</td><td>Pop two lists and zip them, reducing each pair with #1</td><td>`#[1\\|2\\|3#] #[4\\|5\\|6#] ¨; -> [[1, 4], [2, 5], [3, 6]]`</td></tr>","token":"Ẅ","keywords":"zip-with:"}],"54":[{"overloads":"**Hex Digits**: Push \"0123456789abcdef\" to the stack","name":"Hex Digits","description":"&HEX-DIGITS","token":"k6"},{"overloads":"6","name":"Numeric Literal","description":"\nThe number 6","token":"6"}],"144":[{"overloads":"**Ceiling** (`num`): Ceiling of #1\n**Split on Spaces** (`str`): Split #1 by spaces","name":"Ceiling / Split on Spaces","description":"ceil ceiling split-on-spaces","token":"⌈"}],"49":[{"overloads":"**1000**: Push 1000 to the stack","name":"1000","description":"1000","token":"k1"},{"overloads":"1","name":"Numeric Literal","description":"\nThe number 1","token":"1"}],"236":[{"overloads":"**Length Peek** (`any`): Push the length of #1 without popping","name":"Length Peek","description":"length-peek","token":"Ł"}],"181":[{"overloads":"**Greater Than or Equal** (`scl,scl`): #1 >= #2","name":"Greater Than or Equal","description":"greater-than-or-equal gte >=","token":"≥"}],"86":[{"overloads":"**Uppercase Vowels**: Push \"AEIOU\" to the stack","name":"Uppercase Vowels","description":"&UPPERCASE-VOWELS","token":"kV"},{"overloads":"**Vectorise Reverse** (`lst`): Reverse each item in #1\n**1 - X** (`num`): 1 - #1","name":"Vectorise Reverse / 1 - X","description":"vectorse-reverse 1-x","token":"V"}],"159":[{"overloads":"**Arctangent** (`num`): Arctangent of #1","name":"Arctangent","description":"arctan arctangent","token":"∆ʈ"},{"overloads":"**Tail Peek** (`lst`): Last element of #1 without popping","name":"Tail Peek","description":"tail-peek","token":"ʈ"}],"187":[{"overloads":"**Peek Print** (`any`): Print #1 without popping","name":"Peek Print","description":"peek-print","token":"⎙"}],"172":[{"overloads":"**Reverse** (`any`): Reverse #1","name":"Reverse","description":"reverse","token":"⇄"}],"113":[{"overloads":"**Quotify** (`any`): Cast #1 to a string and wrap in quotes","name":"Quotify","description":"quotify","token":"q"},{"overloads":"**Prime Exponents** (`num`): push a list of the power of each prime in the prime factors of #1","name":"Prime Exponents","description":"prime-exponents","token":"∆q"}],"219":[{"overloads":"**All Same** (`any`): Are all elements of #1 the same?","name":"All Same","description":"all-same","token":"≈"},{"overloads":"**[0, 1]**: Push the list [0, 1] to the stack","name":"[0, 1]","description":"0~1","token":"k≈"}],"81":[{"overloads":"**Remove At** (`nsl,num`): Remove the element at index #2 from #1\n**Regex Groups** (`str,str`): Return the groups of the first match of #2 in #1","name":"Remove At / Regex Groups","description":"remove-at regex-groups","token":"Q"},{"overloads":"**Quit**: Quit the program","name":"Quit","description":"quit","token":"#Q"}],"230":[{"overloads":"**Over**: Duplicate the item below the top of the stack -> #2 #1 #2","name":"Over","description":"over","token":"⤻"}],"76":[{"overloads":"**Lowercase and Uppercase**: Push \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" to the stack","name":"Lowercase and Uppercase","description":"&LOWERCASE-UPPERCASE","token":"kL"},{"overloads":"**Least Common Multiple** (`num,num`): Least common multiple of #1 and #2\n**Least Common Multiple of List** (`lst`): Least common multiple of all elements of #1\n**Least Common Multiple** (`lst,num`): Least common multiple of #1.append(#2)","name":"Least Common Multiple / Least Common Multiple of List / Least Common Multiple","description":"least-common-multiple","token":"∆L"},{"overloads":"**Length** (`any`): Length of #1","name":"Length","description":"length len","token":"L"}],"7":[{"overloads":"<structure open> <code> ⍟ <code not in structure>","name":"Close a Structure and Flatten","description":"end-and-flatten end-flatten\nMatch and close the nearest open structure, then flatten the result","token":"⍟"}],"245":[{"overloads":"**64**: Push 64 to the stack","name":"64","description":"64","token":"④"},{"overloads":"**4096**: Push 4096 to the stack","name":"4096","description":"4096","token":"k④"}],"39":[{"overloads":"'<character>","name":"One Character String","description":"\nPush the next character as a string","token":"'"}],"98":[{"overloads":"**Binary Digits** (`num`): Convert #1's list of digits from binary to base 10\n**From Binary** (`str`): Convert #1 from binary to a number\n**From Binary** (`lst`): Convert #1 from binary to a number","name":"Binary Digits / From Binary / From Binary","description":"from-binary","token":"b"}],"208":[{"overloads":"**Square Root** (`num`): Square root of #1","name":"Square Root","description":"square-root sqrt","token":"√"}],"103":[{"overloads":"**Monadic Minimum** (`lst`): Minimum of #1","name":"Monadic Minimum","description":"min-of minimum-of","token":"g"},{"overloads":"**Golden Ratio**: Push 1.618033988749895 to the stack","name":"Golden Ratio","description":"&GOLDEN-RATIO &PHI","token":"kg"}],"140":[{"overloads":"**Uppercase Consonants Without Y**: Push \"BCDFGHJKLMNPQRSTVWXZ\" to the stack","name":"Uppercase Consonants Without Y","description":"&UPPERCASE-CONSONANTS-WITHOUT-Y","token":"kƓ"},{"overloads":"**Max Peek** (`lst`): Maximum of #1 without popping","name":"Max Peek","description":"max-peek","token":"Ɠ"}],"213":[{"overloads":"**Cumulative Sums** (`lst`): Cumulative sums of #1","name":"Cumulative Sums","description":"cumulative-sums cumsums cumsum cum-sum -_-","token":"σ"}],"91":[{"overloads":"<condition> [<ontrue>|<onfalse>}","name":"Ternary Statement","description":"? ?->\nOpen a ternary statement. Pop condition, if truthy, run <ontrue>, else run <onfalse>","token":"["},{"overloads":"#[item|item|item#]","name":"Open List","description":"[\nOpen a list. Pushes the list to the stack when closed.","token":"#["},{"overloads":"#:[<var>|<var>|<var>]","name":"Variable Unpacking","description":":=[\nUnpack the top of the stack into a list of variables.","token":"#:["}],"66":[{"overloads":"**To Binary** (`num`): Convert #1 to binary\n**String to Binary** (`str`): Convert each character in #1 to a binary representation of its unicode value","name":"To Binary / String to Binary","description":"to-binary","token":"B"},{"overloads":"**Uppercase and Lowercase**: Push \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\" to the stack","name":"Uppercase and Lowercase","description":"&UPPERCASE-LOWERCASE","token":"kB"}],"155":[{"overloads":"**Insert** (`any,num,any`): Insert #3 into #1 at index #2\n**Insert** (`any,lst[num],scl`): Insert #3 into #1 at indices #2\n**Insert** (`any,lst[num],lst`): Insert items of #3 into #1 at indices #2","name":"Insert / Insert / Insert","description":"insert","token":"⎀"},{"overloads":"**Polar Parts** (`num`): Push the magnitude and argument of #1","name":"Polar Parts","description":"polar-parts","token":"∆⎀"},{"overloads":"**Lowercase and Uppercase Vowels**: Push \"aeiouAEIOU\" to the stack","name":"Lowercase and Uppercase Vowels","description":"&LOWER-UPPER-VOWELS","token":"k⎀"},{"overloads":"**Multi-Dimensional Assign** (`lst,lst[num],any`): Assign #3 to the multi-dimensional index #2 in #1 - #1[#2[0]][#2[1]]...[#2[n]] = #3","name":"Multi-Dimensional Assign","description":"md-assign","token":"Þ⎀"}],"198":[{"overloads":"**Powerset** (`nsl`): Powerset of #1\n**Vectorise** (`fun`): Apply #1 as if it were a pervasive element","name":"Powerset / Vectorise","description":"powerset vectorise","token":"⏚"}],"108":[{"overloads":"**Reverse Uppercase and Lowercase**: Push \"ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba\" to the stack","name":"Reverse Uppercase and Lowercase","description":"&REVERSE-UPPERCASE-LOWERCASE","token":"kl"},{"overloads":"**Logarithm** (`num,num`): Log base #2 of #1\n**Scan Fixpoint** (`fun,any`): Repeatedly apply #1 to #2 until it doesn't change, collecting intermediate values, including initial value.\n**Scan Fixpoint** (`any,fun`): Repeatedly apply #2 to #1 until it doesn't change, collecting intermediate values, including initial value.\n**Same Length** (`str,str`): Are #1 and #2 the same length\n**String Length Equals** (`str,num`): Is the length of #1 equal to #2\n**String Length Equals** (`num,str`): Is the length of #2 equal to #1","name":"Logarithm / Scan Fixpoint / Same Length / String Length Equals","description":"log logarithm scan-fixpoint scan-fix same-length? same-length length-equals? length-equals len-eq?","token":"l"}],"240":[{"overloads":"**Nested Brackets**: Push \"([{<>}])\" to the stack","name":"Nested Brackets","description":"&NESTED-BRACKETS","token":"k¤"},{"overloads":"**Stringify** (`any`): Stringify #1","name":"Stringify","description":"stringify to-str str","token":"¤"},{"overloads":"**Grid Neighbours Diagonals Wrap** (`lst`): Grid neighbours of #1 - up, down, left, right, and diagonals - wrapping around\n**Grid Neighbours Diagonals Wrap With Starting Direction** (`lst,num`): Grid neighbours of cells in #1 - right, down, left, up, and diagonals - wrapping around and start from direction #2 => 0: right, 1: down, 2: left, 3: up. Negative #2 does not include middle, positive #2 does","name":"Grid Neighbours Diagonals Wrap / Grid Neighbours Diagonals Wrap With Starting Direction","description":"grid-neighbours-diagonals-wrap grid-neighbors-diagonals-wrap adjacent-cells-diagonals-wrap adj-cells-diagonals-wrap surrounding-cells-diagonals-wrap eight-cells-wrap","token":"Þ¤"},{"overloads":"¤<number>","name":"Context Paramter Index","description":"`n`\nIndex into the list of context parameters.","token":"#¤"}],"251":[{"overloads":"∆<character>","name":"Mathematical Digraphs","description":"\nUsed for math-related digraphs","token":"∆"}],"130":[{"overloads":"**Sum** (`lst`): Sum of #1\n**Join and Evaluate** (`lst[at least 1 str]`): Join #1 and evaluate the result","name":"Sum / Join and Evaluate","description":"sum sum-of +/ /+ sigma sigma-in-ohio","token":"∑"}],"223":[{"overloads":"**Increment** (`num`): #1 + 1\n**Spaces to 0s** (`str`): Replace spaces in #1 with '0's","name":"Increment / Spaces to 0s","description":"increment ++ space-to-0 replace-spaces-with-0s inc","token":"›"}],"135":[{"overloads":"**Close Brackets**: Push \")]}\"","name":"Close Brackets","description":"&CLOSE-BRACKETS","token":"k∩"},{"overloads":"**Multiset Intersection** (`lst,lst`): Multiset intersection of #1 and #2","name":"Multiset Intersection","description":"multiset-intersection mset-isect","token":"Þ∩"},{"overloads":"**Intersection** (`lst,lst`): Intersection of #1 and #2","name":"Intersection","description":"intersection set-intersection","token":"∩"}],"167":[{"overloads":"**Second Input**: Push the second input to the stack","name":"Second Input","description":"second-input input-1","token":"¹"},{"overloads":"**One Lift** (`lst`): Multiply each element of #1 by its 1-based index","name":"One Lift","description":"one-lift","token":"Þ¹"}],"35":[{"overloads":"#<character>","name":"Miscellaneous Digraphs","description":"\nUsed for miscellaneous digraphs","token":"#"},{"overloads":"##<comment>","name":"Comment","description":"\nComment out the rest of the line","token":"##"}],"226":[{"overloads":"**Range 1 Inclusive** (`num`): Range from 1 to #1, inclusive\n**Is Character Alphabetical** (`str`): Check if #1 is alphabetical (i.e. is a letter)","name":"Range 1 Inclusive / Is Character Alphabetical","description":"1->n++ is-alpha?","token":"ɾ"}],"3":[{"overloads":"µ<code>}","name":"Open Sort Lambda","description":"sort-lam sort< sort-lambda\nOpen a lambda that automatically sorts the top of the stack by its function","token":"µ"}],"241":[{"overloads":"**Split Into N Pieces** (`itr,num`): Split #1 into #2 pieces\n**Split Into N Pieces** (`num,itr`): Split #2 into #1 pieces\n**Split Number Into N Pieces** (`itr,num`): Listify #1 and split it into #2 pieces\n**Split Number Into N Pieces** (`num,itr`): Listify #2 and split it into #1 pieces\n**Fixpoint Unfold Without Initial Value** (`fun,any`): Repeatedly apply #1 to #2, collecting results (not including initial value)\n**Fixpoint Unfold Without Initial Value** (`any,fun`): Repeatedly apply #2 to #1, collecting results (not including initial value)","name":"Split Into N Pieces / Split Number Into N Pieces / Fixpoint Unfold Without Initial Value","description":"into-n-pieces split-into-n-pieces fixpoint-collect-tail","token":"⧢"},{"overloads":"**Principal Root of Unity** (`num`): Principal #1-th root of unity (e^(2i * pi / #1))","name":"Principal Root of Unity","description":"root-of-unity","token":"∆⧢"}],"80":[{"overloads":"**Printable ASCII**: Push \"!\" to \"~\" to the stack","name":"Printable ASCII","description":"&PRINTABLE-ASCII","token":"kP"},{"overloads":"**Prefixes** (`lst`): Get all prefixes of #1. Treats numbers as a list of digits","name":"Prefixes","description":"prefixes","token":"P"}],"162":[{"overloads":"**Behead** (`any`): All but the first element of #1","name":"Behead","description":"behead without-head headless","token":"ᐕ"}],"255":[{"overloads":"**Join on Empty String** (`lst`): Join #1 on the empty string\n**Is alphanumeric?** (`str`): Push 1 if #1 is alphanumeric, 0 otherwise\n**First Positive Integer Where Function is Truthy** (`fun`): Push the first positive integer where #1 is truthy\n**Is Insignificant?** (`num`): abs(#1) <= 1","name":"Join on Empty String / Is alphanumeric? / First Positive Integer Where Function is Truthy / Is Insignificant?","description":"join-on-empty-string *empty is-alphanumeric? insignificant? first-positive-integer first-n>0","token":"“"},{"overloads":"\"<compressed number>“","name":"Base-252 Compressed Number","description":"\nDecompress and push a number, converted from a bijective base 252 number using the codepage","token":"“"}],"209":[{"overloads":"**Truthy?** (`scl`): Is #1 truthy? (Not 0, empty, or false)","name":"Truthy?","description":"truthy?","token":"⍰"},{"name":"If Else","description":"If the top of the stack is truthy, apply #1, else apply #2","overloads":"<tr><td>**If Else**</td><td>`any,any`</td><td>If the top of the stack is truthy, apply #1, else apply #2</td><td>`3 1 #⍰d½ -> 6`</td></tr>","token":"#⍰","keywords":"if-else:"}],"112":[{"overloads":"**Punctuation**: Push all punctuation characters to the stack","name":"Punctuation","description":"&PUNCTUATION","token":"kp"},{"overloads":"**Prepend** (`any,any`): Prepend #2 to #1","name":"Prepend","description":"prepend","token":"p"}],"123":[{"overloads":"{<condition>|<code>}","name":"While Loop","description":"while while<\nOpen a while loop. While the top of the stack is truthy, execute code.","token":"{"},{"overloads":"#{<if condition>|<code>|<else if condition>|<code>|<else code>}","name":"If/Elif/Else Statement","description":"if\nOpen an if statement. Allows for if/elif/else statements","token":"#{"}],"194":[{"overloads":"**Retrieve Item at Index from Outer Stack** (`num`): Retrieve the item at index #1 from the outer stack, current stack if at top level\n**Retrieve Item at Index from Outer Stack N-Layers Up** (`lst[num, num]`): Retrieve the item at index #2 from the stack #1 levels up","name":"Retrieve Item at Index from Outer Stack / Retrieve Item at Index from Outer Stack N-Layers Up","description":"retrieve-from-outer","token":"#↸"},{"overloads":"**Roll** (`any,any,any`): #1 #2 #3 -> #3 #1 #2","name":"Roll","description":"roll","token":"↸"}],"145":[{"overloads":"**Floor** (`num`): Floor of #1\n**String to Number** (`str`): Convert #1 to a number, ignoring non-digit characters. Returns 0 if no digits are found","name":"Floor / String to Number","description":"floor str-to-num","token":"⌊"}],"48":[{"overloads":"**360**: Push 360 to the stack","name":"360","description":"360","token":"k0"},{"overloads":"**Zero Pad** (`itr,num`): #1 zero-padded to length #2\n**Zero Pad** (`num,itr`): #2 zero-padded to length #1\n**Zero Pad** (`itr,itr`): #1 zero-padded to length of #2","name":"Zero Pad / Zero Pad","description":"zero-pad","token":"Þ0"},{"overloads":"0","name":"Numeric Literal","description":"\nThe number 0","token":"0"}],"63":[{"overloads":"**Input**: Get the next input item, evaluated.","name":"Input","description":"stdin input in","token":"?"},{"overloads":"**Inputs**: Get all the global inputs as a list","name":"Inputs","description":"inputs all-inputs all-stdin","token":"#?"}],"18":[{"name":"Correspond / Dyadic Correspond","description":"Apply #1 to <under> and #2 to <top> / Apply #2 to #2.arity top items, and #1 to #1.arity items under that","overloads":"<tr><td>**Correspond**</td><td>`mon,mon`</td><td>Apply #1 to <under> and #2 to <top></td><td>`3 4 ∺d½ -> 6 2`</td></tr>\n<tr><td>**Dyadic Correspond**</td><td>`dyd+,dyd+`</td><td>Apply #2 to #2.arity top items, and #1 to #1.arity items under that</td><td>`3 4 5 6 ∺+- -> 7 1_`</td></tr>","token":"∺","keywords":"correspond:"}],"150":[{"overloads":"**Rotate Stack Left**: Rotate the stack left","name":"Rotate Stack Left","description":"rotate-stack-left","token":"↜"}],"95":[{"overloads":"**Pop**: Pop the top of the stack","name":"Pop","description":"pop discard","token":"_"}],"50":[{"overloads":"**10000**: Push 10000 to the stack","name":"10000","description":"10000","token":"k2"},{"overloads":"2","name":"Numeric Literal","description":"\nThe number 2","token":"2"}],"67":[{"overloads":"**Hyperbolic Cosine** (`num`): Hyperbolic cosine of #1","name":"Hyperbolic Cosine","description":"cosh hyperbolic-cosine","token":"∆C"},{"overloads":"**Count** (`lst,scl`): Count occurrences of #2 in #1\n**Count** (`scl,lst`): Count occurrences of #1 in #2\n**Count** (`lst,lst`): Count occurrences of the list with shallower depth in the list with deeper depth","name":"Count / Count","description":"count","token":"C"},{"overloads":"**Compress** (`str`): Compress #1 using the Vyxal compression algorithm","name":"Compress","description":"compress","token":"#C"}],"199":[{"overloads":"**Inclusive Range** (`num,num`): Inclusive range from #1 to #2\n**Sort By** (`nsl,fun`): Sort list #1 (range if num) by function #2\n**Sort By** (`fun,nsl`): Sort list #2 (range if num) by function #1\n**Regex Split Keep Delimiters** (`str,str`): Split #1 by regex #2, keeping the delimiters","name":"Inclusive Range / Sort By / Regex Split Keep Delimiters","description":"inclusive-range sort-by regex-split-keep-delimiters","token":"↯"},{"overloads":"**Arcsine** (`num`): Arcsine of #1","name":"Arcsine","description":"arcsin arcsine","token":"∆↯"}],"16":[{"name":"Parallel Apply","description":"Apply #1 and #2 on separate stacks and push both results","overloads":"<tr><td>**Parallel Apply**</td><td>`mon,mon`</td><td>Apply #1 and #2 on separate stacks and push both results</td><td>`3 4 ∥d½ -> 8 2`</td></tr>","token":"∥","keywords":"parallel-apply: para:"}],"127":[{"overloads":"**Sublists** (`any`): All sublists of #1","name":"Sublists","description":"sublists","token":"◲"},{"overloads":"**Surround** (`any,any`): #1 prepended and appended to #2","name":"Surround","description":"surround","token":"ø◲"},{"overloads":"**Parens and Squares**: Push \"()[]\" to the stack","name":"Parens and Squares","description":"&PARENS-SQUARES","token":"k◲"}],"31":[{"overloads":"**Division** (`num,num`): #1 / #2\n**String into N Pieces** (`str,num`): Split string #1 into #2 pieces\n**String into N Pieces** (`num,str`): Split string #2 into #1 pieces\n**Regex Split** (`str,str`): Split #1 by regex #2","name":"Division / String into N Pieces / Regex Split","description":"divide string-pieces regex-split / div","token":"÷"}],"177":[{"overloads":"**Combinations without Replacement** (`itr,num`): All combinations of #1 of length #2 without replacement\n**Combinations without Replacement** (`num,itr`): All combinations of #2 of length #1 without replacement\n**Combinations of Range without Replacement** (`num,num`): All combinations of range(#1) of length #2 without replacement","name":"Combinations without Replacement / Combinations of Range without Replacement","description":"combinations-without-replacement","token":"℈"}],"182":[{"overloads":"**Not Equal** (`scl,scl`): str(#1) != str(#2)","name":"Not Equal","description":"not-equal neq != =n't eqn't equaln't","token":"≠"}],"154":[{"overloads":"**List Assign** (`any,num,nsl`): #1[#2] = #3\n**Augmented List Assignment** (`any,num,fun`): #1[#2] = #3(#1[#2])\n**Vectorised Augmented List Assignment** (`lst,lst[num],fun`): #1[_] = #3(#1[_]) for _ in #2\n**Zipped Assignment** (`lst,lst,lst`): #1[ind] = val for ind, val in zip(#2, #3)\n**Regex String Replacement** (`str,str,str`): Replace all occurrences of #2 in #1 with #3\n**Regex Substitution** (`str,str,fun`): Replace all occurrences of #2 in #1 with the result of #3\n**Object Member Assignment** (`obj,str,any`): #1.#2 = #3","name":"List Assign / Augmented List Assignment / Vectorised Augmented List Assignment / Zipped Assignment / Regex String Replacement / Regex Substitution / Object Member Assignment","description":"assign **>","token":"≜"}],"11":[{"overloads":"**Codepage**: Push the Vyxal codepage to the stack","name":"Codepage","description":"&CODEPAGE","token":"k⩔"},{"name":"At Simple Levels","description":"Apply #1 at the simple levels of the top of the stack","overloads":"<tr><td>**At Simple Levels**</td><td>`mon`</td><td>Apply #1 at the simple levels of the top of the stack</td><td>`#[#[#[1\\|2\\|3#]\\|#[#[4\\|5\\|#[6\\|7\\|8#]#]#]#]#] ⩔L -> [[3, [[1, 1, 3]]]]`</td></tr>","token":"⩔","keywords":"at-simple-levels: @simple:"}],"72":[{"overloads":"**Hello, World!**: Push \"Hello, World!\" to the stack","name":"Hello, World!","description":"&HELLO-WORLD","token":"kH"},{"overloads":"**Harmonic Mean** (`lst`): Harmonic mean of #1 (len(#1) / sum(1 / #1))","name":"Harmonic Mean","description":"harmonic-mean","token":"∆H"},{"overloads":"**To Hex** (`num`): Convert #1 to hexadecimal\n**From Hex** (`str`): Convert #1 from hexadecimal to a number. Inverse of 'to-hex'","name":"To Hex / From Hex","description":"to-hex from-hex","token":"H"}],"175":[{"overloads":"**Divides?** (`num,num`): #2 % #1 == 0\n**Append Spaces** (`str,num`): Append #2 spaces to #1\n**Append Spaces** (`num,str`): Append #1 spaces to #2\n**Regex Span** (`str,str`): Span of regex match of pattern #2 in #1","name":"Divides? / Append Spaces / Regex Span","description":"divides? append-spaces regex-span","token":"≛"}],"143":[{"overloads":"**Zipped Minimum** (`lst,lst`): Minimum of corresponding elements of #1 and #2\n**Vectorised Minimum** (`lst,scl`): Minimum of #2 and #1\n**Vectorised Minimum** (`scl,lst`): Minimum of #1 and #2\n**Dyadic Minimum** (`scl,scl`): Minimum of #1 and #2\n**Generate Sequence** (`nls,fun`): Call #2 as a dyad infinitely with items of #1 as starting values","name":"Zipped Minimum / Vectorised Minimum / Dyadic Minimum / Generate Sequence","description":"zip-min min-dyad min-ab 2gen","token":"ġ"},{"overloads":"**Lowercase Consonants**: Push \"bcdfghjklmnpqrstvwxyz\" to the stack","name":"Lowercase Consonants","description":"&LOWERCASE-CONSONANTS","token":"kġ"}],"43":[{"overloads":"**Addition** (`num,num`): #1 + #2\n**String and Number Concatenation** (`str,num`): #1 + str(#2)\n**String and Number Concatenation** (`num,str`): str(#1) + #2\n**String Concatenation** (`str,str`): #1 + #2","name":"Addition / String and Number Concatenation / String Concatenation","description":"add + plus addition","token":"+"},{"overloads":"**[-1, 1]**: Push the list [-1, 1] to the stack","name":"[-1, 1]","description":"-1~1","token":"k+"},{"overloads":"#::+<name>|<arg1>|<type1>|<arg2>|<type2>...|<impl>}","name":"Extension Method","description":"extension\nDefine an overload on a custom element based on types. Requires at least one type to be specified.","token":"#::+"}],"99":[{"overloads":"**Cosine** (`num`): Cosine of #1","name":"Cosine","description":"cos cosine","token":"∆c"},{"overloads":"**Contains** (`scl,scl`): Is #2 in #1\n**Contains** (`lst,scl`): Is #2 in #1\n**Contains** (`scl,lst`): Is #1 in #2\n**Contains** (`lst,lst`): Is the list with shallower depth in the list with deeper depth","name":"Contains / Contains / Contains","description":"contains contains? is-in","token":"c"},{"overloads":"**Base 252 Compress String** (`str`): Compress #1 using simple base 252 compression. Requires all characters to be lowercase letters, or spaces.\n**Base 252 Compress Number** (`num`): Convert #1 to base 252, using the codepage as the digits","name":"Base 252 Compress String / Base 252 Compress Number","description":"b252compress","token":"#c"}],"87":[{"overloads":"**Wrap**: Wrap the entire stack into a list","name":"Wrap","description":"wrap","token":"W"}],"203":[{"overloads":"**Space**: Push a space to the stack","name":"Space","description":"space","token":"␣"}],"218":[{"overloads":"**Keep Truthy** (`lst`): Keep only the truthy elements of #1","name":"Keep Truthy","description":"keep-truthy","token":"ꜝ"}],"104":[{"overloads":"**Hello World!**: Push \"Hello World\" to the stack, no punctuation","name":"Hello World!","description":"&HELLOWORLD","token":"kh"},{"overloads":"**Head** (`any`): First element of #1","name":"Head","description":"head first","token":"h"}],"250":[{"overloads":"Þ<character>","name":"List Digraphs","description":"\nUsed for list-related digraphs","token":"Þ"}],"231":[{"overloads":"**Around**: Duplicate the top of the stack around the item below the top of the stack -> #1 #2 #1","name":"Around","description":"around","token":"⤺"}],"40":[{"overloads":"<iterable> (<variable>|<code>}","name":"For Loop","description":"for for< do-to-each each-as\nOpen a for loop. For each item in the top of the stack, execute code, storing loop variable.","token":"("}],"26":[{"name":"Inner Product","description":"Inner product of #1 and #2","overloads":"<tr><td>**Inner Product**</td><td>`dyd,dyd`</td><td>Inner product of #1 and #2</td><td>`#[1\\|2\\|3#] #[4\\|5\\|6#] ᛞ×+ -> 32`</td></tr>","token":"ᛞ","keywords":"inner-product:"}],"158":[{"overloads":"**Head Peek** (`lst`): First element of #1 without popping","name":"Head Peek","description":"head-peek","token":"ɦ"}],"186":[{"overloads":"**Lengths of Consecutives** (`lst`): Lengths of consecutive runs of equal elements in #1","name":"Lengths of Consecutives","description":"lengths-of-consecutives","token":"†"}],"171":[{"overloads":"**Group by Consecutive** (`lst`): Group consecutive equal elements of #1\n**Group Consecutive by Function** (`lst,fun`): Group elements of #1 by function #2","name":"Group by Consecutive / Group Consecutive by Function","description":"group-by-consecutive","token":"※"}],"139":[{"overloads":"**Right Shift** (`num,num`): #1 >> #2\n**Append Spaces to Given Length** (`str,num`): Append spaces to string #1 until it is #2 characters long\n**Append Spaces to Given Length** (`num,str`): Append spaces to string #2 until it is #1 characters long\n**Append Spaces to Length of Second String** (`str,str`): Append spaces to string #1 until it is the length of #2","name":"Right Shift / Append Spaces to Given Length / Append Spaces to Length of Second String","description":"right-shift >>","token":"»"}],"23":[{"name":"Next Four Elements as Lambda","description":"Wrap #1, #2, #3, and #4 in a lambda and push it","overloads":"<tr><td>**Next Four Elements as Lambda**</td><td>`any,any,any,any`</td><td>Wrap #1, #2, #3, and #4 in a lambda and push it</td><td>`⑷+*~d = λ+*~d}`</td></tr>","token":"⑷","keywords":"****:"}],"55":[{"overloads":"7","name":"Numeric Literal","description":"\nThe number 7","token":"7"}],"114":[{"overloads":"**Digits, Lowercase, Uppercase**: Push \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" to the stack","name":"Digits, Lowercase, Uppercase","description":"&DIGITS-LOWERCASE-UPPERCASE","token":"kr"},{"overloads":"**Degrees to Radians** (`num`): Convert #1 from degrees to radians","name":"Degrees to Radians","description":"deg2rad deg-to-rad","token":"∆r"},{"overloads":"**Replace** (`nsl,nsl,nsl`): Replace all occurrences of #2 in #1 with #3\n**Zip-With** (`lst,lst,fun`): Zip #1 and #2 and apply #3 to each pair\n**Zip-With** (`lst,fun,lst`): Zip #1 and #2 and apply #3 to each pair\n**Zip-With** (`fun,lst,lst`): Zip #1 and #2 and apply #3 to each pair","name":"Replace / Zip-With","description":"replace","token":"r"}],"8":[{"overloads":"⎊<code>}","name":"Open Map Over Permutations Lambda","description":"map-permutations map-perms map-permutations< permutations<\nOpen a lambda that automatically maps over the permutations of the top of the stack","token":"⎊"}],"75":[{"overloads":"**Factors** (`num`): Get the factors of #1\n**Is Numeric** (`str`): Check if #1 is numeric","name":"Factors / Is Numeric","description":"factors divisors is-numeric? is-numeric","token":"K"}],"207":[{"overloads":"**Integer Divide** (`num,num`): #1 // #2","name":"Integer Divide","description":"integer-divide int-div //","token":"∻"}],"82":[{"overloads":"**Digits, Uppercase, Lowercase**: Push \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\" to the stack","name":"Digits, Uppercase, Lowercase","description":"&DIGITS-UPPERCASE-LOWERCASE","token":"kR"},{"overloads":"**Reshape** (`lst,lst[num]`): Reshape #1 to the shape #2","name":"Reshape","description":"reshape","token":"ÞR"},{"overloads":"**Real Part** (`num`): Real part of #1","name":"Real Part","description":"real-part","token":"∆R"},{"overloads":"**Range** (`num,num`): Range from #1 to #2, exclusive\n**Reduce** (`lst,fun`): Reduce #1 by function #2\n**Regex Match?** (`str,str`): Check if #2 matches #1","name":"Range / Reduce / Regex Match?","description":"range reduce regex-match?","token":"R"},{"overloads":"#:R<name>|#$restricted #=private #!public}","name":"Record Definition","description":"record\nDefine a record with members","token":"#::R"}],"214":[{"overloads":"**Trim** (`any,any`): Trim #1 of leading and trailing #2","name":"Trim","description":"trim","token":"⎶"},{"overloads":"**Edges** (`itr`): First and last element of #1\n**Real and Imaginary** (`num`): Real and imaginary parts of #1","name":"Edges / Real and Imaginary","description":"edges ends real-imaginary","token":"Þ⎶"},{"overloads":"**All Brackets**: Push \"{}[]<>()\" to the stack","name":"All Brackets","description":"&ALL-BRACKETS","token":"k⎶"}],"119":[{"overloads":"**Wrap in List** (`any`): Wrap #1 in a singleton list, creating a half pair","name":"Wrap in List","description":"wrap-in-list singleton","token":"w"},{"overloads":"**Ensure Wrapped** (`any`): Ensure #1 is wrapped in a list. Returns scalars wrapped in a list. Returns lists as-is","name":"Ensure Wrapped","description":"nest ensure-wrapped","token":"#w"}],"58":[{"overloads":"**Duplicate** (`any`): Push #1 twice to the stack: #1 -> #1 #1","name":"Duplicate","description":"dup duplicate","token":":"},{"overloads":"#::<mode><name>|<arg>|<arg>...|<code>}","name":"Element/Modifier Definition","description":"define\nDefine a custom element/modifier that can be used in programs","token":"#::"}],"235":[{"overloads":"**Logical Or** (`any,any`): Python style or - if #2 is true, return #2, else return #1\n**Short Circuit Or** (`fun,fun`): Short circuit or - if #2() is true, return #2(), else return #1()","name":"Logical Or / Short Circuit Or","description":"or !! logical-or","token":"∨"},{"overloads":"**Bitwise Or** (`num,num`): #1 | #2","name":"Bitwise Or","description":"bitwise-or","token":"∆∨"}],"246":[{"overloads":"**100**: Push 100 to the stack","name":"100","description":"100","token":"⑤"},{"overloads":"**8192**: Push 8192 to the stack","name":"8192","description":"8192","token":"k⑤"}],"151":[{"overloads":"**Rotate Stack Right**: Rotate the stack right","name":"Rotate Stack Right","description":"rotate-stack-right","token":"↝"}],"36":[{"overloads":"**Swap** (`any,any`): Swap #1 and #2 on the stack: #1 #2 -> #2 #1","name":"Swap","description":"swap","token":"$"},{"overloads":"#$<variable>","name":"Retrieve Variable","description":"$\nPush the value of a variable.","token":"#$"}],"168":[{"overloads":"**1048576 (2^20)**: Push 1048576 to the stack","name":"1048576 (2^20)","description":"1048576 2**20 2^20","token":"k²"},{"overloads":"**Square** (`num`): #1 ** 2\n**String Pairs** (`str`): Split #1 into pairs of characters","name":"Square / String Pairs","description":"square string-pairs","token":"²"}],"146":[{"overloads":"**0 Slice** (`itr,num`): First #2 elements of #1\n**0 Slice** (`num,itr`): First #1 elements of #2\n**APL Style Take** (`lst,lst[num]`): APL style take\n**Take While True** (`lst,fun`): Take elements from #1 while #2 is true\n**Take While True** (`fun,lst`): Take elements from #2 while #1 is true","name":"0 Slice / APL Style Take / Take While True","description":"0-slice take 0-take","token":"⊖"}],"30":[{"overloads":"**Multiplication** (`num,num`): #1 * #2 (#1 times #2)\n**String Repeat** (`str,num`): Repeat string #1 #2 times\n**String Repeat** (`num,str`): Repeat string #2 #1 times\n**Ring Translate** (`str,str`): Ring translate #1 according to #2. ","name":"Multiplication / String Repeat / Ring Translate","description":"multiply string-repeat ring-translate * times","token":"×"}],"51":[{"overloads":"**100000**: Push 100000 to the stack","name":"100000","description":"100000","token":"k3"},{"overloads":"3","name":"Numeric Literal","description":"\nThe number 3","token":"3"}],"190":[{"overloads":"**Vectorised Sums** (`lst`): Sum of each item in #1. Functionally equivalent to `¨∑`","name":"Vectorised Sums","description":"vectorised-sums v/+","token":"Ͼ"}],"183":[{"overloads":"**Equals** (`any,any`): Does #1 exactly equal #2","name":"Equals","description":"exact-equals eq+ ===","token":"≡"}],"19":[{"name":"Group By / Window Reduce","description":"Group items of the top of the stack by results of #1 / Reduce each overlapping window of size #1.arity with #1","overloads":"<tr><td>**Group By**</td><td>`mon`</td><td>Group items of the top of the stack by results of #1</td><td>`#[1\\|3\\|4\\|5\\|2\\|4#] ⁜e -> [[1,3],[4],[5],[2,4]]`</td></tr>\n<tr><td>**Window Reduce**</td><td>`dyd+`</td><td>Reduce each overlapping window of size #1.arity with #1</td><td>`#[1\\|2\\|3\\|4\\|5\\|6#] ⁜λ3\\|+} -> [6, 9, 12, 15]`</td></tr>","token":"⁜","keywords":"group-by: window-reduce:"}],"210":[{"overloads":"**Round** (`num`): Round #1 to the nearest integer, half-up\n**Is Lowercase** (`str`): Check if #1 is lowercase. With string.len > 1, vectorises over each character","name":"Round / Is Lowercase","description":"round lowercase?","token":"◌"},{"overloads":"**Directions List**: Push [[0, 1], [0, -1], [1, 0], [-1, 0]] to the stack (up, down, right, left in a 2D grid)","name":"Directions List","description":"&DIRECTIONS","token":"k◌"},{"overloads":"**Grid Neighbours Diagonals** (`lst`): Grid neighbours of #1 - up, down, left, right, and diagonals\n**Grid Neighbours Diagonals With Starting Direction** (`lst,num`): Grid neighbours of cells in #1 - right, down, left, up, and diagonals - start from direction #2 => 0: right, 1: down, 2: left, 3: up","name":"Grid Neighbours Diagonals / Grid Neighbours Diagonals With Starting Direction","description":"grid-neighbours-diagonals grid-neighbors-diagonals adjacent-cells-diagonals adj-cells-diagonals surrounding-cells-diagonals eight-cells","token":"Þ◌"}],"107":[{"overloads":"**Radiation Hardening Hello World cheese**: Push \"Hello, World!\" to the stack. Useful for radiation hardening hello worlds, because you can submit kkH as your answer.","name":"Radiation Hardening Hello World cheese","description":"&RDHW","token":"kk"},{"overloads":"k<character>","name":"Constant Digraphs","description":"\nUsed for constant-related digraphs","token":"k"}],"79":[{"overloads":"**Character to Unicode** (`str`): Unicode value of each letter in #1\n**Unicode to Character** (`num`): Character of each unicode value in #1","name":"Character to Unicode / Unicode to Character","description":"ord chr","token":"O"},{"overloads":"**Grid Neighbours Wrap** (`lst`): Grid neighbours of #1 - up, down, left, right - wrapping around\n**Grid Neighbours Wrap With Starting Direction** (`lst,num`): Grid neighbours of cells in #1 - right, down, left, up - wrapping around and start from direction #2 => 0: right, 1: down, 2: left, 3: up. Negative #2 does not include middle, positive #2 does","name":"Grid Neighbours Wrap / Grid Neighbours Wrap With Starting Direction","description":"grid-neighbours-wrap grid-neighbors-wrap adjacent-cells-wrap adj-cells-wrap surrounding-cells-wrap","token":"ÞO"}],"195":[{"overloads":"**Parity** (`num`): Parity of #1 (1 if odd, 0 if even) --> #1 % 2\n**Last String Half** (`str`): Last half of #1","name":"Parity / Last String Half","description":"parity bit last-half","token":"⍢"}],"94":[{"overloads":"**Reverse Stack**: Reverse the stack","name":"Reverse Stack","description":"reverse-stack","token":"^"},{"overloads":"**Uppercase Hex Digits**: Push \"0123456789ABCDEF\" to the stack","name":"Uppercase Hex Digits","description":"&UPPERCASE-HEX-DIGITS","token":"k^"}],"239":[{"overloads":"Ꮠ<character><character>","name":"Two Byte Number","description":"\nPush the next two bytes as a number, converted from bijective base 255 using the codepage","token":"Ꮠ"}],"242":[{"overloads":"**180**: Push 180 to the stack","name":"180","description":"180","token":"k①"},{"overloads":"**10**: Push 10 to the stack","name":"10","description":"10","token":"①"}],"4":[{"overloads":"ξ<code>}","name":"Stack Lambda","description":"lambda-stack\nOpen a lambda that automatically takes arguments from the stack","token":"ξ"}],"126":[{"name":"Filter / Peek","description":"Filter the top of the stack with #1 / Apply #1 without popping","overloads":"<tr><td>**Filter**</td><td>`mon`</td><td>Filter the top of the stack with #1</td><td>`#[1\\|2\\|3\\|4\\|5#] ~2≛ -> [2, 4]`</td></tr>\n<tr><td>**Peek**</td><td>`dyd+`</td><td>Apply #1 without popping</td><td>`3 4 5 ~+ -> 3 4 9`</td></tr>","token":"~","keywords":"filter: without-popping: peek:"},{"overloads":"#:~<name>","name":"Retrieve Original Element","description":"$.\nCall the original, vyxal defined, meaning of an element. Useful for when you want to define a new element with the same name as a built-in one","token":"#:~"}],"136":[{"overloads":"**Multiset XOR** (`lst,lst`): Multiset XOR of #1 and #2","name":"Multiset XOR","description":"multiset-xor mset-xor","token":"Þ⊍"},{"overloads":"**Bitwise Xor** (`num,num`): #1 ^ #2","name":"Bitwise Xor","description":"bitwise-xor","token":"∆⊍"},{"overloads":"**Set XOR** (`lst,lst`): Set XOR of #1 and #2","name":"Set XOR","description":"set-xor","token":"⊍"}],"15":[{"overloads":"**Input Count**: Push the number of inputs to the stack","name":"Input Count","description":"input-count","token":"#¿"},{"name":"If","description":"If the top of the stack is truthy, apply #1","overloads":"<tr><td>**If**</td><td>`any`</td><td>If the top of the stack is truthy, apply #1</td><td>`3 1 ¿d -> 6`</td></tr>","token":"¿","keywords":"if:"}],"68":[{"overloads":"**Line Chars**: Push \"\\|/-_\" to the stack - useful for drawing lines","name":"Line Chars","description":"&LINE-CHARS","token":"kD"},{"overloads":"**Triplicate** (`any`): Push #1 thrice to the stack: #1 -> #1 #1 #1","name":"Triplicate","description":"triplicate","token":"D"}],"62":[{"overloads":"**Close Brackets**: Push \")]}>\"","name":"Close Brackets","description":"&CLOSE-FISH-BRACKETS","token":"k>"},{"overloads":"**Greater Than** (`scl,scl`): #1 > #2\n**Increment Until False** (`fun,num`): Increment #2 until #1 is false\n**Increment Until False** (`num,fun`): Increment #1 until #2 is false","name":"Greater Than / Increment Until False","description":"greater-than > gt ++-until-false","token":">"},{"overloads":"<function> #> <variable>","name":"Augmented Assignment","description":":>\nApply a function to a variable value and store the result in the same variable.","token":"#>"}],"178":[{"overloads":"**Absolute Value** (`num`): Absolute value of #1\n**Keep Letters** (`str`): Keep only the letters of #1\n**First Positive Integer Where Function is True** (`fun`): First positive integer where #1 is true (>= 1)","name":"Absolute Value / Keep Letters / First Positive Integer Where Function is True","description":"abs absolute-value keep-letters first>0","token":"⦷"}],"131":[{"overloads":"**Product** (`lst`): Product of #1\n**Number to Binary as String** (`num`): Convert #1 to binary as a string\n**First Integer Where Predicate is True** (`fun`): First integer where #1 is true (positive or negative)","name":"Product / Number to Binary as String / First Integer Where Predicate is True","description":"product product-of */ first-int","token":"Π"}],"47":[{"name":"Invariant By / Foldl","description":"Is the top of the stack invariant under #1? (i.e. #1(x) == x) / Fold left with #1","overloads":"<tr><td>**Invariant By**</td><td>`mon`</td><td>Is the top of the stack invariant under #1? (i.e. #1(x) == x)</td><td>`0 /d -> 1`</td></tr>\n<tr><td>**Foldl**</td><td>`dyd+`</td><td>Fold left with #1</td><td>`#[1\\|2\\|3\\|4#] /+ -> 10`</td></tr>","token":"/","keywords":"invariant-by: foldl:"}],"163":[{"overloads":"**Halve** (`num`): #1 / 2\n**Two String Halves** (`str`): Split #1 in half","name":"Halve / Two String Halves","description":"half halve","token":"½"},{"overloads":"**[1, 2]**: Push the list [1, 2] to the stack","name":"[1, 2]","description":"1~2","token":"k½"}],"200":[{"overloads":"**Cartesian Power** (`any,num`): Cartesian power of #1 to the power of #2\n**Cartesian Power** (`num,any`): Cartesian power of #2 to the power of #1\n**Regex Index** (`str,str`): Return first index of pattern match #2 in target string #1, -1 if not found\n**Self-Cartesian Power** (`itr,any`): Push #1, and then push the cartesian product of #2 with itself","name":"Cartesian Power / Regex Index / Self-Cartesian Power","description":"cartesian-power regex-index","token":"⊠"}],"122":[{"overloads":"**Reverse Lowercase**: Push \"zyxwvutsrqponmlkjihgfedcba\" to the stack","name":"Reverse Lowercase","description":"&REVERSE-LOWERCASE","token":"kz"},{"overloads":"**Zip With Filler** (`lst,any`): Transpose #1, filling empty spaces with #2","name":"Zip With Filler","description":"zip-with-filler","token":"z"}],"83":[{"overloads":"**Hyperbolic Sine** (`num`): Hyperbolic sine of #1","name":"Hyperbolic Sine","description":"sinh hyperbolic-sine","token":"∆S"},{"overloads":"**Sort** (`itr`): Sort #1","name":"Sort","description":"sort","token":"S"}],"215":[{"overloads":"**Subset?** (`lst,lst`): Is the shallower list a subset of the deeper list? Checks windows corresponding to the length of the shallower list","name":"Subset?","description":"subset?","token":"⊆"}],"222":[{"overloads":"**Decrement** (`num`): #1 - 1\n**Pad to 8** (`str`): Pad #1 to a length that is a multiple of 8 with '0's","name":"Decrement / Pad to 8","description":"decrement -- pad-to-8 dec pad-8 pad-to-byte","token":"‹"}],"232":[{"overloads":"**Vectorised Lengths** (`lst`): Length of each element in #1","name":"Vectorised Lengths","description":"vlen lengths","token":"Ŀ"}],"100":[{"overloads":"**Digits**: Push \"0123456789\" to the stack","name":"Digits","description":"&DIGITS","token":"kd"},{"overloads":"**Radians to Degrees** (`num`): Convert #1 from radians to degrees","name":"Radians to Degrees","description":"rad2deg rad-to-deg","token":"∆d"},{"overloads":"**Double** (`num`): #1 * 2\n**Double** (`str`): Append a copy of #1 to itself","name":"Double / Double","description":"double","token":"d"}],"90":[{"overloads":"**Reverse Uppercase**: Push \"ZYXWVUTSRQPONMLKJIHGFEDCBA\" to the stack","name":"Reverse Uppercase","description":"&REVERSE-UPPERCASE","token":"kZ"},{"overloads":"**Zip** (`lst,lst`): Zip #1 and #2","name":"Zip","description":"zip","token":"Z"}],"111":[{"overloads":"**Octal Digits**: Push \"01234567\" to the stack","name":"Octal Digits","description":"&OCTAL-DIGITS","token":"ko"},{"overloads":"**Grid Neighbours** (`lst`): Grid neighbours of #1 - up, down, left, right\n**Grid Neighbours With Starting Direction** (`lst,num`): Grid neighbours of cells in #1 - right, down, left, up - start from direction #2 => 0: right, 1: down, 2: left, 3: up","name":"Grid Neighbours / Grid Neighbours With Starting Direction","description":"grid-neighbours grid-neighbors adjacent-cells adj-cells surrounding-cells","token":"Þo"},{"overloads":"**Windows** (`lst,lst[num]`): Get overlapping windows of #1 with a window of size #2\n**Overlapping Slices** (`any,num`): Get overlapping pairs of iterable(#1) with a window of size #2\n**Overlapping Slices** (`num,any`): Get overlapping pairs of iterable(#2) with a window of size #1\n**Reduce Overlapping Slices** (`lst,fun`): Reduce overlapping slices of length #2.arity in #1 by function #2\n**Reduce Overlapping Slices** (`fun,lst`): Reduce overlapping slices of length #2.arity in #1 by function #2\n**Reduce Set-Sized Overlapping Slices** (`lst,num,fun`): Reduce overlapping slices of length #2 in #1 by function #3\n**Reduce Set-Sized Overlapping Slices** (`lst,fun,num`): Reduce overlapping slices of length #3 in #1 by function #2","name":"Windows / Overlapping Slices / Reduce Overlapping Slices / Reduce Set-Sized Overlapping Slices / Reduce Set-Sized Overlapping Slices","description":"overlapping-sliding-window windows reduce-overlaps-by","token":"o"}],"254":[{"overloads":"**Join on Newlines** (`lst`): Join #1 on newlines\n**Push Context Variable N if 1** (`num`): Push the context variable N if #1 is 1","name":"Join on Newlines / Push Context Variable N if 1","description":"join-on-newlines *newline one?->n","token":"”"},{"overloads":"\"<compressed string>”","name":"Dictionary Compressed String","description":"\nDecompress and push a string using SSS compression, shamelessly stolen from Jelly","token":"”"}],"227":[{"overloads":"**Mask** (`any,any`): Keep elements of #1 where the corresponding element of #2 is truthy","name":"Mask","description":"mask","token":"▲"}]}