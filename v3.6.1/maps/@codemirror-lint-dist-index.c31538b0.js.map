{"version":3,"file":"scripts/vendor/@codemirror-lint-dist-index.c31538b0.js","mappings":"wJAIA,MAAMA,EACF,WAAAC,CAAYC,EAAMC,EAAIC,GAClBC,KAAKH,KAAOA,EACZG,KAAKF,GAAKA,EACVE,KAAKD,WAAaA,CACtB,EAEJ,MAAME,EACF,WAAAL,CAAYM,EAAaC,EAAOC,GAC5BJ,KAAKE,YAAcA,EACnBF,KAAKG,MAAQA,EACbH,KAAKI,SAAWA,CACpB,CACA,WAAOC,CAAKH,EAAaC,EAAOG,GAE5B,IAAIC,EAAoBL,EACpBM,EAAmBF,EAAMG,MAAMC,GAAYC,aAC3CH,IACAD,EAAoBC,EAAiBD,EAAmBD,IAC5D,IAAIM,EAAS,KAAWC,IAAIN,EAAkBO,KAAKC,GAExCA,EAAElB,MAAQkB,EAAEjB,IAAOiB,EAAElB,MAAQkB,EAAEjB,GAAK,GAAKQ,EAAMU,IAAIC,OAAOF,EAAElB,MAAMC,IAAMiB,EAAElB,KAC3E,KAAWqB,OAAO,CAChBA,OAAQ,IAAIC,EAAiBJ,GAC7BhB,WAAYgB,IACbK,MAAML,EAAElB,MACT,KAAWwB,KAAK,CACdC,WAAY,CAAEC,MAAO,6BAA+BR,EAAES,UAAYT,EAAEU,UAAY,IAAMV,EAAEU,UAAY,KACpG1B,WAAYgB,IACbK,MAAML,EAAElB,KAAMkB,EAAEjB,OACvB,GACJ,OAAO,IAAIG,EAAUW,EAAQT,EAAOuB,EAAed,GACvD,EAEJ,SAASc,EAAexB,EAAaH,EAAa,KAAM4B,EAAQ,GAC5D,IAAIC,EAAQ,KAOZ,OANA1B,EAAY2B,QAAQF,EAAO,KAAK,CAAC9B,EAAMC,GAAMgC,WACzC,IAAI/B,GAAc+B,EAAK/B,YAAcA,EAGrC,OADA6B,EAAQ,IAAIjC,EAAmBE,EAAMC,EAAIgC,EAAK/B,aACvC,CAAK,IAET6B,CACX,CACA,SAASG,EAAYC,EAAIC,GACrB,IAAIpC,EAAOoC,EAAQC,IAAKpC,EAAKmC,EAAQE,KAAOtC,EACxCuC,EAASJ,EAAG1B,MAAMG,MAAMC,GAAY2B,OAAOL,EAAInC,EAAMC,GACzD,GAAc,MAAVsC,EACA,OAAOA,EACX,IAAIE,EAAON,EAAGO,WAAWvB,IAAIC,OAAOgB,EAAQC,KAC5C,SAAUF,EAAGQ,QAAQC,MAAKC,GAAKA,EAAEC,GAAGC,OAA0BZ,EAAGa,QAAQC,aAAaR,EAAKzC,KAAMkD,KAAKC,IAAIV,EAAKxC,GAAIA,IACvH,CACA,SAASmD,EAAgB3C,EAAOkC,GAC5B,OAAOlC,EAAM4C,MAAMC,GAAW,GAASX,EAAUA,EAAQY,OAAO,KAAYC,aAAaC,GAAGC,GAChG,CAeA,MAAMX,EAAoC,KAAYY,SAChDC,EAA2B,KAAYD,SACvCE,EAAkC,KAAYF,SAC9CL,EAAyB,KAAWK,OAAO,CAC7CG,OAAM,IACK,IAAI1D,EAAU,KAAW2D,KAAM,KAAM,MAEhD,MAAAC,CAAOC,EAAO9B,GACV,GAAIA,EAAG+B,YAAcD,EAAM5D,YAAY8D,KAAM,CACzC,IAAIC,EAASH,EAAM5D,YAAYY,IAAIkB,EAAGa,SAAUzC,EAAW,KAAMD,EAAQ2D,EAAM3D,MAC/E,GAAI2D,EAAM1D,SAAU,CAChB,IAAI8D,EAASlC,EAAGa,QAAQsB,OAAOL,EAAM1D,SAASP,KAAM,GACpDO,EAAWsB,EAAeuC,EAAQH,EAAM1D,SAASL,WAAYmE,IAAWxC,EAAeuC,EAAQ,KAAMC,EACzG,EACKD,EAAOD,MAAQ7D,GAAS6B,EAAG1B,MAAMG,MAAMC,GAAY0D,YACpDjE,EAAQ,MACZ2D,EAAQ,IAAI7D,EAAUgE,EAAQ9D,EAAOC,EACzC,CACA,IAAK,IAAIiE,KAAUrC,EAAGQ,QAClB,GAAI6B,EAAO1B,GAAGC,GAAuB,CACjC,IAAIzC,EAAS6B,EAAG1B,MAAMG,MAAMC,GAAY0D,UAA0BC,EAAOP,MAAMQ,OAASC,EAAUC,KAAO,KAArDV,EAAM3D,MAC1D2D,EAAQ7D,EAAUI,KAAKgE,EAAOP,MAAO3D,EAAO6B,EAAG1B,MACnD,MACS+D,EAAO1B,GAAGc,GACfK,EAAQ,IAAI7D,EAAU6D,EAAM5D,YAAamE,EAAOP,MAAQS,EAAUC,KAAO,KAAMV,EAAM1D,UAEhFiE,EAAO1B,GAAGe,KACfI,EAAQ,IAAI7D,EAAU6D,EAAM5D,YAAa4D,EAAM3D,MAAOkE,EAAOP,QAGrE,OAAOA,CACX,EACAW,QAASC,GAAK,CAAC,KAAU7E,KAAK6E,GAAGC,GAAOA,EAAIxE,QACxC,KAAWyE,YAAY/E,KAAK6E,GAAGG,GAAKA,EAAE3E,iBAS9C,MAAM4E,EAA0B,KAAWzD,KAAK,CAAEE,MAAO,qCACzD,SAASwD,EAAYC,EAAM9C,EAAK+C,GAC5B,IAAI,YAAE/E,GAAgB8E,EAAK1E,MAAM4C,MAAMC,GACnCvB,EAAQ,GAAIsD,EAAa,IAAKC,EAAW,EAC7CjF,EAAY2B,QAAQK,GAAO+C,EAAO,EAAI,EAAI,GAAI/C,GAAO+C,EAAO,EAAI,EAAI,IAAI,CAACpF,EAAMC,GAAMgC,WAC7EI,GAAOrC,GAAQqC,GAAOpC,IACrBD,GAAQC,IAAQoC,EAAMrC,GAAQoF,EAAO,KAAO/C,EAAMpC,GAAMmF,EAAO,MAChErD,EAAMwD,KAAKtD,EAAK/B,YAChBmF,EAAanC,KAAKsC,IAAIxF,EAAMqF,GAC5BC,EAAWpC,KAAKC,IAAIlD,EAAIqF,GAC5B,IAEJ,IAAI3E,EAAmBwE,EAAK1E,MAAMG,MAAMC,GAAY4E,cAGpD,OAFI9E,IACAoB,EAAQpB,EAAiBoB,EAAOoD,EAAK1E,QACpCsB,EAAM0C,OAEJ,CACHpC,IAAKgD,EACL/C,IAAKgD,EACLI,MAAOP,EAAK1E,MAAMU,IAAIC,OAAOiE,GAAYpF,GAAKqF,EAC9CxB,OAAM,KACK,CAAE6B,IAAKC,EAAmBT,EAAMpD,MANpC,IASf,CACA,SAAS6D,EAAmBT,EAAM9E,GAC9B,OAAO,OAAI,KAAM,CAAEqB,MAAO,mBAAqBrB,EAAYY,KAAIC,GAAK2E,EAAiBV,EAAMjE,GAAG,KAClG,CAIA,MAYM4E,EAAkBX,IACpB,IAAI9B,EAAQ8B,EAAK1E,MAAM4C,MAAMC,GAAW,GACxC,SAAKD,IAAUA,EAAM/C,SAErB6E,EAAKY,SAAS,CAAEpD,QAASiB,EAAYH,IAAG,MACjC,EAAI,EAgDTuC,EAAa,CACf,CAAEC,IAAK,cAAeC,IAlEHf,IACnB,IAAI9B,EAAQ8B,EAAK1E,MAAM4C,MAAMC,GAAW,GACnCD,GAAUA,EAAM/C,OACjB6E,EAAKY,SAAS,CAAEpD,QAASS,EAAgB+B,EAAK1E,MAAO,CAACmD,EAAYH,IAAG,OACzE,IAAInD,GAAQ,QAAS6E,EAAMT,EAAUC,MAGrC,OAFIrE,GACAA,EAAMqF,IAAIQ,cAAc,qBAAqBC,SAC1C,CAAI,EA2D+BC,gBAAgB,GAC1D,CAAEJ,IAAK,KAAMC,IA7COf,IACpB,IAAI9B,EAAQ8B,EAAK1E,MAAM4C,MAAMC,GAAW,GACxC,IAAKD,EACD,OAAO,EACX,IAAIiD,EAAMnB,EAAK1E,MAAM8F,UAAUC,KAAMC,EAAOpD,EAAMhD,YAAYqG,KAAKJ,EAAIrG,GAAK,GAC5E,SAAKwG,EAAKxC,QACNwC,EAAOpD,EAAMhD,YAAYqG,KAAK,IACzBD,EAAKxC,OAASwC,EAAKzG,MAAQsG,EAAItG,MAAQyG,EAAKxG,IAAMqG,EAAIrG,OAG/DkF,EAAKY,SAAS,CAAEQ,UAAW,CAAEI,OAAQF,EAAKzG,KAAM4G,KAAMH,EAAKxG,IAAM4G,gBAAgB,KAC1E,EAAI,IAoFThG,EAA0B,KAAM8C,OAAO,CACzCmD,QAAQC,GACGC,OAAOC,OAAO,CAAEC,QAASH,EAAM9F,KAAIkG,GAAKA,EAAEC,SAAQC,QAAOC,GAAU,MAALA,MAAc,QAAcP,EAAM9F,KAAIkG,GAAKA,EAAEI,SAAS,CACvHC,MAAO,IACP1G,aAAc,KACd2E,cAAe,KACfgC,aAAc,KACdjF,OAAQ,IAAM,MACf,CACCiF,aAAc,CAACC,EAAGC,IAAOD,EAASC,EAAQC,GAAKF,EAAEE,IAAMD,EAAEC,GAAnBF,EAATC,OA0BzC,SAASE,EAAWC,GAChB,IAAIC,EAAW,GACf,GAAID,EACAA,EAAS,IAAK,IAAI,KAAEE,KAAUF,EAAS,CACnC,IAAK,IAAIX,EAAI,EAAGA,EAAIa,EAAKvD,OAAQ0C,IAAK,CAClC,IAAIc,EAAKD,EAAKb,GACd,GAAI,WAAWe,KAAKD,KAAQF,EAASnF,MAAKuF,GAAKA,EAAEC,eAAiBH,EAAGG,gBAAgB,CACjFL,EAASxC,KAAK0C,GACd,SAASH,CACb,CACJ,CACAC,EAASxC,KAAK,GAClB,CACJ,OAAOwC,CACX,CACA,SAASlC,EAAiBV,EAAMjF,EAAYmI,GACxC,IAAIC,EACJ,IAAIC,EAAOF,EAAUR,EAAW3H,EAAW4H,SAAW,GACtD,OAAO,OAAI,KAAM,CAAEpG,MAAO,+BAAiCxB,EAAWyB,WAAY,OAAI,OAAQ,CAAED,MAAO,qBAAuBxB,EAAWsI,cAAgBtI,EAAWsI,cAAcrD,GAAQjF,EAAWuI,SAAwC,QAA7BH,EAAKpI,EAAW4H,eAA4B,IAAPQ,OAAgB,EAASA,EAAGrH,KAAI,CAACyH,EAAQvB,KAC1R,IAAIwB,GAAQ,EAAOC,EAAS/F,IAExB,GADAA,EAAEwD,iBACEsC,EACA,OACJA,GAAQ,EACR,IAAI5G,EAAQF,EAAesD,EAAK1E,MAAM4C,MAAMC,GAAWjD,YAAaH,GAChE6B,GACA2G,EAAOG,MAAM1D,EAAMpD,EAAM/B,KAAM+B,EAAM9B,GAAG,GAE5C,KAAE+H,GAASU,EAAQI,EAAWP,EAAKpB,GAAKa,EAAKe,QAAQR,EAAKpB,KAAO,EACjE6B,EAAUF,EAAW,EAAId,EAAO,CAACA,EAAKiB,MAAM,EAAGH,IAC/C,OAAI,IAAKd,EAAKiB,MAAMH,EAAUA,EAAW,IACzCd,EAAKiB,MAAMH,EAAW,IAC1B,OAAO,OAAI,SAAU,CACjBI,KAAM,SACNxH,MAAO,sBACPyH,QAASP,EACTQ,YAAaR,EACb,aAAc,YAAYZ,IAAOc,EAAW,EAAI,GAAK,iBAAiBP,EAAKpB,WAC5E6B,EAAQ,IACX9I,EAAWkH,SAAU,OAAI,MAAO,CAAE1F,MAAO,uBAAyBxB,EAAWkH,QACrF,CACA,MAAM9F,UAAyB,KAC3B,WAAAvB,CAAYG,GACRmJ,QACAlJ,KAAKD,WAAaA,CACtB,CACA,EAAAoJ,CAAGC,GAAS,OAAOA,EAAMrJ,YAAcC,KAAKD,UAAY,CACxD,KAAAsJ,GACI,OAAO,OAAI,OAAQ,CAAE9H,MAAO,6BAA+BvB,KAAKD,WAAWyB,UAC/E,EAEJ,MAAM8H,EACF,WAAA1J,CAAYoF,EAAMjF,GACdC,KAAKD,WAAaA,EAClBC,KAAKuJ,GAAK,QAAUxG,KAAKyG,MAAsB,WAAhBzG,KAAK0G,UAAuBC,SAAS,IACpE1J,KAAKwF,IAAME,EAAiBV,EAAMjF,GAAY,GAC9CC,KAAKwF,IAAI+D,GAAKvJ,KAAKuJ,GACnBvJ,KAAKwF,IAAImE,aAAa,OAAQ,SAClC,EAEJ,MAAMpF,EACF,WAAA3E,CAAYoF,GACRhF,KAAKgF,KAAOA,EACZhF,KAAK4J,MAAQ,GAyCb5J,KAAK6J,MAAO,OAAI,KAAM,CAClBC,SAAU,EACVC,KAAM,UACN,aAAc/J,KAAKgF,KAAK1E,MAAM0J,OAAO,eACrCC,UA5CaC,IACb,GAAqB,IAAjBA,EAAMC,QACNxE,EAAe3F,KAAKgF,MACpBhF,KAAKgF,KAAKiB,aAET,GAAqB,IAAjBiE,EAAMC,SAAkC,IAAjBD,EAAMC,QAClCnK,KAAKoK,eAAepK,KAAKqK,cAAgB,EAAIrK,KAAK4J,MAAMtF,QAAUtE,KAAK4J,MAAMtF,aAE5E,GAAqB,IAAjB4F,EAAMC,SAAkC,IAAjBD,EAAMC,QAClCnK,KAAKoK,eAAepK,KAAKqK,cAAgB,GAAKrK,KAAK4J,MAAMtF,aAExD,GAAqB,IAAjB4F,EAAMC,QACXnK,KAAKoK,cAAc,QAElB,GAAqB,IAAjBF,EAAMC,QACXnK,KAAKoK,cAAcpK,KAAK4J,MAAMtF,OAAS,QAEtC,GAAqB,IAAjB4F,EAAMC,QACXnK,KAAKgF,KAAKiB,YAET,MAAIiE,EAAMC,SAAW,IAAMD,EAAMC,SAAW,IAAMnK,KAAKqK,eAAiB,GAUzE,OAV4E,CAC5E,IAAI,WAAEtK,GAAeC,KAAK4J,MAAM5J,KAAKqK,eAAgBjC,EAAOV,EAAW3H,EAAW4H,SAClF,IAAK,IAAIX,EAAI,EAAGA,EAAIoB,EAAK9D,OAAQ0C,IAC7B,GAAIoB,EAAKpB,GAAGsD,cAAcC,WAAW,IAAML,EAAMC,QAAS,CACtD,IAAIvI,EAAQF,EAAe1B,KAAKgF,KAAK1E,MAAM4C,MAAMC,GAAWjD,YAAaH,GACrE6B,GACA7B,EAAW4H,QAAQX,GAAG0B,MAAM1D,EAAMpD,EAAM/B,KAAM+B,EAAM9B,GAC5D,CACR,CAGA,CACAoK,EAAMhE,gBAAgB,EAatB8C,QAXWkB,IACX,IAAK,IAAIlD,EAAI,EAAGA,EAAIhH,KAAK4J,MAAMtF,OAAQ0C,IAC/BhH,KAAK4J,MAAM5C,GAAGxB,IAAIgF,SAASN,EAAMO,SACjCzK,KAAKoK,cAAcpD,EAC3B,IASJhH,KAAKwF,KAAM,OAAI,MAAO,CAAEjE,MAAO,iBAAmBvB,KAAK6J,MAAM,OAAI,SAAU,CACvEd,KAAM,SACNlB,KAAM,QACN,aAAc7H,KAAKgF,KAAK1E,MAAM0J,OAAO,SACrChB,QAAS,IAAMrD,EAAe3F,KAAKgF,OACpC,MACHhF,KAAK6D,QACT,CACA,iBAAIwG,GACA,IAAIjK,EAAWJ,KAAKgF,KAAK1E,MAAM4C,MAAMC,GAAW/C,SAChD,IAAKA,EACD,OAAQ,EACZ,IAAK,IAAI4G,EAAI,EAAGA,EAAIhH,KAAK4J,MAAMtF,OAAQ0C,IACnC,GAAIhH,KAAK4J,MAAM5C,GAAGjH,YAAcK,EAASL,WACrC,OAAOiH,EACf,OAAQ,CACZ,CACA,MAAAnD,GACI,IAAI,YAAE3D,EAAW,SAAEE,GAAaJ,KAAKgF,KAAK1E,MAAM4C,MAAMC,GAClD6D,EAAI,EAAG0D,GAAY,EAAOC,EAAkB,KA+BhD,IA9BAzK,EAAY2B,QAAQ,EAAG7B,KAAKgF,KAAK1E,MAAMU,IAAIsD,QAAQ,CAACsG,EAAQC,GAAQ/I,WAChE,IAAgBgJ,EAAZlJ,GAAS,EACb,IAAK,IAAImJ,EAAI/D,EAAG+D,EAAI/K,KAAK4J,MAAMtF,OAAQyG,IACnC,GAAI/K,KAAK4J,MAAMmB,GAAGhL,YAAc+B,EAAK/B,WAAY,CAC7C6B,EAAQmJ,EACR,KACJ,CACAnJ,EAAQ,GACRkJ,EAAO,IAAIxB,EAAUtJ,KAAKgF,KAAMlD,EAAK/B,YACrCC,KAAK4J,MAAMoB,OAAOhE,EAAG,EAAG8D,GACxBJ,GAAY,IAGZI,EAAO9K,KAAK4J,MAAMhI,GACdA,EAAQoF,IACRhH,KAAK4J,MAAMoB,OAAOhE,EAAGpF,EAAQoF,GAC7B0D,GAAY,IAGhBtK,GAAY0K,EAAK/K,YAAcK,EAASL,WACnC+K,EAAKtF,IAAIyF,aAAa,mBACvBH,EAAKtF,IAAImE,aAAa,gBAAiB,QACvCgB,EAAkBG,GAGjBA,EAAKtF,IAAIyF,aAAa,kBAC3BH,EAAKtF,IAAI0F,gBAAgB,iBAE7BlE,GAAG,IAEAA,EAAIhH,KAAK4J,MAAMtF,UAAiC,GAArBtE,KAAK4J,MAAMtF,QAAetE,KAAK4J,MAAM,GAAG7J,WAAWF,KAAO,IACxF6K,GAAY,EACZ1K,KAAK4J,MAAMuB,MAEU,GAArBnL,KAAK4J,MAAMtF,SACXtE,KAAK4J,MAAMxE,KAAK,IAAIkE,EAAUtJ,KAAKgF,KAAM,CACrCnF,MAAO,EAAGC,IAAK,EACf0B,SAAU,OACV8G,QAAStI,KAAKgF,KAAK1E,MAAM0J,OAAO,qBAEpCU,GAAY,GAEZC,GACA3K,KAAK6J,KAAKF,aAAa,wBAAyBgB,EAAgBpB,IAChEvJ,KAAKgF,KAAKoG,eAAe,CACrBtF,IAAK9F,KACLqL,KAAM,KAAM,CAAGlF,IAAKwE,EAAgBnF,IAAI8F,wBAAyBnL,MAAOH,KAAK6J,KAAKyB,0BAClFC,MAAO,EAAGpF,MAAKhG,YACX,IAAIqL,EAASrL,EAAMsL,OAASzL,KAAK6J,KAAK6B,aAClCvF,EAAIwF,IAAMxL,EAAMwL,IAChB3L,KAAK6J,KAAK+B,YAAczL,EAAMwL,IAAMxF,EAAIwF,KAAOH,EAC1CrF,EAAI0F,OAAS1L,EAAM0L,SACxB7L,KAAK6J,KAAK+B,YAAczF,EAAI0F,OAAS1L,EAAM0L,QAAUL,EAAM,KAIlExL,KAAKqK,cAAgB,GAC1BrK,KAAK6J,KAAKqB,gBAAgB,yBAE1BR,GACA1K,KAAK8L,MACb,CACA,IAAAA,GACI,IAAIC,EAAS/L,KAAK6J,KAAKmC,WACvB,SAASC,IACL,IAAIC,EAAOH,EACXA,EAASG,EAAKC,YACdD,EAAKE,QACT,CACA,IAAK,IAAItB,KAAQ9K,KAAK4J,MAClB,GAAIkB,EAAKtF,IAAI6G,YAAcrM,KAAK6J,KAAM,CAClC,KAAOkC,GAAUjB,EAAKtF,KAClByG,IACJF,EAASjB,EAAKtF,IAAI2G,WACtB,MAEInM,KAAK6J,KAAKyC,aAAaxB,EAAKtF,IAAKuG,GAGzC,KAAOA,GACHE,GACR,CACA,aAAA7B,CAAcC,GACV,GAAIrK,KAAKqK,cAAgB,EACrB,OACJ,IACIjE,EAAY1E,EADJ1B,KAAKgF,KAAK1E,MAAM4C,MAAMC,GACGjD,YAAaF,KAAK4J,MAAMS,GAAetK,YACvEqG,GAELpG,KAAKgF,KAAKY,SAAS,CACfQ,UAAW,CAAEI,OAAQJ,EAAUvG,KAAM4G,KAAML,EAAUtG,IACrD4G,gBAAgB,EAChBlE,QAASkB,EAAmBJ,GAAG8C,IAEvC,CACA,WAAO5B,CAAKQ,GAAQ,OAAO,IAAIT,EAAUS,EAAO,EAEpD,SAASuH,EAAIC,EAASC,EAAQ,uBAC1B,MAAO,mEAAmEA,KAASC,mBAAmBF,YAC1G,CACA,SAASG,EAAUC,GACf,OAAOL,EAAI,qDAAqDK,qCAA0C,uBAC9G,CACA,MAAMC,EAAyB,KAAWA,UAAU,CAChD,iBAAkB,CACdC,QAAS,kBACTC,WAAY,OACZC,QAAS,QACTC,WAAY,YAEhB,uBAAwB,CAAEC,WAAY,kBACtC,yBAA0B,CAAEA,WAAY,oBACxC,sBAAuB,CAAEA,WAAY,kBACrC,sBAAuB,CAAEA,WAAY,kBACrC,uBAAwB,CACpBC,KAAM,UACNC,OAAQ,OACRN,QAAS,UACTO,gBAAiB,OACjBT,MAAO,QACPU,aAAc,MACdP,WAAY,MACZQ,OAAQ,WAEZ,uBAAwB,CACpBC,SAAU,MACVC,QAAS,IAEb,gBAAiB,CACbC,mBAAoB,cACpBC,iBAAkB,WAClBC,cAAe,SAEnB,sBAAuB,CAAEC,gBAA8BlB,EAAU,SACjE,wBAAyB,CAAEkB,gBAA8BlB,EAAU,WACnE,qBAAsB,CAAEkB,gBAA8BlB,EAAU,SAChE,qBAAsB,CAAEkB,gBAA8BlB,EAAU,SAChE,uBAAwB,CAAEU,gBAAiB,aAC3C,mBAAoB,CAChBP,QAAS,EACTgB,OAAQ,GAEZ,gBAAiB,CACbC,SAAU,WACV,UAAW,CACPvB,QAAS,KACTuB,SAAU,WACVlC,OAAQ,EACRmC,KAAM,OACNd,WAAY,wBACZe,YAAa,wBACbC,aAAc,mBAGtB,wBAAyB,CACrB,UAAW,CAAEC,kBAAmB,WAEpC,qBAAsB,CAClB,UAAW,CAAEA,kBAAmB,SAEpC,qBAAsB,CAClB,UAAW,CAAEA,kBAAmB,SAEpC,0BAA2B,CACvBJ,SAAU,WACV,OAAQ,CACJK,UAAW,QACXC,UAAW,OACX,oBAAqB,CACjBhB,gBAAiB,OACjB,MAAO,CAAEiB,eAAgB,cAE7B,0BAA2B,CACvBC,oBAAqB,OACrBlB,gBAAiB,YACjBmB,eAAgB,QAChB5B,MAAO,iBAEX,MAAO,CAAE0B,eAAgB,QACzBxB,QAAS,EACTgB,OAAQ,GAEZ,iBAAkB,CACdC,SAAU,WACVpC,IAAK,IACL8C,MAAO,MACPC,WAAY,UACZtB,OAAQ,OACRD,KAAM,UACNL,QAAS,EACTgB,OAAQ,MAOW,KA4E/B,MAqDMvK,EAAiB,CACnBJ,EACa,KAAWyB,YAAY+J,QAAQ,CAACxL,IAAY7C,IACrD,IAAI,SAAEF,EAAQ,MAAED,GAAUG,EAAM4C,MAAMC,GACtC,OAAQ/C,GAAaD,GAASC,EAASP,MAAQO,EAASN,GAAuB,KAAWe,IAAI,CAC1FiE,EAAW1D,MAAMhB,EAASP,KAAMO,EAASN,MADgB,KAAW8D,IAEtE,KAEO,QAAamB,EAAa,CAAE1C,OAAQN,IACjD8K,E","sources":["webpack:///./node_modules/@codemirror/lint/dist/index.js"],"sourcesContent":["import { Decoration, showPanel, EditorView, ViewPlugin, logException, gutter, showTooltip, hoverTooltip, getPanel, WidgetType, GutterMarker } from '@codemirror/view';\nimport { StateEffect, StateField, Facet, combineConfig, RangeSet } from '@codemirror/state';\nimport elt from 'crelt';\n\nclass SelectedDiagnostic {\n    constructor(from, to, diagnostic) {\n        this.from = from;\n        this.to = to;\n        this.diagnostic = diagnostic;\n    }\n}\nclass LintState {\n    constructor(diagnostics, panel, selected) {\n        this.diagnostics = diagnostics;\n        this.panel = panel;\n        this.selected = selected;\n    }\n    static init(diagnostics, panel, state) {\n        // Filter the list of diagnostics for which to create markers\n        let markedDiagnostics = diagnostics;\n        let diagnosticFilter = state.facet(lintConfig).markerFilter;\n        if (diagnosticFilter)\n            markedDiagnostics = diagnosticFilter(markedDiagnostics, state);\n        let ranges = Decoration.set(markedDiagnostics.map((d) => {\n            // For zero-length ranges or ranges covering only a line break, create a widget\n            return d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from)\n                ? Decoration.widget({\n                    widget: new DiagnosticWidget(d),\n                    diagnostic: d\n                }).range(d.from)\n                : Decoration.mark({\n                    attributes: { class: \"cm-lintRange cm-lintRange-\" + d.severity + (d.markClass ? \" \" + d.markClass : \"\") },\n                    diagnostic: d\n                }).range(d.from, d.to);\n        }), true);\n        return new LintState(ranges, panel, findDiagnostic(ranges));\n    }\n}\nfunction findDiagnostic(diagnostics, diagnostic = null, after = 0) {\n    let found = null;\n    diagnostics.between(after, 1e9, (from, to, { spec }) => {\n        if (diagnostic && spec.diagnostic != diagnostic)\n            return;\n        found = new SelectedDiagnostic(from, to, spec.diagnostic);\n        return false;\n    });\n    return found;\n}\nfunction hideTooltip(tr, tooltip) {\n    let from = tooltip.pos, to = tooltip.end || from;\n    let result = tr.state.facet(lintConfig).hideOn(tr, from, to);\n    if (result != null)\n        return result;\n    let line = tr.startState.doc.lineAt(tooltip.pos);\n    return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line.from, Math.max(line.to, to)));\n}\nfunction maybeEnableLint(state, effects) {\n    return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));\n}\n/**\nReturns a transaction spec which updates the current set of\ndiagnostics, and enables the lint extension if if wasn't already\nactive.\n*/\nfunction setDiagnostics(state, diagnostics) {\n    return {\n        effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])\n    };\n}\n/**\nThe state effect that updates the set of active diagnostics. Can\nbe useful when writing an extension that needs to track these.\n*/\nconst setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();\nconst togglePanel = /*@__PURE__*/StateEffect.define();\nconst movePanelSelection = /*@__PURE__*/StateEffect.define();\nconst lintState = /*@__PURE__*/StateField.define({\n    create() {\n        return new LintState(Decoration.none, null, null);\n    },\n    update(value, tr) {\n        if (tr.docChanged && value.diagnostics.size) {\n            let mapped = value.diagnostics.map(tr.changes), selected = null, panel = value.panel;\n            if (value.selected) {\n                let selPos = tr.changes.mapPos(value.selected.from, 1);\n                selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);\n            }\n            if (!mapped.size && panel && tr.state.facet(lintConfig).autoPanel)\n                panel = null;\n            value = new LintState(mapped, panel, selected);\n        }\n        for (let effect of tr.effects) {\n            if (effect.is(setDiagnosticsEffect)) {\n                let panel = !tr.state.facet(lintConfig).autoPanel ? value.panel : effect.value.length ? LintPanel.open : null;\n                value = LintState.init(effect.value, panel, tr.state);\n            }\n            else if (effect.is(togglePanel)) {\n                value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);\n            }\n            else if (effect.is(movePanelSelection)) {\n                value = new LintState(value.diagnostics, value.panel, effect.value);\n            }\n        }\n        return value;\n    },\n    provide: f => [showPanel.from(f, val => val.panel),\n        EditorView.decorations.from(f, s => s.diagnostics)]\n});\n/**\nReturns the number of active lint diagnostics in the given state.\n*/\nfunction diagnosticCount(state) {\n    let lint = state.field(lintState, false);\n    return lint ? lint.diagnostics.size : 0;\n}\nconst activeMark = /*@__PURE__*/Decoration.mark({ class: \"cm-lintRange cm-lintRange-active\" });\nfunction lintTooltip(view, pos, side) {\n    let { diagnostics } = view.state.field(lintState);\n    let found = [], stackStart = 2e8, stackEnd = 0;\n    diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {\n        if (pos >= from && pos <= to &&\n            (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {\n            found.push(spec.diagnostic);\n            stackStart = Math.min(from, stackStart);\n            stackEnd = Math.max(to, stackEnd);\n        }\n    });\n    let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;\n    if (diagnosticFilter)\n        found = diagnosticFilter(found, view.state);\n    if (!found.length)\n        return null;\n    return {\n        pos: stackStart,\n        end: stackEnd,\n        above: view.state.doc.lineAt(stackStart).to < stackEnd,\n        create() {\n            return { dom: diagnosticsTooltip(view, found) };\n        }\n    };\n}\nfunction diagnosticsTooltip(view, diagnostics) {\n    return elt(\"ul\", { class: \"cm-tooltip-lint\" }, diagnostics.map(d => renderDiagnostic(view, d, false)));\n}\n/**\nCommand to open and focus the lint panel.\n*/\nconst openLintPanel = (view) => {\n    let field = view.state.field(lintState, false);\n    if (!field || !field.panel)\n        view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel.of(true)]) });\n    let panel = getPanel(view, LintPanel.open);\n    if (panel)\n        panel.dom.querySelector(\".cm-panel-lint ul\").focus();\n    return true;\n};\n/**\nCommand to close the lint panel, when open.\n*/\nconst closeLintPanel = (view) => {\n    let field = view.state.field(lintState, false);\n    if (!field || !field.panel)\n        return false;\n    view.dispatch({ effects: togglePanel.of(false) });\n    return true;\n};\n/**\nMove the selection to the next diagnostic.\n*/\nconst nextDiagnostic = (view) => {\n    let field = view.state.field(lintState, false);\n    if (!field)\n        return false;\n    let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);\n    if (!next.value) {\n        next = field.diagnostics.iter(0);\n        if (!next.value || next.from == sel.from && next.to == sel.to)\n            return false;\n    }\n    view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });\n    return true;\n};\n/**\nMove the selection to the previous diagnostic.\n*/\nconst previousDiagnostic = (view) => {\n    let { state } = view, field = state.field(lintState, false);\n    if (!field)\n        return false;\n    let sel = state.selection.main;\n    let prevFrom, prevTo, lastFrom, lastTo;\n    field.diagnostics.between(0, state.doc.length, (from, to) => {\n        if (to < sel.to && (prevFrom == null || prevFrom < from)) {\n            prevFrom = from;\n            prevTo = to;\n        }\n        if (lastFrom == null || from > lastFrom) {\n            lastFrom = from;\n            lastTo = to;\n        }\n    });\n    if (lastFrom == null || prevFrom == null && lastFrom == sel.from)\n        return false;\n    view.dispatch({ selection: { anchor: prevFrom !== null && prevFrom !== void 0 ? prevFrom : lastFrom, head: prevTo !== null && prevTo !== void 0 ? prevTo : lastTo }, scrollIntoView: true });\n    return true;\n};\n/**\nA set of default key bindings for the lint functionality.\n\n- Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)\n- F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)\n*/\nconst lintKeymap = [\n    { key: \"Mod-Shift-m\", run: openLintPanel, preventDefault: true },\n    { key: \"F8\", run: nextDiagnostic }\n];\nconst lintPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.timeout = -1;\n        this.set = true;\n        let { delay } = view.state.facet(lintConfig);\n        this.lintTime = Date.now() + delay;\n        this.run = this.run.bind(this);\n        this.timeout = setTimeout(this.run, delay);\n    }\n    run() {\n        clearTimeout(this.timeout);\n        let now = Date.now();\n        if (now < this.lintTime - 10) {\n            this.timeout = setTimeout(this.run, this.lintTime - now);\n        }\n        else {\n            this.set = false;\n            let { state } = this.view, { sources } = state.facet(lintConfig);\n            if (sources.length)\n                Promise.all(sources.map(source => Promise.resolve(source(this.view)))).then(annotations => {\n                    let all = annotations.reduce((a, b) => a.concat(b));\n                    if (this.view.state.doc == state.doc)\n                        this.view.dispatch(setDiagnostics(this.view.state, all));\n                }, error => { logException(this.view.state, error); });\n        }\n    }\n    update(update) {\n        let config = update.state.facet(lintConfig);\n        if (update.docChanged || config != update.startState.facet(lintConfig) ||\n            config.needsRefresh && config.needsRefresh(update)) {\n            this.lintTime = Date.now() + config.delay;\n            if (!this.set) {\n                this.set = true;\n                this.timeout = setTimeout(this.run, config.delay);\n            }\n        }\n    }\n    force() {\n        if (this.set) {\n            this.lintTime = Date.now();\n            this.run();\n        }\n    }\n    destroy() {\n        clearTimeout(this.timeout);\n    }\n});\nconst lintConfig = /*@__PURE__*/Facet.define({\n    combine(input) {\n        return Object.assign({ sources: input.map(i => i.source).filter(x => x != null) }, combineConfig(input.map(i => i.config), {\n            delay: 750,\n            markerFilter: null,\n            tooltipFilter: null,\n            needsRefresh: null,\n            hideOn: () => null,\n        }, {\n            needsRefresh: (a, b) => !a ? b : !b ? a : u => a(u) || b(u)\n        }));\n    }\n});\n/**\nGiven a diagnostic source, this function returns an extension that\nenables linting with that source. It will be called whenever the\neditor is idle (after its content changed). If `null` is given as\nsource, this only configures the lint extension.\n*/\nfunction linter(source, config = {}) {\n    return [\n        lintConfig.of({ source, config }),\n        lintPlugin,\n        lintExtensions\n    ];\n}\n/**\nForces any linters [configured](https://codemirror.net/6/docs/ref/#lint.linter) to run when the\neditor is idle to run right away.\n*/\nfunction forceLinting(view) {\n    let plugin = view.plugin(lintPlugin);\n    if (plugin)\n        plugin.force();\n}\nfunction assignKeys(actions) {\n    let assigned = [];\n    if (actions)\n        actions: for (let { name } of actions) {\n            for (let i = 0; i < name.length; i++) {\n                let ch = name[i];\n                if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {\n                    assigned.push(ch);\n                    continue actions;\n                }\n            }\n            assigned.push(\"\");\n        }\n    return assigned;\n}\nfunction renderDiagnostic(view, diagnostic, inPanel) {\n    var _a;\n    let keys = inPanel ? assignKeys(diagnostic.actions) : [];\n    return elt(\"li\", { class: \"cm-diagnostic cm-diagnostic-\" + diagnostic.severity }, elt(\"span\", { class: \"cm-diagnosticText\" }, diagnostic.renderMessage ? diagnostic.renderMessage(view) : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {\n        let fired = false, click = (e) => {\n            e.preventDefault();\n            if (fired)\n                return;\n            fired = true;\n            let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);\n            if (found)\n                action.apply(view, found.from, found.to);\n        };\n        let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;\n        let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),\n            elt(\"u\", name.slice(keyIndex, keyIndex + 1)),\n            name.slice(keyIndex + 1)];\n        return elt(\"button\", {\n            type: \"button\",\n            class: \"cm-diagnosticAction\",\n            onclick: click,\n            onmousedown: click,\n            \"aria-label\": ` Action: ${name}${keyIndex < 0 ? \"\" : ` (access key \"${keys[i]})\"`}.`\n        }, nameElt);\n    }), diagnostic.source && elt(\"div\", { class: \"cm-diagnosticSource\" }, diagnostic.source));\n}\nclass DiagnosticWidget extends WidgetType {\n    constructor(diagnostic) {\n        super();\n        this.diagnostic = diagnostic;\n    }\n    eq(other) { return other.diagnostic == this.diagnostic; }\n    toDOM() {\n        return elt(\"span\", { class: \"cm-lintPoint cm-lintPoint-\" + this.diagnostic.severity });\n    }\n}\nclass PanelItem {\n    constructor(view, diagnostic) {\n        this.diagnostic = diagnostic;\n        this.id = \"item_\" + Math.floor(Math.random() * 0xffffffff).toString(16);\n        this.dom = renderDiagnostic(view, diagnostic, true);\n        this.dom.id = this.id;\n        this.dom.setAttribute(\"role\", \"option\");\n    }\n}\nclass LintPanel {\n    constructor(view) {\n        this.view = view;\n        this.items = [];\n        let onkeydown = (event) => {\n            if (event.keyCode == 27) { // Escape\n                closeLintPanel(this.view);\n                this.view.focus();\n            }\n            else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp\n                this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);\n            }\n            else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown\n                this.moveSelection((this.selectedIndex + 1) % this.items.length);\n            }\n            else if (event.keyCode == 36) { // Home\n                this.moveSelection(0);\n            }\n            else if (event.keyCode == 35) { // End\n                this.moveSelection(this.items.length - 1);\n            }\n            else if (event.keyCode == 13) { // Enter\n                this.view.focus();\n            }\n            else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z\n                let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);\n                for (let i = 0; i < keys.length; i++)\n                    if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {\n                        let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);\n                        if (found)\n                            diagnostic.actions[i].apply(view, found.from, found.to);\n                    }\n            }\n            else {\n                return;\n            }\n            event.preventDefault();\n        };\n        let onclick = (event) => {\n            for (let i = 0; i < this.items.length; i++) {\n                if (this.items[i].dom.contains(event.target))\n                    this.moveSelection(i);\n            }\n        };\n        this.list = elt(\"ul\", {\n            tabIndex: 0,\n            role: \"listbox\",\n            \"aria-label\": this.view.state.phrase(\"Diagnostics\"),\n            onkeydown,\n            onclick\n        });\n        this.dom = elt(\"div\", { class: \"cm-panel-lint\" }, this.list, elt(\"button\", {\n            type: \"button\",\n            name: \"close\",\n            \"aria-label\": this.view.state.phrase(\"close\"),\n            onclick: () => closeLintPanel(this.view)\n        }, \"×\"));\n        this.update();\n    }\n    get selectedIndex() {\n        let selected = this.view.state.field(lintState).selected;\n        if (!selected)\n            return -1;\n        for (let i = 0; i < this.items.length; i++)\n            if (this.items[i].diagnostic == selected.diagnostic)\n                return i;\n        return -1;\n    }\n    update() {\n        let { diagnostics, selected } = this.view.state.field(lintState);\n        let i = 0, needsSync = false, newSelectedItem = null;\n        diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {\n            let found = -1, item;\n            for (let j = i; j < this.items.length; j++)\n                if (this.items[j].diagnostic == spec.diagnostic) {\n                    found = j;\n                    break;\n                }\n            if (found < 0) {\n                item = new PanelItem(this.view, spec.diagnostic);\n                this.items.splice(i, 0, item);\n                needsSync = true;\n            }\n            else {\n                item = this.items[found];\n                if (found > i) {\n                    this.items.splice(i, found - i);\n                    needsSync = true;\n                }\n            }\n            if (selected && item.diagnostic == selected.diagnostic) {\n                if (!item.dom.hasAttribute(\"aria-selected\")) {\n                    item.dom.setAttribute(\"aria-selected\", \"true\");\n                    newSelectedItem = item;\n                }\n            }\n            else if (item.dom.hasAttribute(\"aria-selected\")) {\n                item.dom.removeAttribute(\"aria-selected\");\n            }\n            i++;\n        });\n        while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {\n            needsSync = true;\n            this.items.pop();\n        }\n        if (this.items.length == 0) {\n            this.items.push(new PanelItem(this.view, {\n                from: -1, to: -1,\n                severity: \"info\",\n                message: this.view.state.phrase(\"No diagnostics\")\n            }));\n            needsSync = true;\n        }\n        if (newSelectedItem) {\n            this.list.setAttribute(\"aria-activedescendant\", newSelectedItem.id);\n            this.view.requestMeasure({\n                key: this,\n                read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),\n                write: ({ sel, panel }) => {\n                    let scaleY = panel.height / this.list.offsetHeight;\n                    if (sel.top < panel.top)\n                        this.list.scrollTop -= (panel.top - sel.top) / scaleY;\n                    else if (sel.bottom > panel.bottom)\n                        this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;\n                }\n            });\n        }\n        else if (this.selectedIndex < 0) {\n            this.list.removeAttribute(\"aria-activedescendant\");\n        }\n        if (needsSync)\n            this.sync();\n    }\n    sync() {\n        let domPos = this.list.firstChild;\n        function rm() {\n            let prev = domPos;\n            domPos = prev.nextSibling;\n            prev.remove();\n        }\n        for (let item of this.items) {\n            if (item.dom.parentNode == this.list) {\n                while (domPos != item.dom)\n                    rm();\n                domPos = item.dom.nextSibling;\n            }\n            else {\n                this.list.insertBefore(item.dom, domPos);\n            }\n        }\n        while (domPos)\n            rm();\n    }\n    moveSelection(selectedIndex) {\n        if (this.selectedIndex < 0)\n            return;\n        let field = this.view.state.field(lintState);\n        let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);\n        if (!selection)\n            return;\n        this.view.dispatch({\n            selection: { anchor: selection.from, head: selection.to },\n            scrollIntoView: true,\n            effects: movePanelSelection.of(selection)\n        });\n    }\n    static open(view) { return new LintPanel(view); }\n}\nfunction svg(content, attrs = `viewBox=\"0 0 40 40\"`) {\n    return `url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" ${attrs}>${encodeURIComponent(content)}</svg>')`;\n}\nfunction underline(color) {\n    return svg(`<path d=\"m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0\" stroke=\"${color}\" fill=\"none\" stroke-width=\".7\"/>`, `width=\"6\" height=\"3\"`);\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-diagnostic\": {\n        padding: \"3px 6px 3px 8px\",\n        marginLeft: \"-1px\",\n        display: \"block\",\n        whiteSpace: \"pre-wrap\"\n    },\n    \".cm-diagnostic-error\": { borderLeft: \"5px solid #d11\" },\n    \".cm-diagnostic-warning\": { borderLeft: \"5px solid orange\" },\n    \".cm-diagnostic-info\": { borderLeft: \"5px solid #999\" },\n    \".cm-diagnostic-hint\": { borderLeft: \"5px solid #66d\" },\n    \".cm-diagnosticAction\": {\n        font: \"inherit\",\n        border: \"none\",\n        padding: \"2px 4px\",\n        backgroundColor: \"#444\",\n        color: \"white\",\n        borderRadius: \"3px\",\n        marginLeft: \"8px\",\n        cursor: \"pointer\"\n    },\n    \".cm-diagnosticSource\": {\n        fontSize: \"70%\",\n        opacity: .7\n    },\n    \".cm-lintRange\": {\n        backgroundPosition: \"left bottom\",\n        backgroundRepeat: \"repeat-x\",\n        paddingBottom: \"0.7px\",\n    },\n    \".cm-lintRange-error\": { backgroundImage: /*@__PURE__*/underline(\"#d11\") },\n    \".cm-lintRange-warning\": { backgroundImage: /*@__PURE__*/underline(\"orange\") },\n    \".cm-lintRange-info\": { backgroundImage: /*@__PURE__*/underline(\"#999\") },\n    \".cm-lintRange-hint\": { backgroundImage: /*@__PURE__*/underline(\"#66d\") },\n    \".cm-lintRange-active\": { backgroundColor: \"#ffdd9980\" },\n    \".cm-tooltip-lint\": {\n        padding: 0,\n        margin: 0\n    },\n    \".cm-lintPoint\": {\n        position: \"relative\",\n        \"&:after\": {\n            content: '\"\"',\n            position: \"absolute\",\n            bottom: 0,\n            left: \"-2px\",\n            borderLeft: \"3px solid transparent\",\n            borderRight: \"3px solid transparent\",\n            borderBottom: \"4px solid #d11\"\n        }\n    },\n    \".cm-lintPoint-warning\": {\n        \"&:after\": { borderBottomColor: \"orange\" }\n    },\n    \".cm-lintPoint-info\": {\n        \"&:after\": { borderBottomColor: \"#999\" }\n    },\n    \".cm-lintPoint-hint\": {\n        \"&:after\": { borderBottomColor: \"#66d\" }\n    },\n    \".cm-panel.cm-panel-lint\": {\n        position: \"relative\",\n        \"& ul\": {\n            maxHeight: \"100px\",\n            overflowY: \"auto\",\n            \"& [aria-selected]\": {\n                backgroundColor: \"#ddd\",\n                \"& u\": { textDecoration: \"underline\" }\n            },\n            \"&:focus [aria-selected]\": {\n                background_fallback: \"#bdf\",\n                backgroundColor: \"Highlight\",\n                color_fallback: \"white\",\n                color: \"HighlightText\"\n            },\n            \"& u\": { textDecoration: \"none\" },\n            padding: 0,\n            margin: 0\n        },\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"2px\",\n            background: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        }\n    }\n});\nfunction severityWeight(sev) {\n    return sev == \"error\" ? 4 : sev == \"warning\" ? 3 : sev == \"info\" ? 2 : 1;\n}\nclass LintGutterMarker extends GutterMarker {\n    constructor(diagnostics) {\n        super();\n        this.diagnostics = diagnostics;\n        this.severity = diagnostics.reduce((max, d) => severityWeight(max) < severityWeight(d.severity) ? d.severity : max, \"hint\");\n    }\n    toDOM(view) {\n        let elt = document.createElement(\"div\");\n        elt.className = \"cm-lint-marker cm-lint-marker-\" + this.severity;\n        let diagnostics = this.diagnostics;\n        let diagnosticsFilter = view.state.facet(lintGutterConfig).tooltipFilter;\n        if (diagnosticsFilter)\n            diagnostics = diagnosticsFilter(diagnostics, view.state);\n        if (diagnostics.length)\n            elt.onmouseover = () => gutterMarkerMouseOver(view, elt, diagnostics);\n        return elt;\n    }\n}\nfunction trackHoverOn(view, marker) {\n    let mousemove = (event) => {\n        let rect = marker.getBoundingClientRect();\n        if (event.clientX > rect.left - 10 /* Hover.Margin */ && event.clientX < rect.right + 10 /* Hover.Margin */ &&\n            event.clientY > rect.top - 10 /* Hover.Margin */ && event.clientY < rect.bottom + 10 /* Hover.Margin */)\n            return;\n        for (let target = event.target; target; target = target.parentNode) {\n            if (target.nodeType == 1 && target.classList.contains(\"cm-tooltip-lint\"))\n                return;\n        }\n        window.removeEventListener(\"mousemove\", mousemove);\n        if (view.state.field(lintGutterTooltip))\n            view.dispatch({ effects: setLintGutterTooltip.of(null) });\n    };\n    window.addEventListener(\"mousemove\", mousemove);\n}\nfunction gutterMarkerMouseOver(view, marker, diagnostics) {\n    function hovered() {\n        let line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);\n        const linePos = view.coordsAtPos(line.from);\n        if (linePos) {\n            view.dispatch({ effects: setLintGutterTooltip.of({\n                    pos: line.from,\n                    above: false,\n                    create() {\n                        return {\n                            dom: diagnosticsTooltip(view, diagnostics),\n                            getCoords: () => marker.getBoundingClientRect()\n                        };\n                    }\n                }) });\n        }\n        marker.onmouseout = marker.onmousemove = null;\n        trackHoverOn(view, marker);\n    }\n    let { hoverTime } = view.state.facet(lintGutterConfig);\n    let hoverTimeout = setTimeout(hovered, hoverTime);\n    marker.onmouseout = () => {\n        clearTimeout(hoverTimeout);\n        marker.onmouseout = marker.onmousemove = null;\n    };\n    marker.onmousemove = () => {\n        clearTimeout(hoverTimeout);\n        hoverTimeout = setTimeout(hovered, hoverTime);\n    };\n}\nfunction markersForDiagnostics(doc, diagnostics) {\n    let byLine = Object.create(null);\n    for (let diagnostic of diagnostics) {\n        let line = doc.lineAt(diagnostic.from);\n        (byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);\n    }\n    let markers = [];\n    for (let line in byLine) {\n        markers.push(new LintGutterMarker(byLine[line]).range(+line));\n    }\n    return RangeSet.of(markers, true);\n}\nconst lintGutterExtension = /*@__PURE__*/gutter({\n    class: \"cm-gutter-lint\",\n    markers: view => view.state.field(lintGutterMarkers),\n});\nconst lintGutterMarkers = /*@__PURE__*/StateField.define({\n    create() {\n        return RangeSet.empty;\n    },\n    update(markers, tr) {\n        markers = markers.map(tr.changes);\n        let diagnosticFilter = tr.state.facet(lintGutterConfig).markerFilter;\n        for (let effect of tr.effects) {\n            if (effect.is(setDiagnosticsEffect)) {\n                let diagnostics = effect.value;\n                if (diagnosticFilter)\n                    diagnostics = diagnosticFilter(diagnostics || [], tr.state);\n                markers = markersForDiagnostics(tr.state.doc, diagnostics.slice(0));\n            }\n        }\n        return markers;\n    }\n});\nconst setLintGutterTooltip = /*@__PURE__*/StateEffect.define();\nconst lintGutterTooltip = /*@__PURE__*/StateField.define({\n    create() { return null; },\n    update(tooltip, tr) {\n        if (tooltip && tr.docChanged)\n            tooltip = hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), { pos: tr.changes.mapPos(tooltip.pos) });\n        return tr.effects.reduce((t, e) => e.is(setLintGutterTooltip) ? e.value : t, tooltip);\n    },\n    provide: field => showTooltip.from(field)\n});\nconst lintGutterTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-gutter-lint\": {\n        width: \"1.4em\",\n        \"& .cm-gutterElement\": {\n            padding: \".2em\"\n        }\n    },\n    \".cm-lint-marker\": {\n        width: \"1em\",\n        height: \"1em\"\n    },\n    \".cm-lint-marker-info\": {\n        content: /*@__PURE__*/svg(`<path fill=\"#aaf\" stroke=\"#77e\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M5 5L35 5L35 35L5 35Z\"/>`)\n    },\n    \".cm-lint-marker-warning\": {\n        content: /*@__PURE__*/svg(`<path fill=\"#fe8\" stroke=\"#fd7\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M20 6L37 35L3 35Z\"/>`),\n    },\n    \".cm-lint-marker-error\": {\n        content: /*@__PURE__*/svg(`<circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"#f87\" stroke=\"#f43\" stroke-width=\"6\"/>`)\n    },\n});\nconst lintExtensions = [\n    lintState,\n    /*@__PURE__*/EditorView.decorations.compute([lintState], state => {\n        let { selected, panel } = state.field(lintState);\n        return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([\n            activeMark.range(selected.from, selected.to)\n        ]);\n    }),\n    /*@__PURE__*/hoverTooltip(lintTooltip, { hideOn: hideTooltip }),\n    baseTheme\n];\nconst lintGutterConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            hoverTime: 300 /* Hover.Time */,\n            markerFilter: null,\n            tooltipFilter: null\n        });\n    }\n});\n/**\nReturns an extension that installs a gutter showing markers for\neach line that has diagnostics, which can be hovered over to see\nthe diagnostics.\n*/\nfunction lintGutter(config = {}) {\n    return [lintGutterConfig.of(config), lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];\n}\n/**\nIterate over the marked diagnostics for the given editor state,\ncalling `f` for each of them. Note that, if the document changed\nsince the diagnostics were created, the `Diagnostic` object will\nhold the original outdated position, whereas the `to` and `from`\narguments hold the diagnostic's current position.\n*/\nfunction forEachDiagnostic(state, f) {\n    let lState = state.field(lintState, false);\n    if (lState && lState.diagnostics.size)\n        for (let iter = RangeSet.iter([lState.diagnostics]); iter.value; iter.next())\n            f(iter.value.spec.diagnostic, iter.from, iter.to);\n}\n\nexport { closeLintPanel, diagnosticCount, forEachDiagnostic, forceLinting, lintGutter, lintKeymap, linter, nextDiagnostic, openLintPanel, previousDiagnostic, setDiagnostics, setDiagnosticsEffect };\n"],"names":["SelectedDiagnostic","constructor","from","to","diagnostic","this","LintState","diagnostics","panel","selected","init","state","markedDiagnostics","diagnosticFilter","facet","lintConfig","markerFilter","ranges","set","map","d","doc","lineAt","widget","DiagnosticWidget","range","mark","attributes","class","severity","markClass","findDiagnostic","after","found","between","spec","hideTooltip","tr","tooltip","pos","end","result","hideOn","line","startState","effects","some","e","is","setDiagnosticsEffect","changes","touchesRange","Math","max","maybeEnableLint","field","lintState","concat","appendConfig","of","lintExtensions","define","togglePanel","movePanelSelection","create","none","update","value","docChanged","size","mapped","selPos","mapPos","autoPanel","effect","length","LintPanel","open","provide","f","val","decorations","s","activeMark","lintTooltip","view","side","stackStart","stackEnd","push","min","tooltipFilter","above","dom","diagnosticsTooltip","renderDiagnostic","closeLintPanel","dispatch","lintKeymap","key","run","querySelector","focus","preventDefault","sel","selection","main","next","iter","anchor","head","scrollIntoView","combine","input","Object","assign","sources","i","source","filter","x","config","delay","needsRefresh","a","b","u","assignKeys","actions","assigned","name","ch","test","c","toLowerCase","inPanel","_a","keys","renderMessage","message","action","fired","click","apply","keyIndex","indexOf","nameElt","slice","type","onclick","onmousedown","super","eq","other","toDOM","PanelItem","id","floor","random","toString","setAttribute","items","list","tabIndex","role","phrase","onkeydown","event","keyCode","moveSelection","selectedIndex","toUpperCase","charCodeAt","contains","target","needsSync","newSelectedItem","_start","_end","item","j","splice","hasAttribute","removeAttribute","pop","requestMeasure","read","getBoundingClientRect","write","scaleY","height","offsetHeight","top","scrollTop","bottom","sync","domPos","firstChild","rm","prev","nextSibling","remove","parentNode","insertBefore","svg","content","attrs","encodeURIComponent","underline","color","baseTheme","padding","marginLeft","display","whiteSpace","borderLeft","font","border","backgroundColor","borderRadius","cursor","fontSize","opacity","backgroundPosition","backgroundRepeat","paddingBottom","backgroundImage","margin","position","left","borderRight","borderBottom","borderBottomColor","maxHeight","overflowY","textDecoration","background_fallback","color_fallback","right","background","compute"],"sourceRoot":""}