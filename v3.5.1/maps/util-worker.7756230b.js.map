{"version":3,"file":"scripts/util-worker.7756230b.js","mappings":"gBAAAA,EAAOC,QAAUC,OAAO,oB,GCCpBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,CCpBA,MAAMQ,EAAU,QACVC,EAAeC,QAAQC,IAAI,CAC7B,uCACAC,MAAM,GAAGJ,wBAA+B,CAAEK,MAAO,gBAAiBC,MAAMC,GAAaA,EAASC,SAC9FJ,MAAM,GAAGJ,uBAA8B,CAAEK,MAAO,gBAAiBC,MAAMC,GAAaA,EAASC,WAC9FF,MAAK,GAAIG,SAASC,EAAOC,MACxBF,EAAMG,aAAaF,GACnBD,EAAMI,YAAYF,GACXF,KAEXK,eAAeC,EAAcC,GACzB,MAAMP,QAAcR,EACpB,OAAQe,EAAQC,MACZ,IAAK,UACD,MAAO,CAAEC,KAAMT,EAAMU,aAAaH,EAAQI,MAAOC,KAAML,EAAQK,MACnE,IAAK,WACD,MAAO,CAAEH,KAAMT,EAAMa,SAASN,EAAQR,MAAOa,KAAML,EAAQK,MAC/D,IAAK,aACD,MAAO,CAAEH,KAAMT,EAAMc,WAAWP,EAAQR,MAAOa,KAAML,EAAQK,MAEzE,CACA,MAAMG,GAAaC,EAAgFC,KAA3B,2BAA9CC,OAAOC,eAAeH,GAAII,YAAYC,MAA/C,IAAEL,EACnBM,QAAQC,IAAI,kCAAkCR,MAC1CA,EACAE,KAAKO,iBAAiB,WAAYC,IAC9BH,QAAQC,IAAI,qBACZ,MAAMG,EAAOD,EAAaE,MAAM,GAChCD,EAAKF,iBAAiB,WAAWnB,MAAOuB,IACpCF,EAAKG,kBAAkBvB,EAAcsB,EAAMnB,MAAM,IAErDiB,EAAKI,QACLJ,EAAKG,YAAY,QAAQ,IAI7BZ,KAAKO,iBAAiB,WAAWnB,MAAOuB,IACpCX,KAAKY,kBAAkBvB,EAAcsB,EAAMnB,MAAM","sources":["webpack:///external import \"../vyxal/vyxal.js\"","webpack:///webpack/bootstrap","webpack:///./src/latest/scripts/workers/util.ts"],"sourcesContent":["module.exports = import(\"../vyxal/vyxal.js\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/// <reference lib=\"WebWorker\" />\n// @ts-expect-error DATA_URI gets replaced by Webpack\nconst dataUri = DATA_URI;\nconst vyxalPromise = Promise.all([\n    import(\"https://vyxal.github.io/Vyxal/vyxal.js\"),\n    fetch(`${dataUri}/ShortDictionary.txt`, { cache: \"force-cache\" }).then((response) => response.text()),\n    fetch(`${dataUri}/LongDictionary.txt`, { cache: \"force-cache\" }).then((response) => response.text()),\n]).then(([{ Vyxal }, short, long]) => {\n    Vyxal.setShortDict(short);\n    Vyxal.setLongDict(long);\n    return Vyxal;\n});\nasync function handleRequest(request) {\n    const Vyxal = await vyxalPromise;\n    switch (request.type) {\n        case \"sbcsify\":\n            return { data: Vyxal.getSBCSified(request.code), rqid: request.rqid };\n        case \"compress\":\n            return { data: Vyxal.compress(request.text), rqid: request.rqid };\n        case \"decompress\":\n            return { data: Vyxal.decompress(request.text), rqid: request.rqid };\n    }\n}\nconst isShared = ((me) => Object.getPrototypeOf(me).constructor.name == \"SharedWorkerGlobalScope\")(self);\nconsole.log(`Utility worker loaded (shared: ${isShared})`);\nif (isShared) {\n    self.addEventListener(\"connect\", (connectEvent) => {\n        console.log(`Connection opened`);\n        const port = connectEvent.ports[0];\n        port.addEventListener(\"message\", async (event) => {\n            port.postMessage(await handleRequest(event.data));\n        });\n        port.start();\n        port.postMessage(\"ready\");\n    });\n}\nelse {\n    self.addEventListener(\"message\", async (event) => {\n        self.postMessage(await handleRequest(event.data));\n    });\n}\nexport {};\n"],"names":["module","exports","import","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","dataUri","vyxalPromise","Promise","all","fetch","cache","then","response","text","Vyxal","short","long","setShortDict","setLongDict","async","handleRequest","request","type","data","getSBCSified","code","rqid","compress","decompress","isShared","me","self","Object","getPrototypeOf","constructor","name","console","log","addEventListener","connectEvent","port","ports","event","postMessage","start"],"sourceRoot":""}